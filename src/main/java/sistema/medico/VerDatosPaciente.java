/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema.medico;

import Animacion.Fade;
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.Component;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.EventObject;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import sistema.alertas.Advertencia;
import sistema.alertas.Hecho;
import sistema.alertas.Informacion;
import sistema.database.BaseDeDatos;
import sistema.database.DatosMedicosPacienteDTO;
import sistema.database.FamiliaresDTO;
import sistema.database.PacientesDTO;
import sistema.util.CalcularEdad;
import sistema.util.CustomUI;
import sistema.util.GestionEncabezado;
import sistema.util.Instancia;
import sistema.util.ModeloTabla;
import sistema.util.PersonalizarTabla;
import java.awt.*;
import static javax.swing.BorderFactory.createMatteBorder;

/**
 *
 * @author Administrador
 */
public class VerDatosPaciente extends JDialog {

    static JTable tabla;
    JFrame parent;
    int x, y;
    static int ID_Paciente;
    static int cedulaFamiliar;

    /**
     * Creates new form VerDatosPaciente
     *
     * @param parent
     * @param modal
     */
    public VerDatosPaciente(JFrame parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        setUndecorated(true);
        initComponents();
        this.setLocationRelativeTo(parent);
        setOpacity(0f);
        BaseDeDatos.crearTablas();
        llenarTablaPacientes("ID_Paciente", 1232);
        iniciarCombox();
        Fade.JDialogFadeIn(0f, 1f, 0.2f, 50, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuOpciones = new javax.swing.JPopupMenu();
        pnlOpciones = new javax.swing.JPanel();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        panelPacientes = new javax.swing.JPanel();
        btnCerrar = new javax.swing.JButton();
        etiquetaDatosDelPaciente = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaDatosPersonalesPaciente = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaDatosMedicosBasicos = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaDatosFamiliaresPaciente = new javax.swing.JTable();
        jLabel32 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel33 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel34 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        btnAgregarFamiliar = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaDatosMedicosAlergias = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaDatosMedicosCirugias = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        tablaDatosMedicosEnfermedadesCronicas = new javax.swing.JTable();
        btnAgregarDatoMedico = new javax.swing.JButton();

        menuOpciones.setBackground(new java.awt.Color(255, 255, 255));
        menuOpciones.setOpaque(false);

        pnlOpciones.setBackground(new java.awt.Color(255, 255, 255));
        pnlOpciones.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnEditar.setBackground(new java.awt.Color(255, 255, 255));
        btnEditar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconoEditar.png"))); // NOI18N
        btnEditar.setText("  Editar");
        btnEditar.setContentAreaFilled(false);
        btnEditar.addMouseListener(new Acciones());
        btnEditar.addActionListener(new Acciones(this));
        btnEditar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditar.setOpaque(true);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        pnlOpciones.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 215, 50));

        btnEliminar.setBackground(new java.awt.Color(255, 255, 255));
        btnEliminar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconoEliminar.png"))); // NOI18N
        btnEliminar.setText("  Eliminar");
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.addMouseListener(new Acciones());
        btnEliminar.addActionListener(new Acciones(this));
        btnEliminar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEliminar.setOpaque(true);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        pnlOpciones.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 55, 215, 50));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelPacientes.setBackground(new java.awt.Color(255, 255, 255));
        panelPacientes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderE = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderE .setShowRightShadow(true);
        dropShadowBorderE .setShowLeftShadow(true);
        dropShadowBorderE .setShowTopShadow(true);
        dropShadowBorderE .setShowBottomShadow(true);

        panelPacientes.setBorder(dropShadowBorderE);

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cerrar.png"))); // NOI18N
        btnCerrar.setBorder(null);
        btnCerrar.setBorderPainted(false);
        btnCerrar.setContentAreaFilled(false);
        btnCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCerrar.setFocusPainted(false);
        btnCerrar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cerrar pressed.png"))); // NOI18N
        btnCerrar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cerrar rollover.png"))); // NOI18N
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        panelPacientes.add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 10, 32, 32));

        etiquetaDatosDelPaciente.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        etiquetaDatosDelPaciente.setForeground(new java.awt.Color(0, 51, 102));
        etiquetaDatosDelPaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaDatosDelPaciente.setText(" DATOS DEL PACIENTE");
        etiquetaDatosDelPaciente.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        etiquetaDatosDelPaciente.addMouseListener(new MouseAdapter(){
            @Override
            public void mousePressed(MouseEvent evt) {
                x = evt.getX();
                y = evt.getY();
            }
        });
        etiquetaDatosDelPaciente.addMouseMotionListener(new MouseMotionAdapter(){
            @Override
            public void mouseDragged(MouseEvent evt) {
                Point point = MouseInfo.getPointerInfo().getLocation();
                setLocation(point.x - x, point.y - y);
            }
        });
        panelPacientes.add(etiquetaDatosDelPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -1, 950, 50));

        jScrollPane4.setBorder(null);

        ModeloTabla modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombres", "Apellidos", "Cedula","Tipo","Fecha de nacimiento","Edad","Genero","Estado Civil"
            }

        );
        tablaDatosPersonalesPaciente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaDatosPersonalesPaciente.setModel(modelo);
        tablaDatosPersonalesPaciente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaDatosPersonalesPaciente.addMouseListener(new Acciones());
        tablaDatosPersonalesPaciente.setRowHeight(25);
        JTableHeader jtableHeader = tablaDatosPersonalesPaciente.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(25,11));
        tablaDatosPersonalesPaciente.setTableHeader(jtableHeader);
        tablaDatosPersonalesPaciente.setBackground(new Color(255,255,255));
        jScrollPane4.getViewport().setBackground(new Color(255,255,255));
        tablaDatosPersonalesPaciente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tablaDatosPersonalesPacienteFocusLost(evt);
            }
        });
        jScrollPane4.setViewportView(tablaDatosPersonalesPaciente);

        panelPacientes.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 78, 930, 61));

        jScrollPane5.setBorder(null);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "Peso", "Tipo de sangre"
            }

        );
        tablaDatosMedicosBasicos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaDatosMedicosBasicos.setModel(modelo);
        tablaDatosMedicosBasicos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaDatosMedicosBasicos.addMouseListener(new Acciones());
        tablaDatosMedicosBasicos.setRowHeight(23);
        jtableHeader = tablaDatosMedicosBasicos.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(25,11));
        tablaDatosMedicosBasicos.setTableHeader(jtableHeader);
        tablaDatosMedicosBasicos.setBackground(new Color(255,255,255));
        jScrollPane5.getViewport().setBackground(new Color(255,255,255));
        jScrollPane5.setViewportView(tablaDatosMedicosBasicos);

        panelPacientes.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 178, 460, 48));

        jScrollPane6.setBorder(null);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "Cedula","Fecha de nacimiento","Edad","Parentesco","Genero",
            }

        );
        tablaDatosFamiliaresPaciente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaDatosFamiliaresPaciente.setModel(modelo);
        tablaDatosFamiliaresPaciente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaDatosFamiliaresPaciente.addMouseListener(new Acciones());
        tablaDatosFamiliaresPaciente.setRowHeight(23);
        jtableHeader = tablaDatosFamiliaresPaciente.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(25,11));
        tablaDatosFamiliaresPaciente.setTableHeader(jtableHeader);
        tablaDatosFamiliaresPaciente.setBackground(new Color(255,255,255));
        jScrollPane6.getViewport().setBackground(new Color(255,255,255));
        jScrollPane6.setViewportView(tablaDatosFamiliaresPaciente);

        panelPacientes.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 930, 117));

        jLabel32.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel32.setText("DATOS PERSONALES");
        panelPacientes.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 920, 20));

        jSeparator3.setBackground(new java.awt.Color(0, 0, 153));
        jSeparator3.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator3.setOpaque(true);
        panelPacientes.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 930, -1));

        jLabel33.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel33.setText("DATOS MEDICOS");
        panelPacientes.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 920, 20));

        jSeparator4.setBackground(new java.awt.Color(0, 0, 153));
        jSeparator4.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator4.setOpaque(true);
        panelPacientes.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 930, -1));

        jLabel34.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel34.setText("DATOS FAMILIARES");
        panelPacientes.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 920, 20));

        jSeparator5.setBackground(new java.awt.Color(0, 0, 153));
        jSeparator5.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator5.setOpaque(true);
        panelPacientes.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 930, -1));

        btnAgregarFamiliar.setBackground(new java.awt.Color(191, 247, 0));
        btnAgregarFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        btnAgregarFamiliar.setText("Agregar nuevo Familiar al paciente");
        btnAgregarFamiliar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarFamiliarActionPerformed(evt);
            }
        });
        panelPacientes.add(btnAgregarFamiliar, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 495, 300, -1));

        jScrollPane7.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane7.setBorder(null);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "Alergias"
            }

        );
        tablaDatosMedicosAlergias.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaDatosMedicosAlergias.setModel(modelo);
        tablaDatosMedicosAlergias.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaDatosMedicosAlergias.addMouseListener(new Acciones());
        tablaDatosMedicosAlergias.setRowHeight(23);
        jtableHeader = tablaDatosMedicosAlergias.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(25,11));
        tablaDatosMedicosAlergias.setTableHeader(jtableHeader);
        tablaDatosMedicosAlergias.setBackground(new Color(255,255,255));
        jScrollPane7.getViewport().setBackground(new Color(255,255,255));
        jScrollPane7.setViewportView(tablaDatosMedicosAlergias);

        panelPacientes.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 178, 460, 48));

        jScrollPane8.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane8.setBorder(null);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "Cirugias"
            }

        );
        tablaDatosMedicosCirugias.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaDatosMedicosCirugias.setModel(modelo);
        tablaDatosMedicosCirugias.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaDatosMedicosCirugias.addMouseListener(new Acciones());
        tablaDatosMedicosCirugias.setRowHeight(23);
        jtableHeader = tablaDatosMedicosCirugias.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(25,11));
        tablaDatosMedicosCirugias.setTableHeader(jtableHeader);
        tablaDatosMedicosCirugias.setBackground(new Color(255,255,255));
        jScrollPane8.getViewport().setBackground(new Color(255,255,255));
        jScrollPane8.setViewportView(tablaDatosMedicosCirugias);

        panelPacientes.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 227, 460, 71));

        jScrollPane9.setBorder(null);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "Enfermedades Cronicas"
            }

        );
        tablaDatosMedicosEnfermedadesCronicas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaDatosMedicosEnfermedadesCronicas.setModel(modelo);
        tablaDatosMedicosEnfermedadesCronicas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaDatosMedicosEnfermedadesCronicas.addMouseListener(new Acciones());
        tablaDatosMedicosEnfermedadesCronicas.setRowHeight(23);
        jtableHeader = tablaDatosMedicosEnfermedadesCronicas.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(25,11));
        tablaDatosMedicosEnfermedadesCronicas.setTableHeader(jtableHeader);
        tablaDatosMedicosEnfermedadesCronicas.setBackground(new Color(255,255,255));
        jScrollPane9.getViewport().setBackground(new Color(255,255,255));
        jScrollPane9.setViewportView(tablaDatosMedicosEnfermedadesCronicas);

        panelPacientes.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 227, 460, 71));

        btnAgregarDatoMedico.setBackground(new java.awt.Color(191, 247, 0));
        btnAgregarDatoMedico.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        btnAgregarDatoMedico.setText("Agregar nuevo dato Medico");
        btnAgregarDatoMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarDatoMedicoActionPerformed(evt);
            }
        });
        panelPacientes.add(btnAgregarDatoMedico, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 310, 300, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(panelPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 950, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void iniciarCombox() {
        ArrayList<String> list = new ArrayList<>();
        list.add("ACTIVO");
        list.add("JUBILADO");
        list.add("MINISTERIO DE ENERGIA ELECTRICA");
        ArrayList<String> list1 = new ArrayList<>();
        list1.add("FEMENINO");
        list1.add("MASCULINO");
        ArrayList<String> list2 = new ArrayList<>();
        list2.add("SOLTERO(A)");
        list2.add("CASADO(A)");
        list2.add("COMPROMETIDO(A)");
        list2.add("DIVORCIADO(A)");
        list2.add("VIUDO(A)");
        ArrayList<String> list3 = new ArrayList<>();
        list3.add("ARH+");
        list3.add("ARH-");
        list3.add("BRH+");
        list3.add("BRH-");
        list3.add("ORH+");
        list3.add("ORH-");
        list3.add("ABRH+");
        list3.add("ABRH-");
        ArrayList<String> list5 = new ArrayList<>();
        list5.add("PADRE");
        list5.add("MADRE");
        list5.add("ABUELO");
        tablaDatosPersonalesPaciente.getColumnModel().getColumn(0).setCellEditor(new CellEditorRenderer("numerico"));
        tablaDatosPersonalesPaciente.getColumnModel().getColumn(1).setCellEditor(new CellEditorRenderer("texto"));
        tablaDatosPersonalesPaciente.getColumnModel().getColumn(2).setCellEditor(new CellEditorRenderer("texto"));
        tablaDatosPersonalesPaciente.getColumnModel().getColumn(3).setCellEditor(new CellEditorRenderer("numerico"));
        tablaDatosPersonalesPaciente.getColumnModel().getColumn(4).setCellEditor(new CellEditorRenderer("combo", list));
        tablaDatosPersonalesPaciente.getColumnModel().getColumn(5).setCellEditor(new CellEditorRenderer("fecha"));
        tablaDatosPersonalesPaciente.getColumnModel().getColumn(7).setCellEditor(new CellEditorRenderer("combo", list1));
        tablaDatosPersonalesPaciente.getColumnModel().getColumn(8).setCellEditor(new CellEditorRenderer("combo", list2));

        tablaDatosMedicosBasicos.getColumnModel().getColumn(0).setCellEditor(new CellEditorRenderer("numerico"));
        tablaDatosMedicosBasicos.getColumnModel().getColumn(1).setCellEditor(new CellEditorRenderer("combo", list3));

        tablaDatosFamiliaresPaciente.getColumnModel().getColumn(0).setCellEditor(new CellEditorRenderer("texto"));
        tablaDatosFamiliaresPaciente.getColumnModel().getColumn(1).setCellEditor(new CellEditorRenderer("texto"));
        tablaDatosFamiliaresPaciente.getColumnModel().getColumn(2).setCellEditor(new CellEditorRenderer("numerico"));
        tablaDatosFamiliaresPaciente.getColumnModel().getColumn(3).setCellEditor(new CellEditorRenderer("fecha"));
        tablaDatosFamiliaresPaciente.getColumnModel().getColumn(5).setCellEditor(new CellEditorRenderer("combo", list5));
        tablaDatosFamiliaresPaciente.getColumnModel().getColumn(6).setCellEditor(new CellEditorRenderer("combo", list1));

    }

    public static void llenarTablaPacientes(String condicion, int valor) {
        PersonalizarTabla personalizar = (PersonalizarTabla) Instancia.getInstancia("util.PersonalizarTabla");

        personalizar.personalizarTabla(tablaDatosPersonalesPaciente, 10, 9, 0, "paciente");
        personalizar.personalizarTabla(tablaDatosMedicosBasicos, 10, 2, 0, "paciente");
        personalizar.personalizarTabla(tablaDatosMedicosAlergias, 100, 1, 0, "texto");
        personalizar.personalizarTabla(tablaDatosMedicosEnfermedadesCronicas, 100, 1, 0, "texto");
        personalizar.personalizarTabla(tablaDatosMedicosCirugias, 100, 1, 0, "texto");

        personalizar.personalizarTabla(tablaDatosPersonalesPaciente, 140, 1);
        personalizar.personalizarTabla(tablaDatosPersonalesPaciente, 140, 2);
        personalizar.personalizarTabla(tablaDatosPersonalesPaciente, 50, 4);
        personalizar.personalizarTabla(tablaDatosPersonalesPaciente, 100, 5);
        personalizar.personalizarTabla(tablaDatosPersonalesPaciente, 30, 6);
        personalizar.personalizarTabla(tablaDatosPersonalesPaciente, 100, 8);

        DefaultTableModel modelo;
        DefaultTableModel modelo1;
        modelo = (DefaultTableModel) tablaDatosPersonalesPaciente.getModel();
        modelo1 = (DefaultTableModel) tablaDatosMedicosBasicos.getModel();
        modelo.setNumRows(0);
        modelo1.setNumRows(0);

        Collection<PacientesDTO> collPacientes = Facade.ConsultarPacientesEspecificos(condicion, valor);
        collPacientes.forEach((dto) -> {
            modelo1.addRow(new Object[]{
                Integer.toString(dto.getPeso()), dto.getTipoDeSangre()
            });
            modelo.addRow(new Object[]{
                Integer.toString(dto.getID_Paciente()), dto.getNombre(), dto.getApellido(),
                Integer.toString(dto.getCedula()), dto.getTipo(), dto.getFechaDeNacimiento(), Integer.toString(dto.getEdad()),
                dto.getGenero(), dto.getEstadoCivil()});

            llenarTablaFamiliares("ID_Paciente ", dto.getID_Paciente());
            llenarTablaDatosMedicos("Alergias", dto.getID_Paciente(), tablaDatosMedicosAlergias);
            llenarTablaDatosMedicos("Enfermedades Cronicas", dto.getID_Paciente(), tablaDatosMedicosEnfermedadesCronicas);
            llenarTablaDatosMedicos("Cirugias", dto.getID_Paciente(), tablaDatosMedicosCirugias);
            ID_Paciente = dto.getID_Paciente();
        });
    }

    public static void llenarTablaDatosMedicos(String condicion, int valor, JTable table) {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) table.getModel();
        modelo.setNumRows(0);
        Collection<DatosMedicosPacienteDTO> coll = Facade.ConsultarDatosMedicos(condicion, valor);
        for (DatosMedicosPacienteDTO dto : coll) {
            modelo.addRow(new Object[]{
                dto.getNombre()
            });
        }
    }

    public static void llenarTablaFamiliares(String condicion, int valor) {
        PersonalizarTabla personalizar = (PersonalizarTabla) Instancia.getInstancia("util.PersonalizarTabla");
        personalizar.personalizarTabla(tablaDatosFamiliaresPaciente, 10, 7, 0, "paciente");
        DefaultTableModel modelo1;
        modelo1 = (DefaultTableModel) tablaDatosFamiliaresPaciente.getModel();
        modelo1.setNumRows(0);
        Collection<FamiliaresDTO> collFamiliares = Facade.ConsultarFamiliaresEspecificos(condicion, valor);
        collFamiliares.forEach((dto1) -> {
            modelo1.addRow(new Object[]{
                dto1.getNombre(), dto1.getApellido(), Integer.toString(dto1.getCedula()),
                dto1.getFechaDeNacimiento(), Integer.toString(dto1.getEdad()),
                dto1.getParentesco(), dto1.getGenero(),});
        });
    }

    class CellEditorRenderer extends AbstractCellEditor implements
            TableCellRenderer, TableCellEditor{

        private static final long serialVersionUID = 1L;
        private JDateChooser fechaEditor = new JDateChooser();
        SimpleDateFormat adf = new SimpleDateFormat("dd - MM - yyyy");
        private JComboBox<?> comboEditor = new JComboBox<String>();
        private JTextField entradaEditor = new JTextField();
        Component renderer;
        Component editor;
        String tipo;
        ArrayList<String> list;

        CellEditorRenderer(String tipo) {
            this.tipo = tipo;
        }

        CellEditorRenderer(String tipo, ArrayList<String> list) {
            this.tipo = tipo;
            this.list = list;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

            return editor;
        }

        @SuppressWarnings("unchecked")
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {

            if (tipo.equals("fecha")) {
                editor = fechaEditor;
                try {
                    ((JTextField) ((JDateChooser) editor).getDateEditor()).setEditable(false);
                    ((JDateChooser) editor).setDate(adf.parse((String) value));
                    ((JDateChooser) editor).setDateFormatString("dd - MM - yyyy");
                } catch (ParseException ex) {
                    Logger.getLogger(VerDatosPaciente.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (tipo.equals("combo")) {
                editor = comboEditor;
                DefaultComboBoxModel<String> modelo;
                modelo = (DefaultComboBoxModel<String>) ((JComboBox<?>) editor).getModel();
                modelo.removeAllElements();
                for (int i = 0; i < list.size(); i++) {
                    modelo.addElement(list.get(i));
                }
                ((JComboBox<?>) editor).setSelectedItem(value);
                ((JComboBox<?>) editor).setUI(CustomUI.createUI(2));
                ((JComboBox<?>) editor).setFocusable(false);
                ((JComboBox<?>) editor).requestFocus();

                ((JComboBox<?>) editor).setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
                ((JComboBox<?>) editor).setFont(new java.awt.Font("Bookman Old Style", 0, 12));
            } else {
                entradaEditor.setText(value.toString());
                entradaEditor.setFont(new Font("Bookman Old Style", 0, 12)); // NOI18N
                entradaEditor.setBorder(createMatteBorder(0, 0, 1, 0, new Color(180, 180, 180)));

                if (tipo.equals("numerico")) {
                    entradaEditor.addKeyListener(new EscucharBotones.AccionesTxt("numerico"));
                } else {
                    entradaEditor.addKeyListener(new EscucharBotones.AccionesTxt("texto"));
                }

                editor = entradaEditor;
            }
            return editor;
        }

        @Override
        public Object getCellEditorValue() {
            String valor;
            if (tipo.equals("fecha")) {
                valor = adf.format(((JDateChooser) editor).getDate());
            } else if (tipo.equals("combo")) {
                valor = ((JComboBox<?>) editor).getSelectedItem().toString();
            } else {
                valor = entradaEditor.getText().toUpperCase();
            }
            return valor;
        }

        @Override
        public boolean isCellEditable(EventObject anEvent) {
            return true;
        }

        @Override
        public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }
    }

    static class Acciones implements ActionListener, MouseListener, TableModelListener {

        JDialog parent;
        int column;
        static String valor;
        static int indexTable;
        static int aux = 0;
        static principal instancia = ((principal) Instancia.getInstancia("medico.principal"));

        public Acciones(JDialog parent) {
            this.parent = parent;

        }

        public Acciones() {

        }

        @Override
        @SuppressWarnings("empty-statement")
        public void actionPerformed(ActionEvent e) {
            if (btnEliminar == e.getSource()) {
                menuOpciones.setVisible(false);
                int paciente;
                if (indexTable == 1) {
                    paciente = Integer.parseInt(tabla.getValueAt(tabla.getSelectedRow(), 3).toString());;
                    Advertencia a = new Advertencia(parent, true, "ESTA SEGURO QUE DESEA ELIMINAR ESTE PACIENTE. SI SE ELIMINA EL PACIENTE SE BORRARAN TODOS LOS FAMILIARES DEL MISMO ");
                    a.setVisible(true);
                    if (Advertencia.continuar) {
                        new Hecho(parent, true).setVisible(true);
                        Facade.EliminarPacientes("Cedula ", paciente);
                        Fade.JDialogFadeOut(1, 0, 0.1f, 50, parent, Fade.DISPOSE);
                        Collection<PacientesDTO> collPacientes = Facade.ConsultarPacientes();
                        instancia.llenarTablaPacientes(collPacientes);
                    }
                }
                if (indexTable == 3 || indexTable == 4 || indexTable == 5) {
                    String tipo;
                    Advertencia a;
                    switch (indexTable) {
                        case 3:
                            tipo = "Alergias";
                            a = new Advertencia(parent, true, "\nESTA SEGURO QUE DESEA ELIMINAR ESTA ALERGIA");
                            break;
                        case 4:
                            tipo = "Enfermedades Cronicas";
                            a = new Advertencia(parent, true, "\nESTA SEGURO QUE DESEA ELIMINAR ESTA ENFERMEDAD CRONICA");
                            break;
                        default:
                            tipo = "Cirugias";
                            a = new Advertencia(parent, true, "\nESTA SEGURO QUE DESEA ELIMINAR ESTA CIRUGIA");
                            break;
                    }
                    String nombre = tabla.getValueAt(tabla.getSelectedRow(), 0).toString();
                    a.setVisible(true);
                    if (Advertencia.continuar) {
                        new Hecho(parent, true).setVisible(true);
                        Facade.EliminarAfeccion(ID_Paciente, nombre, tipo);
                        llenarTablaDatosMedicos(tipo, Integer.parseInt(tablaDatosPersonalesPaciente.getValueAt(0, 0).toString()), tabla);
                    }
                }

                if (indexTable == 6) {
                    paciente = Integer.parseInt(tabla.getValueAt(tabla.getSelectedRow(), 2).toString());;
                    Advertencia a = new Advertencia(parent, true, "\nESTA SEGURO QUE DESEA ELIMINAR ESTE FAMILIAR");
                    a.setVisible(true);
                    if (Advertencia.continuar) {
                        new Hecho(parent, true).setVisible(true);
                        Facade.EliminarFamiliares("Cedula", paciente);
                        llenarTablaFamiliares("ID_Paciente", Integer.parseInt(tablaDatosPersonalesPaciente.getValueAt(0, 0).toString()));
                    }
                }

                btnEliminar.setBackground(new Color(255, 255, 255));

            } else if (btnEditar == e.getSource()) {
                menuOpciones.setVisible(false);
                int row;
                ModeloTabla modelo;
                row = tabla.getSelectedRow();
                modelo = (ModeloTabla) tabla.getModel();
                modelo.setEditable(row, tabla.getSelectedColumn());
                
                tabla.editCellAt(row, tabla.getSelectedColumn());
                if (!tabla.getColumnName(tabla.getSelectedColumn()).equals("Genero")
                        && !tabla.getColumnName(tabla.getSelectedColumn()).equals("Estado Civil")
                        && !tabla.getColumnName(tabla.getSelectedColumn()).equals("Parentesco")
                        && !tabla.getColumnName(tabla.getSelectedColumn()).equals("Tipo de sangre")) {

                    tabla.getCellEditor().getTableCellEditorComponent(tabla, valor, true, row, tabla.getSelectedColumn()).requestFocus();
                } else {
                    tabla.requestFocus();
                }
                aux = 2;
                modelo.addTableModelListener(new Acciones());
                modelo.setEditable(-1, -1);
                btnEditar.setBackground(new Color(255, 255, 255));
            }
        }

        @Override
        public void mouseClicked(MouseEvent me) {
            int row;
            if(tabla!=null)
                tabla.editCellAt(-1,-1);
            if (me.getSource() == tablaDatosPersonalesPaciente) {
                indexTable = 1;
                tablaDatosMedicosBasicos.clearSelection();
                tablaDatosMedicosAlergias.clearSelection();
                tablaDatosMedicosEnfermedadesCronicas.clearSelection();
                tablaDatosMedicosCirugias.clearSelection();
                tablaDatosFamiliaresPaciente.clearSelection();
                pnlOpciones.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 55, 215, 50));
                pnlOpciones.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 215, 50));
            }
            if (me.getSource() == tablaDatosMedicosBasicos) {
                indexTable = 2;
                tablaDatosPersonalesPaciente.clearSelection();
                tablaDatosMedicosAlergias.clearSelection();
                tablaDatosMedicosEnfermedadesCronicas.clearSelection();
                tablaDatosMedicosCirugias.clearSelection();
                tablaDatosFamiliaresPaciente.clearSelection();
                pnlOpciones.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 215, 50));
                pnlOpciones.remove(btnEliminar);
            }
            if (me.getSource() == tablaDatosMedicosAlergias) {
                indexTable = 3;
                tablaDatosPersonalesPaciente.clearSelection();
                tablaDatosMedicosBasicos.clearSelection();
                tablaDatosMedicosEnfermedadesCronicas.clearSelection();
                tablaDatosMedicosCirugias.clearSelection();
                tablaDatosFamiliaresPaciente.clearSelection();
                pnlOpciones.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 215, 50));
                pnlOpciones.remove(btnEditar);
            }
            if (me.getSource() == tablaDatosMedicosEnfermedadesCronicas) {
                indexTable = 4;
                tablaDatosPersonalesPaciente.clearSelection();
                tablaDatosMedicosBasicos.clearSelection();
                tablaDatosMedicosAlergias.clearSelection();
                tablaDatosMedicosCirugias.clearSelection();
                tablaDatosFamiliaresPaciente.clearSelection();
                pnlOpciones.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 215, 50));
                pnlOpciones.remove(btnEditar);
            }
            if (me.getSource() == tablaDatosMedicosCirugias) {
                indexTable = 5;
                tablaDatosPersonalesPaciente.clearSelection();
                tablaDatosMedicosBasicos.clearSelection();
                tablaDatosMedicosAlergias.clearSelection();
                tablaDatosMedicosEnfermedadesCronicas.clearSelection();
                tablaDatosFamiliaresPaciente.clearSelection();
                pnlOpciones.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 215, 50));
                pnlOpciones.remove(btnEditar);
            }
            if (me.getSource() == tablaDatosFamiliaresPaciente) {
                indexTable = 6;
                tablaDatosPersonalesPaciente.clearSelection();
                tablaDatosMedicosBasicos.clearSelection();
                tablaDatosMedicosAlergias.clearSelection();
                tablaDatosMedicosEnfermedadesCronicas.clearSelection();
                tablaDatosMedicosCirugias.clearSelection();
                pnlOpciones.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 55, 215, 50));
                pnlOpciones.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 215, 50));
            }

            if (me.getComponent() instanceof JTable) {
                tabla = (JTable) me.getComponent();
                row = tabla.rowAtPoint(me.getPoint());
                int columna = tabla.columnAtPoint(me.getPoint());
                if (me.isMetaDown() && !tabla.getColumnName(columna).equals("Edad")) {
                    valor = tabla.getValueAt(row, columna).toString();
                    tabla.setColumnSelectionInterval(columna, columna);
                    tabla.setRowSelectionInterval(row, row);
                    menuOpciones.add(pnlOpciones);
                    menuOpciones.show(me.getComponent(), me.getX(), me.getY());
                }
                tabla.requestFocus();
            }
        }

        boolean validarFecha(int pos) {
            SimpleDateFormat adf = new SimpleDateFormat("dd - MM - yyyy");
            Date fechaDate;
            try {
                fechaDate = adf.parse(tabla.getValueAt(tabla.getSelectedRow(), pos).toString());
                tabla.setValueAt(adf.format(fechaDate), tabla.getSelectedRow(), pos);
                return true;
            } catch (ParseException ex) {
                return false;
            }
        }

        @Override
        public void mousePressed(MouseEvent me
        ) {
        }

        @Override
        public void mouseReleased(MouseEvent me
        ) {
        }

        @Override
        public void mouseEntered(MouseEvent me
        ) {
            if (me.getSource() == btnEditar || me.getSource() == btnEliminar) {
                me.getComponent().setBackground(new Color(220, 220, 220));
            }
        }

        @Override
        public void mouseExited(MouseEvent me
        ) {
            if (me.getSource() == btnEditar || me.getSource() == btnEliminar) {
                me.getComponent().setBackground(new Color(255, 255, 255));
            }
        }

        @Override
        public void tableChanged(TableModelEvent tme) {
            if (TableModelEvent.UPDATE == tme.getType() && aux == 2) {
                aux++;

                if (tabla.getValueAt(tabla.getSelectedRow(), tabla.getSelectedColumn()).equals("")) {
                    new sistema.alertas.Error(parent, true, "\n EL CAMPO NO PUEDE ESTAR VACIO").setVisible(true);
                    tabla.setValueAt(valor, tabla.getSelectedRow(), tabla.getSelectedColumn());
                } else if (tabla.getValueAt(tabla.getSelectedRow(), tabla.getSelectedColumn()).equals(valor)) {
                    new Informacion(parent, true, "\n NO HA MODIFICADO EL CAMPO").setVisible(true);
                } else {
                    if (indexTable == 1) {
                        int result = instancia.validarPaciente("Cedula", Integer.parseInt(tabla.getValueAt(tabla.getSelectedRow(), 3).toString()));
                        if (result != 0 && tabla.getSelectedColumn() == 3) {
                            new sistema.alertas.Error(parent, true, " YA EXISTE UN PACIENTE CON ESE NUMERO DE CEDULA").setVisible(true);
                            tabla.setValueAt(valor, tabla.getSelectedRow(), tabla.getSelectedColumn());
                        } else {
                            result = instancia.validarPaciente("ID_Paciente", Integer.parseInt(tabla.getValueAt(tabla.getSelectedRow(), 0).toString()));
                            if (result != 0 && tabla.getSelectedColumn() == 0) {
                                new sistema.alertas.Error(parent, true, "\n YA EXISTE UN PACIENTE CON ESE ID").setVisible(true);
                                tabla.setValueAt(valor, tabla.getSelectedRow(), tabla.getSelectedColumn());
                            } else {
                                if (tabla.getSelectedColumn() == 5 && !validarFecha(5)) {
                                    new sistema.alertas.Error(parent, true, "\n FORMATO DE FECHA NO VALIDA").setVisible(true);
                                    tabla.setValueAt(valor, tabla.getSelectedRow(), tabla.getSelectedColumn());
                                } else {
                                    PacientesDTO nuevosDatos = new PacientesDTO();
                                    nuevosDatos.setID_Paciente(Integer.parseInt(tabla.getValueAt(tabla.getSelectedRow(), 0).toString()));
                                    nuevosDatos.setNombre(tabla.getValueAt(tabla.getSelectedRow(), 1).toString().toUpperCase());
                                    nuevosDatos.setApellido(tabla.getValueAt(tabla.getSelectedRow(), 2).toString().toUpperCase());
                                    nuevosDatos.setCedula(Integer.parseInt(tabla.getValueAt(tabla.getSelectedRow(), 3).toString()));
                                    nuevosDatos.setTipo(tabla.getValueAt(tabla.getSelectedRow(), 4).toString());
                                    nuevosDatos.setFechaDeNacimiento(tabla.getValueAt(tabla.getSelectedRow(), 5).toString().toUpperCase());
                                    nuevosDatos.setEdad(CalcularEdad.convertir(tabla.getValueAt(tabla.getSelectedRow(), 5).toString()));
                                    nuevosDatos.setGenero(tabla.getValueAt(tabla.getSelectedRow(), 7).toString().toUpperCase());
                                    nuevosDatos.setEstadoCivil(tabla.getValueAt(tabla.getSelectedRow(), 8).toString().toUpperCase());
                                    nuevosDatos.setPeso(Integer.parseInt(tablaDatosMedicosBasicos.getValueAt(0, 0).toString()));
                                    nuevosDatos.setTipoDeSangre(tablaDatosMedicosBasicos.getValueAt(0, 1).toString());
                                    tabla.setValueAt(tabla.getValueAt(tabla.getSelectedRow(), tabla.getSelectedColumn()).toString().toUpperCase(), tabla.getSelectedRow(), tabla.getSelectedColumn());
                                    Facade.ActualizarPacientes("ID_Paciente", ID_Paciente, nuevosDatos);
                                    Collection<PacientesDTO> collPacientes = Facade.ConsultarPacientes();
                                    instancia.llenarTablaPacientes(collPacientes);
                                    new Hecho(parent, true).setVisible(true);
                                    tabla.setValueAt(Integer.toString(CalcularEdad.convertir(tabla.getValueAt(tabla.getSelectedRow(), 5).toString())), tabla.getSelectedRow(), 6);
                                }
                            }
                        }
                    } else if (indexTable == 2) {
                        PacientesDTO nuevosDatos = new PacientesDTO();
                        nuevosDatos.setID_Paciente(Integer.parseInt(tablaDatosPersonalesPaciente.getValueAt(0, 0).toString()));
                        nuevosDatos.setNombre(tablaDatosPersonalesPaciente.getValueAt(0, 1).toString().toUpperCase());
                        nuevosDatos.setApellido(tablaDatosPersonalesPaciente.getValueAt(0, 2).toString().toUpperCase());
                        nuevosDatos.setCedula(Integer.parseInt(tablaDatosPersonalesPaciente.getValueAt(0, 3).toString()));
                        nuevosDatos.setTipo(tablaDatosPersonalesPaciente.getValueAt(0, 4).toString());
                        nuevosDatos.setFechaDeNacimiento(tablaDatosPersonalesPaciente.getValueAt(0, 5).toString().toUpperCase());
                        nuevosDatos.setEdad(CalcularEdad.convertir(tablaDatosPersonalesPaciente.getValueAt(0, 5).toString()));
                        nuevosDatos.setGenero(tablaDatosPersonalesPaciente.getValueAt(0, 7).toString().toUpperCase());
                        nuevosDatos.setEstadoCivil(tablaDatosPersonalesPaciente.getValueAt(0, 8).toString().toUpperCase());
                        nuevosDatos.setPeso(Integer.parseInt(tabla.getValueAt(0, 0).toString()));
                        nuevosDatos.setTipoDeSangre(tabla.getValueAt(0, 1).toString());
                        tabla.setValueAt(tabla.getValueAt(tabla.getSelectedRow(), tabla.getSelectedColumn()).toString().toUpperCase(), tabla.getSelectedRow(), tabla.getSelectedColumn());
                        Facade.ActualizarPacientes("ID_Paciente", ID_Paciente, nuevosDatos);
                        //instancia.llenarTablaPacientes();
                        new Hecho(parent, true).setVisible(true);
                    } else if (indexTable == 6) {
                        int result = 0;
                        if (tabla.getSelectedColumn() == 2 || tabla.getSelectedColumn() == 5) {
                            Collection<FamiliaresDTO> collFamiliares = Facade.ConsultarFamiliaresEspecificos("ID_Paciente", Integer.parseInt(tablaDatosPersonalesPaciente.getValueAt(0, 0).toString()));
                            for (FamiliaresDTO dto : collFamiliares) {
                                if (dto.getCedula() == Integer.parseInt(tabla.getValueAt(tabla.getSelectedRow(), 2).toString()) && tabla.getSelectedColumn() == 2) {
                                    new sistema.alertas.Error(parent, true, "YA EXISTE UN FAMILIAR CON ESE NUMERO DE CEDULA").setVisible(true);
                                    tabla.setValueAt(valor, tabla.getSelectedRow(), tabla.getSelectedColumn());
                                    result = 1;
                                }
                                if (dto.getParentesco().equals("MADRE") && tabla.getValueAt(tabla.getSelectedRow(), 5).toString().toUpperCase().equals("MADRE") && tabla.getSelectedColumn() == 5
                                        || dto.getParentesco().equals("PADRE") && tabla.getValueAt(tabla.getSelectedRow(), 5).toString().toUpperCase().equals("PADRE") && tabla.getSelectedColumn() == 5) {
                                    new sistema.alertas.Error(parent, true, "YA EXISTE UN FAMILIAR CON ESA RELACION DE PARENTESCO").setVisible(true);
                                    tabla.setValueAt(valor, tabla.getSelectedRow(), tabla.getSelectedColumn());
                                    result = 1;
                                }
                            }
                        }
                        if (tabla.getSelectedColumn() == 3 && !validarFecha(3)) {
                            new sistema.alertas.Error(parent, true, "\n FORMATO DE FECHA NO VALIDA").setVisible(true);
                            tabla.setValueAt(valor, tabla.getSelectedRow(), tabla.getSelectedColumn());
                            result = 1;
                        }
                        if (result == 0) {
                            FamiliaresDTO nuevosDatos = new FamiliaresDTO();
                            nuevosDatos.setNombre(tabla.getValueAt(tabla.getSelectedRow(), 0).toString().toUpperCase());
                            nuevosDatos.setApellido(tabla.getValueAt(tabla.getSelectedRow(), 1).toString().toUpperCase());
                            nuevosDatos.setCedula(Integer.parseInt(tabla.getValueAt(tabla.getSelectedRow(), 2).toString()));
                            nuevosDatos.setFechaDeNacimiento(tabla.getValueAt(tabla.getSelectedRow(), 3).toString().toUpperCase());
                            nuevosDatos.setEdad(CalcularEdad.convertir(tabla.getValueAt(tabla.getSelectedRow(), 3).toString()));
                            nuevosDatos.setParentesco(tabla.getValueAt(tabla.getSelectedRow(), 5).toString().toUpperCase());
                            nuevosDatos.setGenero(tabla.getValueAt(tabla.getSelectedRow(), 6).toString().toUpperCase());
                            tabla.setValueAt(tabla.getValueAt(tabla.getSelectedRow(), tabla.getSelectedColumn()).toString().toUpperCase(), tabla.getSelectedRow(), tabla.getSelectedColumn());
                            Facade.ActualizarFamiliares("Cedula", Integer.parseInt(valor), nuevosDatos);
                            new Hecho(parent, true).setVisible(true);
                            tabla.setValueAt(Integer.toString(CalcularEdad.convertir(tabla.getValueAt(tabla.getSelectedRow(), 3).toString())), tabla.getSelectedRow(), 4);
                            //JOptionPane.showMessageDialog(null, "pase");
                        }
                    }
                }
            }
        }
    }

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        Fade.JDialogFadeOut(1, 0, 0.1f, 50, this, Fade.DISPOSE);
    }//GEN-LAST:event_btnCerrarActionPerformed


    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAgregarFamiliarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarFamiliarActionPerformed
        new AñadirFamiliar(this, true, Integer.parseInt(tablaDatosPersonalesPaciente.getValueAt(0, 0).toString())).setVisible(true);
    }//GEN-LAST:event_btnAgregarFamiliarActionPerformed

    private void btnAgregarDatoMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarDatoMedicoActionPerformed
        AñadirDatoMedico v = new AñadirDatoMedico(this, true,Integer.parseInt(tablaDatosPersonalesPaciente.getValueAt(0, 0).toString()));
       /* v.entrada.setVisible(false);
        v.etiquetaNombre.setVisible(false);
        modelo = (DefaultComboBoxModel) v.list.getModel();
        modelo.removeAllElements();
        modelo.addElement("DATO MEDICO");
        modelo.addElement("ALERGIAS");
        modelo.addElement("ENFERMEDADES CRONICAS");
        modelo.addElement("CIRUGIAS");
        v.etiqueta.setVisible(true);
        v.etiqueta.setBounds(40, 100, 450, 24);
        v.etiqueta.setText("Seleccione el tipo de dato medico a registrar");
        v.list.setBounds(40, 130, 450, 24);
        v.list.setVisible(true);*/
        v.setVisible(true);
    }//GEN-LAST:event_btnAgregarDatoMedicoActionPerformed

    private void tablaDatosPersonalesPacienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tablaDatosPersonalesPacienteFocusLost
       
    }//GEN-LAST:event_tablaDatosPersonalesPacienteFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerDatosPaciente.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            VerDatosPaciente dialog = new VerDatosPaciente(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarDatoMedico;
    private javax.swing.JButton btnAgregarFamiliar;
    private javax.swing.JButton btnCerrar;
    static javax.swing.JButton btnEditar;
    static javax.swing.JButton btnEliminar;
    private javax.swing.JLabel etiquetaDatosDelPaciente;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    public static javax.swing.JPopupMenu menuOpciones;
    private javax.swing.JPanel panelPacientes;
    public static javax.swing.JPanel pnlOpciones;
    static javax.swing.JTable tablaDatosFamiliaresPaciente;
    static javax.swing.JTable tablaDatosMedicosAlergias;
    static javax.swing.JTable tablaDatosMedicosBasicos;
    static javax.swing.JTable tablaDatosMedicosCirugias;
    static javax.swing.JTable tablaDatosMedicosEnfermedadesCronicas;
    static javax.swing.JTable tablaDatosPersonalesPaciente;
    // End of variables declaration//GEN-END:variables
}
