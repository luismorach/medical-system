/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema.medico;

import Animacion.Animacion;
import Animacion.Fade;
import com.toedter.calendar.JDateChooser;
import diu.swe.habib.JPanelSlider.JPanelSlider;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;
import sistema.alertas.*;
import sistema.database.ActividadesMedicasDTO;
import sistema.database.DatosMedicosPacienteDTO;
import sistema.database.EnfermedadesDTO;
import sistema.database.FamiliaresDTO;
import sistema.database.HistorialDTO;
import sistema.database.PacientesDTO;
import sistema.database.UsuariosDTO;
import sistema.util.CalcularEdad;
import sistema.util.CustomUI;
import sistema.util.EscucharTeclas;
import sistema.util.ModeloTabla;
import sistema.util.GestionEncabezado;
import sistema.util.Instancia;
import sistema.util.PersonalizarTabla;
import java.awt.event.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;

/**
 *
 * @author Administrador
 */
public class principal extends javax.swing.JFrame {

    int estados = 0;
    int nivelesTablas = 0;
    int cantFamiliares = 0;
    Timer tiempo = new Timer(100, new EscucharBotones.Tiempo());

    KeyUniversal key = new KeyUniversal();

    /**
     * Creates new form test
     */
    public principal() {
        setLookAndFeel();
        setUndecorated(true);
        initComponents();
        panelCuenta.setVisible(false);
        panelHome.setVisible(true);
        panelPacientes.setVisible(false);
        panelConsulta.setVisible(false);
        panelConfig.setVisible(false);
        panelEstadistica.setVisible(false);
        panelHistorial.setVisible(false);
        panelAcercaDe.setVisible(false);
        panelDocumentacion.setVisible(false);
        this.setLocationRelativeTo(null);
        iniciarTabla();
        publicidad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    @SuppressWarnings("static-access")
    private void initComponents() {

        menuOpciones = new javax.swing.JPopupMenu();
        pnlOpciones = new javax.swing.JPanel();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        pnlVerPacientes = new javax.swing.JPanel();
        btnVer = new javax.swing.JButton();
        panelMenu = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btnConsulta = new javax.swing.JButton();
        etiquetaHome = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        etiquetaPacientes = new javax.swing.JLabel();
        etiquetaDocumentacion = new javax.swing.JLabel();
        etiquetaEstadisticas = new javax.swing.JLabel();
        etiquetaHistorial = new javax.swing.JLabel();
        etiquetaAcercaDe = new javax.swing.JLabel();
        etiquetaConsulta = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnCerrar = new javax.swing.JButton();
        btnMinimizar = new javax.swing.JButton();
        btnConfigCuenta = new javax.swing.JButton();
        btnConfig = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        panelCuenta = new javax.swing.JPanel();
        etiquetaTotalUsuarios = new javax.swing.JLabel();
        etiquetaTotalPacientes = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        etiquetaCorreo = new javax.swing.JLabel();
        etiquetaCedulaUser = new javax.swing.JLabel();
        etiquetaIDUser = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        etiquetaUser = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        Correo = new javax.swing.JLabel();
        ID = new javax.swing.JLabel();
        cedula = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane68 = new javax.swing.JScrollPane();
        listAtendidosRecientemente = new javax.swing.JEditorPane();
        jLabel19 = new javax.swing.JLabel();
        panelHome = new javax.swing.JPanel();
        jLabel73 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        publicidad1 = new javax.swing.JLabel();
        publicidad2 = new javax.swing.JLabel();
        publicidad3 = new javax.swing.JLabel();
        publicidad4 = new javax.swing.JLabel();
        publicidad5 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jButton15 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        panelConsulta = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        panelDatosPaciente = new javax.swing.JPanel();
        listPacientes = new javax.swing.JComboBox<>();
        btnAñadirPaciente = new javax.swing.JButton();
        jLabel57 = new javax.swing.JLabel();
        panelDatosConsulta = new javax.swing.JPanel();
        listTipoConsulta = new javax.swing.JComboBox<>();
        etiquetaFecha = new javax.swing.JLabel();
        etiquetaHora = new javax.swing.JLabel();
        etiquetaFecha1 = new javax.swing.JLabel();
        etiquetaHora1 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        listMotivoConsulta = new javax.swing.JComboBox<>();
        motivoConsulta = new javax.swing.JLabel();
        btnAñadirEnfermedad = new javax.swing.JButton();
        listEnfermedades = new javax.swing.JComboBox<>();
        etiquetaEnfermedades = new javax.swing.JLabel();
        btnAñadirConsulta = new javax.swing.JButton();
        listAccionConsulta = new javax.swing.JComboBox<>();
        etiquetaAccion = new javax.swing.JLabel();
        btnAñadirAccion = new javax.swing.JButton();
        listResultadoConsulta = new javax.swing.JComboBox<>();
        etiquetaResultadoConsulta = new javax.swing.JLabel();
        btnAñadirResultado = new javax.swing.JButton();
        btnRegistarConsulta = new javax.swing.JButton();
        etiquetaDiasReposo = new javax.swing.JLabel();
        entradaDiasReposo = new javax.swing.JTextField();
        panelPacientes = new javax.swing.JPanel();
        panelRegistroPacientes = new javax.swing.JPanel();
        etiquetaProgreso = new javax.swing.JLabel();
        btnAtras = new javax.swing.JButton();
        btnAdelante = new javax.swing.JButton();
        jPanelSlider1 = new diu.swe.habib.JPanelSlider.JPanelSlider();
        panelDatosPersonales = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        etiquetaNombre = new javax.swing.JLabel();
        entradaNombre = new javax.swing.JTextField();
        etiquetaApellido = new javax.swing.JLabel();
        entradaApellido = new javax.swing.JTextField();
        etiquetaCedula = new javax.swing.JLabel();
        entradaCedula = new javax.swing.JTextField();
        etiquetaID = new javax.swing.JLabel();
        entradaID = new javax.swing.JTextField();
        etiquetaFechaNacimiento = new javax.swing.JLabel();
        entradaFechaNacimiento = new javax.swing.JTextField();
        FechaNacimiento = new com.toedter.calendar.JDateChooser();
        listGenero = new javax.swing.JComboBox<>();
        listEstadoCivil = new javax.swing.JComboBox<>();
        etiquetaEstadoCivil = new javax.swing.JLabel();
        etiquetaGenero = new javax.swing.JLabel();
        listTipo = new javax.swing.JComboBox<>();
        etiquetaTipoPaciente = new javax.swing.JLabel();
        panelDatosFamiliares = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        etiquetaNombreFamiliar = new javax.swing.JLabel();
        entradaNombreFamiliar = new javax.swing.JTextField();
        etiquetaApellidoFamiliar = new javax.swing.JLabel();
        entradaApellidoFamiliar = new javax.swing.JTextField();
        etiquetaCedulaFamiliar = new javax.swing.JLabel();
        entradaCedulaFamiliar = new javax.swing.JTextField();
        etiquetaFechaNacimientoFamiliar = new javax.swing.JLabel();
        entradaFechaNacimientoFamiliar = new javax.swing.JTextField();
        FechaNacimientoFamiliar = new com.toedter.calendar.JDateChooser();
        etiquetaParentescoFamiliar = new javax.swing.JLabel();
        listParentescoFamiliar = new javax.swing.JComboBox<>();
        etiquetaGeneroFamiliar = new javax.swing.JLabel();
        listGeneroFamiliar = new javax.swing.JComboBox<>();
        btnAgregarFamiliar = new javax.swing.JButton();
        panelDatos = new javax.swing.JPanel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        etiquetaAlergias = new javax.swing.JLabel();
        entradaAlergias = new javax.swing.JTextField();
        etiquetaPeso = new javax.swing.JLabel();
        entradaPeso = new javax.swing.JTextField();
        listTipoDeSangre = new javax.swing.JComboBox<>();
        etiquetaTipoDeSangre = new javax.swing.JLabel();
        jButton21 = new javax.swing.JButton();
        listEnfermedadesCronicas = new javax.swing.JComboBox<>();
        listCirugias = new javax.swing.JComboBox<>();
        btnAñadirAlergia = new javax.swing.JButton();
        btnAñadirCirugias = new javax.swing.JButton();
        btnAñadirEnfermedadCronica = new javax.swing.JButton();
        etiquetaEnfermedadesCronicas = new javax.swing.JLabel();
        etiquetaEnfermedadesCronicas1 = new javax.swing.JLabel();
        panelPacientesRegistrados = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        entradaBuscarPaciente = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel56 = new javax.swing.JLabel();
        btnMostrarTodo = new javax.swing.JButton();
        jLabel55 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        btnPacientesRegistrados = new javax.swing.JButton();
        btnNuevoPaciente = new javax.swing.JButton();
        panelEstadistica = new javax.swing.JPanel();
        jLabel64 = new javax.swing.JLabel();
        panelContenedorTablas = new javax.swing.JPanel();
        btnAdelante2 = new javax.swing.JButton();
        btnAtras2 = new javax.swing.JButton();
        etiquetaProgreso2 = new javax.swing.JLabel();
        etiquetaRegion = new javax.swing.JLabel();
        etiquetaMesAño = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanelSlider3 = new diu.swe.habib.JPanelSlider.JPanelSlider();
        panelTabla1 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTable13 = new javax.swing.JTable();
        jScrollPane18 = new javax.swing.JScrollPane();
        jTable14 = new javax.swing.JTable();
        panelTabla2 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTable15 = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTable12 = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        panelTabla3 = new javax.swing.JPanel();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTable16 = new javax.swing.JTable();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTable17 = new javax.swing.JTable();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTable18 = new javax.swing.JTable();
        jScrollPane23 = new javax.swing.JScrollPane();
        jTable19 = new javax.swing.JTable();
        jScrollPane25 = new javax.swing.JScrollPane();
        jTable21 = new javax.swing.JTable();
        jScrollPane27 = new javax.swing.JScrollPane();
        jTable23 = new javax.swing.JTable();
        jScrollPane28 = new javax.swing.JScrollPane();
        jTable24 = new javax.swing.JTable();
        jScrollPane26 = new javax.swing.JScrollPane();
        jTable22 = new javax.swing.JTable();
        panelTabla4 = new javax.swing.JPanel();
        jScrollPane24 = new javax.swing.JScrollPane();
        jTable20 = new javax.swing.JTable();
        jScrollPane29 = new javax.swing.JScrollPane();
        jTable25 = new javax.swing.JTable();
        jScrollPane31 = new javax.swing.JScrollPane();
        jTable27 = new javax.swing.JTable();
        jScrollPane32 = new javax.swing.JScrollPane();
        jTable28 = new javax.swing.JTable();
        jScrollPane33 = new javax.swing.JScrollPane();
        jTable29 = new javax.swing.JTable();
        jScrollPane34 = new javax.swing.JScrollPane();
        jTable30 = new javax.swing.JTable();
        jScrollPane35 = new javax.swing.JScrollPane();
        jTable31 = new javax.swing.JTable();
        jScrollPane30 = new javax.swing.JScrollPane();
        jTable26 = new javax.swing.JTable();
        panelTabla5 = new javax.swing.JPanel();
        jScrollPane36 = new javax.swing.JScrollPane();
        jTable32 = new javax.swing.JTable();
        jScrollPane37 = new javax.swing.JScrollPane();
        jTable33 = new javax.swing.JTable();
        jScrollPane39 = new javax.swing.JScrollPane();
        jTable35 = new javax.swing.JTable();
        jScrollPane40 = new javax.swing.JScrollPane();
        jTable36 = new javax.swing.JTable();
        jScrollPane41 = new javax.swing.JScrollPane();
        jTable37 = new javax.swing.JTable();
        jScrollPane43 = new javax.swing.JScrollPane();
        jTable39 = new javax.swing.JTable();
        panelTabla6 = new javax.swing.JPanel();
        jScrollPane38 = new javax.swing.JScrollPane();
        jTable34 = new javax.swing.JTable();
        jScrollPane42 = new javax.swing.JScrollPane();
        jTable38 = new javax.swing.JTable();
        jScrollPane44 = new javax.swing.JScrollPane();
        jTable40 = new javax.swing.JTable();
        jScrollPane45 = new javax.swing.JScrollPane();
        jTable41 = new javax.swing.JTable();
        jScrollPane46 = new javax.swing.JScrollPane();
        jTable42 = new javax.swing.JTable();
        jScrollPane47 = new javax.swing.JScrollPane();
        jTable43 = new javax.swing.JTable();
        jScrollPane48 = new javax.swing.JScrollPane();
        jTable44 = new javax.swing.JTable();
        jScrollPane49 = new javax.swing.JScrollPane();
        jTable45 = new javax.swing.JTable();
        panelTabla7 = new javax.swing.JPanel();
        jScrollPane50 = new javax.swing.JScrollPane();
        jTable46 = new javax.swing.JTable();
        jScrollPane52 = new javax.swing.JScrollPane();
        jTable48 = new javax.swing.JTable();
        jScrollPane54 = new javax.swing.JScrollPane();
        jTable50 = new javax.swing.JTable();
        jScrollPane51 = new javax.swing.JScrollPane();
        jTable47 = new javax.swing.JTable();
        jScrollPane53 = new javax.swing.JScrollPane();
        jTable49 = new javax.swing.JTable();
        panelTabla8 = new javax.swing.JPanel();
        jScrollPane55 = new javax.swing.JScrollPane();
        jTable51 = new javax.swing.JTable();
        jScrollPane56 = new javax.swing.JScrollPane();
        jTable52 = new javax.swing.JTable();
        jScrollPane57 = new javax.swing.JScrollPane();
        jTable53 = new javax.swing.JTable();
        jScrollPane58 = new javax.swing.JScrollPane();
        jTable54 = new javax.swing.JTable();
        jScrollPane59 = new javax.swing.JScrollPane();
        jTable55 = new javax.swing.JTable();
        panelTabla9 = new javax.swing.JPanel();
        jScrollPane60 = new javax.swing.JScrollPane();
        jTable56 = new javax.swing.JTable();
        jScrollPane61 = new javax.swing.JScrollPane();
        jTable57 = new javax.swing.JTable();
        jScrollPane62 = new javax.swing.JScrollPane();
        jTable58 = new javax.swing.JTable();
        jScrollPane63 = new javax.swing.JScrollPane();
        jTable59 = new javax.swing.JTable();
        jScrollPane64 = new javax.swing.JScrollPane();
        jTable60 = new javax.swing.JTable();
        panelConfig = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jButton17 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jButton18 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jButton19 = new javax.swing.JButton();
        panelHistorial = new javax.swing.JPanel();
        jLabel61 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel63 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        etiquetaSelecionarPaciente = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable62 = new javax.swing.JTable();
        jScrollPane65 = new javax.swing.JScrollPane();
        jTable63 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable61 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        datosPersonalesHistorial = new javax.swing.JEditorPane();
        listPacientes1 = new javax.swing.JComboBox<>();
        panelDocumentacion = new javax.swing.JPanel();
        jLabel68 = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        jLabel70 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane66 = new javax.swing.JScrollPane();
        textDocumentacion = new javax.swing.JTextPane();
        panelAcercaDe = new javax.swing.JPanel();
        jLabel62 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        lblFechaActual = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator8 = new javax.swing.JSeparator();
        background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        menuOpciones.setBackground(new java.awt.Color(255, 255, 255));
        menuOpciones.setOpaque(false);

        pnlOpciones.setBackground(new java.awt.Color(255, 255, 255));
        pnlOpciones.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnEditar.setBackground(new java.awt.Color(255, 255, 255));
        btnEditar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconoEditar.png"))); // NOI18N
        btnEditar.setText("  Editar");
        btnEditar.addMouseListener(new EscucharBotones.mouse());
        btnEditar.addActionListener(new EscucharBotones.Acciones());
        btnEditar.setContentAreaFilled(false);
        btnEditar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditar.setOpaque(true);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        pnlOpciones.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 215, 50));

        btnEliminar.setBackground(new java.awt.Color(255, 255, 255));
        btnEliminar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconoEliminar.png"))); // NOI18N
        btnEliminar.setText("  Eliminar");
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEliminar.addMouseListener(new EscucharBotones.mouse());
        btnEliminar.addActionListener(new EscucharBotones.Acciones());
        btnEliminar.setOpaque(true);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        pnlOpciones.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 55, 215, 50));

        pnlVerPacientes.setBackground(new java.awt.Color(255, 255, 255));
        pnlVerPacientes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnVer.setBackground(new java.awt.Color(255, 255, 255));
        btnVer.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        btnVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnVer.png"))); // NOI18N
        btnVer.setText("  Ver");
        btnVer.addMouseListener(new EscucharBotones.mouse());
        btnVer.addActionListener(new EscucharBotones.Acciones());
        btnVer.setContentAreaFilled(false);
        btnVer.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnVer.setOpaque(true);
        
        pnlVerPacientes.add(btnVer, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 215, 50));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1024, 600));
        
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelMenu.setBackground(new java.awt.Color(255, 255, 255));
        panelMenu.setLayout(null);
        panelMenu.setSize(230, 596);
        panelMenu.setLocation(-180, 2);
        JLayeredPane panecapas=getLayeredPane();
        panecapas.add(panelMenu,300);

        jButton1.setBackground(new java.awt.Color(102, 0, 102));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cerrar1.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cerrar1 pressed.png"))); // NOI18N
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cerrar1 rollover.png"))); // NOI18N
        panelMenu.add(jButton1);
        jButton1.setBounds(183, 540, 44, 44);

        jButton3.setBackground(new java.awt.Color(102, 0, 102));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono menu.png"))); // NOI18N
        jButton3.setBorder(null);
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono menu pressed.png"))); // NOI18N
        jButton3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono menu rollover.png"))); // NOI18N
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        panelMenu.add(jButton3);
        jButton3.setBounds(183, 15, 44, 44);

        btnConsulta.setBackground(new java.awt.Color(102, 0, 102));
        btnConsulta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono consulta.png"))); // NOI18N
        btnConsulta.setBorder(null);
        btnConsulta.setBorderPainted(false);
        btnConsulta.setContentAreaFilled(false);
        btnConsulta.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono consulta pressed.png"))); // NOI18N
        btnConsulta.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono consulta rollover.png"))); // NOI18N
        btnConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConsultaMouseClicked(evt);
            }
        });
        panelMenu.add(btnConsulta);
        btnConsulta.setBounds(183, 130, 44, 44);

        etiquetaHome.setFont(new java.awt.Font("Bookman Old Style", 3, 18)); // NOI18N
        etiquetaHome.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaHome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaHome.setText("Home");
        panelMenu.add(etiquetaHome);
        etiquetaHome.setBounds(0, 90, 210, 22);

        jButton8.setBackground(new java.awt.Color(102, 0, 102));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono home.png"))); // NOI18N
        jButton8.setBorder(null);
        jButton8.setBorderPainted(false);
        jButton8.setContentAreaFilled(false);
        jButton8.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono home pressed.png"))); // NOI18N
        jButton8.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono home rollover.png"))); // NOI18N
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });
        panelMenu.add(jButton8);
        jButton8.setBounds(183, 70, 44, 44);

        jButton9.setBackground(new java.awt.Color(102, 0, 102));
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono documentacion.png"))); // NOI18N
        jButton9.setBorder(null);
        jButton9.setBorderPainted(false);
        jButton9.setContentAreaFilled(false);
        jButton9.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono documentacion pressed.png"))); // NOI18N
        jButton9.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono documentacion rollover.png"))); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        panelMenu.add(jButton9);
        jButton9.setBounds(183, 370, 44, 44);

        jButton10.setBackground(new java.awt.Color(102, 0, 102));
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono estadistica.png"))); // NOI18N
        jButton10.setBorder(null);
        jButton10.setBorderPainted(false);
        jButton10.setContentAreaFilled(false);
        jButton10.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono estadistica pressed.png"))); // NOI18N
        jButton10.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono estadistica rollover.png"))); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        panelMenu.add(jButton10);
        jButton10.setBounds(183, 250, 44, 44);

        jButton11.setBackground(new java.awt.Color(102, 0, 102));
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono historial.png"))); // NOI18N
        jButton11.setBorder(null);
        jButton11.setBorderPainted(false);
        jButton11.setContentAreaFilled(false);
        jButton11.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono historial pressed.png"))); // NOI18N
        jButton11.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono historial rollover.png"))); // NOI18N
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        panelMenu.add(jButton11);
        jButton11.setBounds(183, 310, 44, 44);

        jButton12.setBackground(new java.awt.Color(102, 0, 102));
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono about.png"))); // NOI18N
        jButton12.setBorder(null);
        jButton12.setBorderPainted(false);
        jButton12.setContentAreaFilled(false);
        jButton12.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono about pressed.png"))); // NOI18N
        jButton12.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono about rollover.png"))); // NOI18N
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        panelMenu.add(jButton12);
        jButton12.setBounds(183, 430, 44, 44);

        jButton13.setBackground(new java.awt.Color(102, 0, 102));
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono pacientes.png"))); // NOI18N
        jButton13.setBorder(null);
        jButton13.setBorderPainted(false);
        jButton13.setContentAreaFilled(false);
        jButton13.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono pacientes pressed.png"))); // NOI18N
        jButton13.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono pacientes rollover.png"))); // NOI18N
        jButton13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton13MouseClicked(evt);
            }
        });
        panelMenu.add(jButton13);
        jButton13.setBounds(183, 190, 44, 44);

        etiquetaPacientes.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaPacientes.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaPacientes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaPacientes.setText("Pacientes");
        panelMenu.add(etiquetaPacientes);
        etiquetaPacientes.setBounds(0, 210, 210, 22);

        etiquetaDocumentacion.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaDocumentacion.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaDocumentacion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaDocumentacion.setText("Documentacion");
        panelMenu.add(etiquetaDocumentacion);
        etiquetaDocumentacion.setBounds(0, 390, 210, 20);

        etiquetaEstadisticas.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaEstadisticas.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaEstadisticas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaEstadisticas.setText("Estadisticas");
        panelMenu.add(etiquetaEstadisticas);
        etiquetaEstadisticas.setBounds(0, 270, 210, 22);

        etiquetaHistorial.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaHistorial.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaHistorial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaHistorial.setText("Historial");
        panelMenu.add(etiquetaHistorial);
        etiquetaHistorial.setBounds(0, 330, 210, 22);

        etiquetaAcercaDe.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaAcercaDe.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaAcercaDe.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaAcercaDe.setText("Acerca de");
        panelMenu.add(etiquetaAcercaDe);
        etiquetaAcercaDe.setBounds(0, 450, 210, 22);

        etiquetaConsulta.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaConsulta.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaConsulta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaConsulta.setText("Consulta");
        panelMenu.add(etiquetaConsulta);
        etiquetaConsulta.setBounds(0, 150, 210, 22);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/menu.png"))); // NOI18N
        panelMenu.add(jLabel2);
        jLabel2.setBounds(0, 0, 230, 596);

        /*

        getContentPane().add(panelMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(-180, 2, 230, 596));
        */

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cerrar.png"))); // NOI18N
        btnCerrar.setBorder(null);
        btnCerrar.setBorderPainted(false);
        btnCerrar.setContentAreaFilled(false);
        btnCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCerrar.setFocusPainted(false);
        btnCerrar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cerrar pressed.png"))); // NOI18N
        btnCerrar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cerrar rollover.png"))); // NOI18N
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 5, 32, 32));

        btnMinimizar.setBackground(new java.awt.Color(255, 255, 255));
        btnMinimizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono minimizar.png"))); // NOI18N
        btnMinimizar.setBorder(null);
        btnMinimizar.setBorderPainted(false);
        btnMinimizar.setContentAreaFilled(false);
        btnMinimizar.setOpaque(true);
        btnMinimizar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono minimizar pressed.png"))); // NOI18N
        btnMinimizar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono minimizar rollover.png"))); // NOI18N
        btnMinimizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnMinimizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 5, 32, 32));

        btnConfigCuenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cuenta.png"))); // NOI18N
        btnConfigCuenta.setBorder(null);
        btnConfigCuenta.setBorderPainted(false);
        btnConfigCuenta.setContentAreaFilled(false);
        btnConfigCuenta.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cuenta pressed.png"))); // NOI18N
        btnConfigCuenta.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono cuenta rollover.png"))); // NOI18N
        btnConfigCuenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConfigCuentaMouseClicked(evt);
            }
        });
        getContentPane().add(btnConfigCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(978, 237, -1, -1));

        btnConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono config.png"))); // NOI18N
        btnConfig.setBorder(null);
        btnConfig.setBorderPainted(false);
        btnConfig.setContentAreaFilled(false);
        btnConfig.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono config pressed.png"))); // NOI18N
        btnConfig.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono config rollover.png"))); // NOI18N
        btnConfig.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConfigMouseClicked(evt);
            }
        });
        getContentPane().add(btnConfig, new org.netbeans.lib.awtextra.AbsoluteConstraints(978, 280, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/estilo.png"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(974, 242, 10, 80));

        panelCuenta.setBackground(new java.awt.Color(32, 117, 32));
        panelCuenta.setOpaque(false);
        panelCuenta.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        etiquetaTotalUsuarios.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        etiquetaTotalUsuarios.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaTotalUsuarios.setText("<html><center>Usuarios Registrados");
        panelCuenta.add(etiquetaTotalUsuarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 220, 150, 50));

        etiquetaTotalPacientes.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        etiquetaTotalPacientes.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaTotalPacientes.setText("<html><center>Pacientes Registrados");
        panelCuenta.add(etiquetaTotalPacientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 220, -1, 50));

        jButton14.setBackground(new java.awt.Color(102, 0, 102));
        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono editar cuenta.png"))); // NOI18N
        jButton14.setBorder(null);
        jButton14.setBorderPainted(false);
        jButton14.setContentAreaFilled(false);
        jButton14.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono editar cuenta rollover.png"))); // NOI18N
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        panelCuenta.add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 390, -1, -1));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/User.png"))); // NOI18N
        panelCuenta.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 200, 200));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/portada.png"))); // NOI18N
        panelCuenta.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 76, 970, -1));

        jSeparator1.setBackground(new java.awt.Color(0, 0, 153));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator1.setOpaque(true);
        panelCuenta.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 880, -1));

        jSeparator2.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelCuenta.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(486, 370, 10, 200));

        etiquetaCorreo.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        etiquetaCorreo.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaCorreo.setText("Correo:");
        panelCuenta.add(etiquetaCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 500, -1, 20));

        etiquetaCedulaUser.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        etiquetaCedulaUser.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaCedulaUser.setText("C.I:");
        panelCuenta.add(etiquetaCedulaUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 465, -1, 20));

        etiquetaIDUser.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        etiquetaIDUser.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaIDUser.setText("ID:");
        panelCuenta.add(etiquetaIDUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 430, -1, 20));

        jLabel17.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 153));
        jLabel17.setText("Perfil");
        panelCuenta.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 360, -1, -1));

        etiquetaUser.setFont(new java.awt.Font("Bookman Old Style", 0, 28)); // NOI18N
        etiquetaUser.setText("Usuario");
        panelCuenta.add(etiquetaUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 300, -1, -1));

        jLabel67.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        jLabel67.setForeground(new java.awt.Color(0, 0, 153));
        jLabel67.setText("Atendidos Recientemente");
        panelCuenta.add(jLabel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 360, -1, -1));

        Correo.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        Correo.setText("Correo:");
        panelCuenta.add(Correo, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 500, -1, -1));

        ID.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        ID.setText("ID:");
        panelCuenta.add(ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 430, -1, -1));

        cedula.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        cedula.setText("C.I:");
        panelCuenta.add(cedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 465, -1, -1));

        jLabel16.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        jLabel16.setText("edad:");
        panelCuenta.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 535, -1, -1));

        jScrollPane68.setBorder(null);
        jScrollPane68.setOpaque(false);

        listAtendidosRecientemente.setEditable(false);
        listAtendidosRecientemente.setBorder(null);
        listAtendidosRecientemente.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listAtendidosRecientemente.setFocusable(false);
        listAtendidosRecientemente.setOpaque(false);
        jScrollPane68.setViewportView(listAtendidosRecientemente);

        panelCuenta.add(jScrollPane68, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 420, 420, 150));

        jLabel19.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 153));
        jLabel19.setText("edad:");
        panelCuenta.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 535, -1, 20));

        getContentPane().add(panelCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 2, 972, 596));

        panelHome.setBackground(new java.awt.Color(255, 255, 255));
        panelHome.setOpaque(false);
        panelHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel73.setBackground(new java.awt.Color(0, 0, 0));
        jLabel73.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel73.setForeground(new java.awt.Color(255, 255, 255));
        jLabel73.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel73.setText("Eliminar tarea");
        jLabel73.setOpaque(true);
        panelHome.add(jLabel73, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 510, 140, 30));

        jLabel69.setBackground(new java.awt.Color(0, 0, 0));
        jLabel69.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(255, 255, 255));
        jLabel69.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel69.setText("Mis tareas");
        jLabel69.setOpaque(true);
        panelHome.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 510, 140, 30));

        jLabel71.setBackground(new java.awt.Color(0, 0, 0));
        jLabel71.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel71.setForeground(new java.awt.Color(255, 255, 255));
        jLabel71.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel71.setText("Nueva tarea");
        jLabel71.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 1, 1, new java.awt.Color(0, 51, 153)));
        jLabel71.setOpaque(true);
        panelHome.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 510, 140, 30));

        jLabel20.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel20.setText("LO MAS DESTACADO");
        panelHome.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, 200, -1));

        jSeparator3.setBackground(new java.awt.Color(0, 0, 153));
        jSeparator3.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator3.setOpaque(true);
        panelHome.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 870, -1));

        jSeparator4.setBackground(new java.awt.Color(0, 0, 153));
        jSeparator4.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator4.setOpaque(true);
        panelHome.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, 870, -1));

        jLabel21.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        jLabel21.setText("HOME");
        panelHome.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 80, 30));

        jLabel22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        panelHome.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 410, 140, 130));

        publicidad1.setBackground(new java.awt.Color(255, 255, 255));
        publicidad1.setFont(new java.awt.Font("Bookman Old Style", 2, 13)); // NOI18N
        publicidad1.setForeground(new java.awt.Color(255, 255, 255));
        publicidad1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        publicidad1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/publicidad.png"))); // NOI18N
        publicidad1.setText("<html><center>Pacientes Activos Registrados");
        publicidad1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        publicidad1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        publicidad1.setOpaque(true);
        panelHome.add(publicidad1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 140, 130));

        publicidad2.setFont(new java.awt.Font("Bookman Old Style", 2, 13)); // NOI18N
        publicidad2.setForeground(new java.awt.Color(255, 255, 255));
        publicidad2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        publicidad2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/publicidad.png"))); // NOI18N
        publicidad2.setText("<html><center>Pacientes Jubilados Registrados");
        publicidad2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        publicidad2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelHome.add(publicidad2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 180, 140, 130));

        publicidad3.setFont(new java.awt.Font("Bookman Old Style", 2, 13)); // NOI18N
        publicidad3.setForeground(new java.awt.Color(255, 255, 255));
        publicidad3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        publicidad3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/publicidad.png"))); // NOI18N
        publicidad3.setText("<html><center>Pacientes del Ministerio de Energía Eléctrica Registrados");
        publicidad3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        publicidad3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelHome.add(publicidad3, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 180, 140, 130));

        publicidad4.setFont(new java.awt.Font("Bookman Old Style", 2, 13)); // NOI18N
        publicidad4.setForeground(new java.awt.Color(255, 255, 255));
        publicidad4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        publicidad4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/publicidad.png"))); // NOI18N
        publicidad4.setText("<html><center>ConsultasPreventivas registradas <br>");
        publicidad4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        publicidad4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelHome.add(publicidad4, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 180, 140, 130));

        publicidad5.setFont(new java.awt.Font("Bookman Old Style", 2, 13)); // NOI18N
        publicidad5.setForeground(new java.awt.Color(255, 255, 255));
        publicidad5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        publicidad5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/publicidad.png"))); // NOI18N
        publicidad5.setText("<html><center>Consultas Curativas registradas <br>");
        publicidad5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        publicidad5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelHome.add(publicidad5, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 180, 140, 130));

        jLabel30.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        panelHome.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 410, 140, 130));

        jLabel31.setBackground(new java.awt.Color(0, 0, 0));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/file_delete_remove_13907.png"))); // NOI18N
        jLabel31.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel31.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 0, 153)));
        panelHome.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 410, 140, 130));

        jLabel32.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel32.setText("LO MAS DESTACADO");
        panelHome.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 200, -1));

        jButton15.setBackground(new java.awt.Color(255, 255, 255));
        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add_insert_document_13988.png"))); // NOI18N
        jButton15.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 0, 1, new java.awt.Color(0, 0, 153)));
        jButton15.setContentAreaFilled(false);
        jButton15.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        panelHome.add(jButton15, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 140, 100));

        jButton20.setBackground(new java.awt.Color(255, 255, 255));
        jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mis citas.png"))); // NOI18N
        jButton20.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 0, 1, new java.awt.Color(0, 0, 153)));
        jButton20.setContentAreaFilled(false);
        jButton20.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        panelHome.add(jButton20, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 410, 140, 100));

        getContentPane().add(panelHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 2, 972, 596));

        panelConsulta.setBackground(new java.awt.Color(255, 255, 255));
        panelConsulta.setOpaque(false);
        panelConsulta.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel34.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        jLabel34.setText("CONSULTA");
        panelConsulta.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 140, -1));

        jLabel58.setBackground(new java.awt.Color(255, 255, 255));
        jLabel58.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(0, 0, 153));
        jLabel58.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel58.setText("Datos del paciente");
        jLabel58.setOpaque(true);
        panelConsulta.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, 146, 20));

        jLabel60.setBackground(new java.awt.Color(255, 255, 255));
        jLabel60.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(0, 0, 153));
        jLabel60.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel60.setText("Datos de la consulta");
        jLabel60.setOpaque(true);
        panelConsulta.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 210, 160, 20));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder5 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder5 .setShowRightShadow(true);
        dropShadowBorder5 .setShowLeftShadow(true);
        dropShadowBorder5 .setShowTopShadow(true);
        dropShadowBorder5 .setShowBottomShadow(true);

        jPanel5.setBorder(dropShadowBorder5);

        panelDatosPaciente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelDatosPaciente.setOpaque(false);
        panelDatosPaciente.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listPacientes.setEditable(true);
        listPacientes.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listPacientes.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listPacientes.setUI(CustomUI.createUI(listPacientes));
        //ajustaScrollBar(listPacientes);
        listPacientes.getEditor().getEditorComponent().addKeyListener(new EscucharTeclas(listPacientes,"SELECCIONE EL NOMBRE DEL PACIENTE"));
        listPacientes.getEditor().getEditorComponent().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent evt) {

                EscucharTeclas.setTipo("PACIENTES");

                // System.out.println(EscucharTeclas.getTipo());
            }
        });
        listPacientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listPacientesItemStateChanged(evt);
            }
        });
        panelDatosPaciente.add(listPacientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 36, 760, 25));

        btnAñadirPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas.png"))); // NOI18N
        btnAñadirPaciente.setBorderPainted(false);
        btnAñadirPaciente.setContentAreaFilled(false);
        btnAñadirPaciente.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas pressed.png"))); // NOI18N
        btnAñadirPaciente.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas rollover.png"))); // NOI18N
        btnAñadirPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirPacienteActionPerformed(evt);
            }
        });
        panelDatosPaciente.add(btnAñadirPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 34, 40, 30));

        jLabel57.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(153, 153, 153));
        jLabel57.setText("Nombre del paciente");
        panelDatosPaciente.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 120, -1));

        jPanel5.add(panelDatosPaciente);
        panelDatosPaciente.setBounds(20, 30, 870, 80);

        panelDatosConsulta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelDatosConsulta.setOpaque(false);
        panelDatosConsulta.setLayout(null);

        listTipoConsulta.setBackground(new java.awt.Color(0, 0, 0));
        listTipoConsulta.setEditable(true);
        listTipoConsulta.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listTipoConsulta.setForeground(new java.awt.Color(255, 255, 255));
        listTipoConsulta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE EL TIPO DE CONSULTA", "CONSULTA PREVENTIVA", "CONSULTA CURATIVA" }));
        listTipoConsulta.setUI(CustomUI.createUI(listTipoConsulta));
        listTipoConsulta.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listTipoConsulta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listTipoConsultaItemStateChanged(evt);
            }
        });
        panelDatosConsulta.add(listTipoConsulta);
        listTipoConsulta.setBounds(330, 50, 470, 25);

        etiquetaFecha.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        etiquetaFecha.setText("Fecha");
        panelDatosConsulta.add(etiquetaFecha);
        etiquetaFecha.setBounds(110, 30, 180, 15);

        etiquetaHora.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        etiquetaHora.setText("Hora");
        panelDatosConsulta.add(etiquetaHora);
        etiquetaHora.setBounds(100, 60, 200, 15);

        etiquetaFecha1.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        etiquetaFecha1.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaFecha1.setText("Fecha:");
        panelDatosConsulta.add(etiquetaFecha1);
        etiquetaFecha1.setBounds(60, 30, 39, 15);

        etiquetaHora1.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        etiquetaHora1.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaHora1.setText("Hora:");
        panelDatosConsulta.add(etiquetaHora1);
        etiquetaHora1.setBounds(60, 60, 33, 15);

        jLabel45.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(153, 153, 153));
        jLabel45.setText("Tipo de consulta");
        panelDatosConsulta.add(jLabel45);
        jLabel45.setBounds(330, 24, 120, 13);

        listMotivoConsulta.setBackground(new java.awt.Color(0, 0, 0));
        listMotivoConsulta.setEditable(true);
        listMotivoConsulta.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listMotivoConsulta.setForeground(new java.awt.Color(255, 255, 255));
        listMotivoConsulta.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listMotivoConsulta.setUI(CustomUI.createUI(listMotivoConsulta));
        listMotivoConsulta.getEditor().getEditorComponent().addKeyListener(new EscucharTeclas(listMotivoConsulta,"SELECCIONE EL MOTIVO DE LA CONSULTA"));
        listMotivoConsulta.getEditor().getEditorComponent().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent evt) {
                if (listTipoConsulta.getSelectedItem().equals("CONSULTA PREVENTIVA")) {
                    EscucharTeclas.setTipo("CONSULTA PREVENTIVA");
                } else if (listTipoConsulta.getSelectedItem().equals("CONSULTA CURATIVA")){
                    EscucharTeclas.setTipo("CONSULTA CURATIVA");
                }else{
                    EscucharTeclas.setTipo("");
                }
                System.out.println(EscucharTeclas.getTipo());
            }
        });
        listMotivoConsulta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listMotivoConsultaItemStateChanged(evt);
            }
        });
        panelDatosConsulta.add(listMotivoConsulta);
        listMotivoConsulta.setBounds(40, 120, 760, 25);

        motivoConsulta.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        motivoConsulta.setForeground(new java.awt.Color(153, 153, 153));
        motivoConsulta.setText("Seleccione el motivo de la consulta");
        panelDatosConsulta.add(motivoConsulta);
        motivoConsulta.setBounds(40, 100, 280, 13);

        btnAñadirEnfermedad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas.png"))); // NOI18N
        btnAñadirEnfermedad.setBorderPainted(false);
        btnAñadirEnfermedad.setContentAreaFilled(false);
        btnAñadirEnfermedad.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas pressed.png"))); // NOI18N
        btnAñadirEnfermedad.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas rollover.png"))); // NOI18N
        btnAñadirEnfermedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirEnfermedadActionPerformed(evt);
            }
        });
        panelDatosConsulta.add(btnAñadirEnfermedad);
        btnAñadirEnfermedad.setBounds(810, 182, 40, 30);

        listEnfermedades.setBackground(new java.awt.Color(0, 0, 0));
        listEnfermedades.setEditable(true);
        listEnfermedades.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listEnfermedades.setForeground(new java.awt.Color(255, 255, 255));
        listEnfermedades.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listEnfermedades.setUI(CustomUI.createUI(listEnfermedades));
        listEnfermedades.getEditor().getEditorComponent().addKeyListener(new EscucharTeclas(listEnfermedades,"SELECCIONE LA ACCION A TOMAR EN LA CONSULTA"));
        listEnfermedades.getEditor().getEditorComponent().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent evt) {
                System.out.println("foco");
                if (!listMotivoConsulta.getSelectedItem().equals("SELECCIONE EL MOTIVO DE LA CONSULTA")
                    && !listMotivoConsulta.getSelectedItem().equals("SELECCIONEPRIMERO EL TIPO DE CONSULTA")) {
                    if (listTipoConsulta.getSelectedItem().equals("CONSULTA PREVENTIVA")) {
                        EscucharTeclas.setTipo("ESTUDIOS");
                    } else  if (listTipoConsulta.getSelectedItem().equals("CONSULTA CURATIVA")){
                        if(listMotivoConsulta.getSelectedItem().equals("ACTIVIDADES DE ENFERMERIA")){
                            EscucharTeclas.setTipo("ENFERMERIA");
                        }else{
                            EscucharTeclas.setTipo("ENFERMEDADES");
                        }
                    }
                }else{
                    EscucharTeclas.setTipo("");
                }
            }
        });
        listEnfermedades.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listEnfermedadesItemStateChanged(evt);
            }
        });
        panelDatosConsulta.add(listEnfermedades);
        listEnfermedades.setBounds(40, 185, 760, 25);

        etiquetaEnfermedades.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaEnfermedades.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaEnfermedades.setText("Seleccione la accion a tomar en la consulta");
        panelDatosConsulta.add(etiquetaEnfermedades);
        etiquetaEnfermedades.setBounds(40, 165, 310, 13);

        btnAñadirConsulta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas.png"))); // NOI18N
        btnAñadirConsulta.setBorderPainted(false);
        btnAñadirConsulta.setContentAreaFilled(false);
        btnAñadirConsulta.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas pressed.png"))); // NOI18N
        btnAñadirConsulta.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas rollover.png"))); // NOI18N
        btnAñadirConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirConsultaActionPerformed(evt);
            }
        });
        panelDatosConsulta.add(btnAñadirConsulta);
        btnAñadirConsulta.setBounds(810, 118, 40, 30);

        listAccionConsulta.setBackground(new java.awt.Color(0, 0, 0));
        listAccionConsulta.setEditable(true);
        listAccionConsulta.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listAccionConsulta.setForeground(new java.awt.Color(255, 255, 255));
        listAccionConsulta.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listAccionConsulta.setUI(CustomUI.createUI(listAccionConsulta));
        listAccionConsulta.getEditor().getEditorComponent().addKeyListener(new EscucharTeclas(listAccionConsulta,"SELECCIONE LA ACCION A TOMAR EN LA CONSULTA1"));
        listAccionConsulta.getEditor().getEditorComponent().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent evt) {
                if (!listEnfermedades.getSelectedItem().equals("SELECCIONE LA CAUSA DE LA CONSULTA")
                    && !listEnfermedades.getSelectedItem().equals("SELECCIONE PRIMERO EL TIPO DE CONSULTA")) {
                    EscucharTeclas.setTipo("REFERENCIAS");
                    //System.out.println("pase");
                }else{
                    EscucharTeclas.setTipo("");
                }
            }
        });
        listAccionConsulta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listAccionConsultaItemStateChanged(evt);
            }
        });
        panelDatosConsulta.add(listAccionConsulta);
        listAccionConsulta.setBounds(40, 250, 360, 25);

        etiquetaAccion.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaAccion.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaAccion.setText("Seleccione la accion a tomar en la consulta");
        panelDatosConsulta.add(etiquetaAccion);
        etiquetaAccion.setBounds(40, 230, 320, 13);

        btnAñadirAccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas.png"))); // NOI18N
        btnAñadirAccion.setBorderPainted(false);
        btnAñadirAccion.setContentAreaFilled(false);
        btnAñadirAccion.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas pressed.png"))); // NOI18N
        btnAñadirAccion.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas rollover.png"))); // NOI18N
        btnAñadirAccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirAccionActionPerformed(evt);
            }
        });
        panelDatosConsulta.add(btnAñadirAccion);
        btnAñadirAccion.setBounds(410, 246, 40, 30);

        listResultadoConsulta.setBackground(new java.awt.Color(0, 0, 0));
        listResultadoConsulta.setEditable(true);
        listResultadoConsulta.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listResultadoConsulta.setForeground(new java.awt.Color(255, 255, 255));
        listResultadoConsulta.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listResultadoConsulta.setUI(CustomUI.createUI(listResultadoConsulta));
        listResultadoConsulta.getEditor().getEditorComponent().addKeyListener(new EscucharTeclas(listResultadoConsulta,"SELECCIONE EL RESULTADO DE LA CONSULTA"));
        listResultadoConsulta.getEditor().getEditorComponent().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent evt) {
                if (!listEnfermedades.getSelectedItem().equals("SELECCIONE LA CAUSA DE LA CONSULTA")
                    && !listEnfermedades.getSelectedItem().equals("SELECCIONE PRIMERO EL TIPO DE CONSULTA")) {
                    EscucharTeclas.setTipo("RESULTADOS");
                }else{
                    EscucharTeclas.setTipo("");
                }
            }
        });
        panelDatosConsulta.add(listResultadoConsulta);
        listResultadoConsulta.setBounds(460, 250, 340, 25);

        etiquetaResultadoConsulta.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaResultadoConsulta.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaResultadoConsulta.setText("seleccione el resultado de la consulta");
        panelDatosConsulta.add(etiquetaResultadoConsulta);
        etiquetaResultadoConsulta.setBounds(460, 230, 340, 13);

        btnAñadirResultado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas.png"))); // NOI18N
        btnAñadirResultado.setBorderPainted(false);
        btnAñadirResultado.setContentAreaFilled(false);
        btnAñadirResultado.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas pressed.png"))); // NOI18N
        btnAñadirResultado.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas rollover.png"))); // NOI18N
        btnAñadirResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirResultadoActionPerformed(evt);
            }
        });
        panelDatosConsulta.add(btnAñadirResultado);
        btnAñadirResultado.setBounds(810, 246, 40, 30);

        btnRegistarConsulta.setBackground(new java.awt.Color(191, 247, 0));
        btnRegistarConsulta.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        btnRegistarConsulta.setText("Registrar consulta");
        btnRegistarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistarConsultaActionPerformed(evt);
            }
        });
        panelDatosConsulta.add(btnRegistarConsulta);
        btnRegistarConsulta.setBounds(300, 300, 250, 24);

        etiquetaDiasReposo.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaDiasReposo.setText("Dias de Reposo");
        etiquetaDiasReposo.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaDiasReposo.setFocusable(false);
        panelDatosConsulta.add(etiquetaDiasReposo);
        etiquetaDiasReposo.setBounds(320, 245, 110, 20);

        entradaDiasReposo.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaDiasReposo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
       
        entradaDiasReposo.addKeyListener(new EscucharBotones.AccionesTxt("numerico"));
        entradaDiasReposo.addFocusListener(new EscucharBotones().focus(etiquetaDiasReposo,0,0,153));
        panelDatosConsulta.add(entradaDiasReposo);
        entradaDiasReposo.setBounds(320, 251, 120, 24);

        jPanel5.add(panelDatosConsulta);
        panelDatosConsulta.setBounds(20, 140, 870, 340);

        panelConsulta.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 80, 910, 500));

        getContentPane().add(panelConsulta, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 2, 972, 596));

        panelPacientes.setBackground(new java.awt.Color(255, 255, 255));
        panelPacientes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        panelPacientes.setOpaque(false);
        panelPacientes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelRegistroPacientes.setBackground(new java.awt.Color(255, 255, 255));
        panelRegistroPacientes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder2 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder2 .setShowRightShadow(true);
        dropShadowBorder2 .setShowLeftShadow(true);
        dropShadowBorder2 .setShowTopShadow(true);
        dropShadowBorder2 .setShowBottomShadow(true);

        panelRegistroPacientes.setBorder(dropShadowBorder2);

        etiquetaProgreso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono progreso.png"))); // NOI18N
        panelRegistroPacientes.add(etiquetaProgreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, -1, -1));

        btnAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono back.png"))); // NOI18N
        btnAtras.setBorderPainted(false);
        btnAtras.setContentAreaFilled(false);
        btnAtras.setEnabled(false);
        btnAtras.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono back pressed.png"))); // NOI18N
        btnAtras.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono back rollover.png"))); // NOI18N
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });
        panelRegistroPacientes.add(btnAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 30, 30));

        btnAdelante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono next.png"))); // NOI18N
        btnAdelante.setBorderPainted(false);
        btnAdelante.setContentAreaFilled(false);
        btnAdelante.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono next pressed.png"))); // NOI18N
        btnAdelante.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono next rollover.png"))); // NOI18N
        btnAdelante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAdelanteMouseClicked(evt);
            }
        });
        btnAdelante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdelanteActionPerformed(evt);
            }
        });
        panelRegistroPacientes.add(btnAdelante, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 200, 30, 30));

        jPanelSlider1.setBackground(new java.awt.Color(255, 255, 255));
        jPanelSlider1.setBorder(null);

        panelDatosPersonales.setBackground(new java.awt.Color(255, 255, 255));
        panelDatosPersonales.setFocusable(false);
        panelDatosPersonales.setOpaque(false);
        panelDatosPersonales.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                panelDatosPersonalesFocusGained(evt);
            }
        });
        
        panelDatosPersonales.setLayout(null);

        jLabel35.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(0, 0, 153));
        jLabel35.setText("Datos personales");
        panelDatosPersonales.add(jLabel35);
        jLabel35.setBounds(250, 0, 154, 22);

        jLabel36.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/line.png"))); // NOI18N
        panelDatosPersonales.add(jLabel36);
        jLabel36.setBounds(230, 10, 180, 20);

        etiquetaNombre.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaNombre.setText("Nombres");
        etiquetaNombre.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaNombre.setFocusable(false);
        panelDatosPersonales.add(etiquetaNombre);
        etiquetaNombre.setBounds(0, 94, 70, 20);

        entradaNombre.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaNombre.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(180, 180, 180)));
        entradaNombre.setOpaque(false);
        entradaNombre.addFocusListener(new EscucharBotones().focus(etiquetaNombre,0,0,153));
        entradaNombre.addKeyListener(new EscucharBotones.AccionesTxt("texto"));
        /*
        entradaNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                entradaNombreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                entradaNombreFocusLost(evt);
            }
        });
        entradaNombre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                entradaNombreMouseClicked(evt);
            }
        });
        entradaNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entradaNombreActionPerformed(evt);
            }
        });
        */
        panelDatosPersonales.add(entradaNombre);
        entradaNombre.setBounds(0, 100, 180, 24);

        etiquetaApellido.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaApellido.setText("Apellidos");
        etiquetaApellido.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaApellido.setFocusable(false);
        panelDatosPersonales.add(etiquetaApellido);
        etiquetaApellido.setBounds(210, 94, 70, 20);

        entradaApellido.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaApellido.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(180, 180, 180)));
        entradaApellido.addFocusListener(new EscucharBotones().focus(etiquetaApellido,0,0,153));
        entradaApellido.addKeyListener(new EscucharBotones.AccionesTxt("texto"));
        /*
        entradaApellido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                entradaApellidoMouseClicked(evt);
            }
        });
        */
        panelDatosPersonales.add(entradaApellido);
        entradaApellido.setBounds(210, 100, 180, 24);

        etiquetaCedula.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaCedula.setText("Cedula");
        etiquetaCedula.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaCedula.setFocusable(false);
        panelDatosPersonales.add(etiquetaCedula);
        etiquetaCedula.setBounds(410, 94, 70, 20);

        entradaCedula.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaCedula.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        entradaCedula.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                entradaCedulaMouseClicked(evt);
            }
        });
        entradaCedula.addKeyListener(new EscucharBotones.AccionesTxt("numerico"));
        entradaCedula.addFocusListener(new EscucharBotones().focus(etiquetaCedula,0,0,153));
        panelDatosPersonales.add(entradaCedula);
        entradaCedula.setBounds(410, 100, 110, 24);

        etiquetaID.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaID.setText("Id");
        etiquetaID.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaID.setFocusable(false);
        panelDatosPersonales.add(etiquetaID);
        etiquetaID.setBounds(540, 94, 70, 20);

        entradaID.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        entradaID.addKeyListener(new EscucharBotones.AccionesTxt("numerico",8));
       
        entradaID.addFocusListener(new EscucharBotones().focus(etiquetaID,0,0,153));
        panelDatosPersonales.add(entradaID);
        entradaID.setBounds(540, 100, 110, 24);

        etiquetaFechaNacimiento.setBackground(new java.awt.Color(255, 255, 255));
        etiquetaFechaNacimiento.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaFechaNacimiento.setText("Fecha de nacimiento");
        etiquetaFechaNacimiento.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaFechaNacimiento.setFocusable(false);
        panelDatosPersonales.add(etiquetaFechaNacimiento);
        etiquetaFechaNacimiento.setBounds(450, 214, 156, 20);

        entradaFechaNacimiento.setEditable(false);
        entradaFechaNacimiento.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        panelDatosPersonales.add(entradaFechaNacimiento);
        entradaFechaNacimiento.setBounds(449, 220, 160, 24);

        FechaNacimiento.setBackground(new java.awt.Color(255, 255, 255));

        FechaNacimiento.setOpaque(false);

        FechaNacimiento.addPropertyChangeListener(new date(entradaFechaNacimiento,FechaNacimiento,etiquetaFechaNacimiento) );
        FechaNacimiento.setEnabled(false);
        panelDatosPersonales.add(FechaNacimiento);
        FechaNacimiento.setBounds(449, 220, 200, 24);

        listGenero.setEditable(true);
        listGenero.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GENERO", "FEMENINO", "MASCULINO" }));
        listGenero.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listGenero.setUI(CustomUI.createUI(listGenero));
        panelDatosPersonales.add(listGenero);
        listGenero.setBounds(152, 220, 130, 24);

        listEstadoCivil.setEditable(true);
        listEstadoCivil.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listEstadoCivil.setMaximumRowCount(6);
        listEstadoCivil.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ESTADO CIVIL", "SOLTERO(A)", "CASADO(A)", "COMPROMETIDO(A)", "DIVORCIADO(A)", "VIUDO(A)" }));
        listEstadoCivil.setAutoscrolls(true);
        listEstadoCivil.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listEstadoCivil.setUI(CustomUI.createUI(listEstadoCivil));
        
        panelDatosPersonales.add(listEstadoCivil);
        listEstadoCivil.setBounds(298, 220, 138, 24);

        etiquetaEstadoCivil.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaEstadoCivil.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaEstadoCivil.setText("Estado civil del paciente");
        panelDatosPersonales.add(etiquetaEstadoCivil);
        etiquetaEstadoCivil.setBounds(298, 194, 138, 10);

        etiquetaGenero.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaGenero.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaGenero.setText("Sexo del nuevo paciente");
        panelDatosPersonales.add(etiquetaGenero);
        etiquetaGenero.setBounds(152, 194, 130, 10);

        listTipo.setEditable(true);
        listTipo.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TIPO", "ACTIVO", "JUBILADO", "MINISTERIO DE ENERGIA ELECTRICA" }));
        listTipo.setAutoscrolls(true);
        listTipo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        ajustaScrollBar(listTipo);
        listTipo.setPreferredSize(new java.awt.Dimension(260, 30));
        listTipo.setUI(CustomUI.createUI(listTipo));
        listTipo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listTipoItemStateChanged(evt);
            }
        });
        panelDatosPersonales.add(listTipo);
        listTipo.setBounds(0, 220, 138, 24);

        etiquetaTipoPaciente.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaTipoPaciente.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaTipoPaciente.setText("Tipo de paciente");
        panelDatosPersonales.add(etiquetaTipoPaciente);
        etiquetaTipoPaciente.setBounds(0, 194, 130, 10);

        jPanelSlider1.add(panelDatosPersonales, "card2");

        panelDatosFamiliares.setBackground(new java.awt.Color(255, 255, 255));
        panelDatosFamiliares.setOpaque(false);
        panelDatosFamiliares.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                panelDatosFamiliaresFocusGained(evt);
            }
        });
        
        panelDatosFamiliares.setLayout(null);

        jLabel42.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(0, 0, 153));
        jLabel42.setText("Datos Familiares");
        panelDatosFamiliares.add(jLabel42);
        jLabel42.setBounds(250, 0, 154, 22);

        jLabel44.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/line.png"))); // NOI18N
        panelDatosFamiliares.add(jLabel44);
        jLabel44.setBounds(230, 10, 180, 20);

        etiquetaNombreFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaNombreFamiliar.setText("Nombres");
        etiquetaNombreFamiliar.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaNombreFamiliar.setFocusable(false);
        panelDatosFamiliares.add(etiquetaNombreFamiliar);
        etiquetaNombreFamiliar.setBounds(0, 94, 100, 20);

        entradaNombreFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaNombreFamiliar.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(180, 180, 180)));
        entradaNombreFamiliar.addFocusListener(new EscucharBotones().focus(etiquetaNombreFamiliar,0,0,153));
        entradaNombreFamiliar.addKeyListener(new EscucharBotones.AccionesTxt("texto"));
        
        panelDatosFamiliares.add(entradaNombreFamiliar);
        entradaNombreFamiliar.setBounds(0, 100, 220, 24);

        etiquetaApellidoFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaApellidoFamiliar.setText("Apellidos");
        etiquetaApellidoFamiliar.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaApellidoFamiliar.setFocusable(false);
        panelDatosFamiliares.add(etiquetaApellidoFamiliar);
        etiquetaApellidoFamiliar.setBounds(250, 94, 100, 20);

        entradaApellidoFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaApellidoFamiliar.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(180, 180, 180)));
        entradaApellidoFamiliar.addFocusListener(new EscucharBotones().focus(etiquetaApellidoFamiliar,0,0,153));
        entradaApellidoFamiliar.addKeyListener(new EscucharBotones.AccionesTxt("texto"));
        
        panelDatosFamiliares.add(entradaApellidoFamiliar);
        entradaApellidoFamiliar.setBounds(250, 100, 220, 24);

        etiquetaCedulaFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaCedulaFamiliar.setText("Cedula");
        etiquetaCedulaFamiliar.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaCedulaFamiliar.setFocusable(false);
        panelDatosFamiliares.add(etiquetaCedulaFamiliar);
        etiquetaCedulaFamiliar.setBounds(500, 94, 100, 20);

        entradaCedulaFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaCedulaFamiliar.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
       
        entradaCedulaFamiliar.addFocusListener(new EscucharBotones().focus(etiquetaCedulaFamiliar,0,0,153));
        entradaCedulaFamiliar.addKeyListener(new EscucharBotones.AccionesTxt("numerico"));
        panelDatosFamiliares.add(entradaCedulaFamiliar);
        entradaCedulaFamiliar.setBounds(500, 100, 150, 24);

        etiquetaFechaNacimientoFamiliar.setBackground(new java.awt.Color(255, 255, 255));
        etiquetaFechaNacimientoFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaFechaNacimientoFamiliar.setText("Fecha de nacimiento");
        etiquetaFechaNacimientoFamiliar.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaFechaNacimientoFamiliar.setFocusable(false);
        panelDatosFamiliares.add(etiquetaFechaNacimientoFamiliar);
        etiquetaFechaNacimientoFamiliar.setBounds(430, 194, 150, 20);

        entradaFechaNacimientoFamiliar.setEditable(false);
        entradaFechaNacimientoFamiliar.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        panelDatosFamiliares.add(entradaFechaNacimientoFamiliar);
        entradaFechaNacimientoFamiliar.setBounds(430, 200, 180, 24);

        FechaNacimientoFamiliar.setBackground(new java.awt.Color(255, 255, 255));

        FechaNacimientoFamiliar.setOpaque(false);

        FechaNacimientoFamiliar.addPropertyChangeListener(new date(entradaFechaNacimientoFamiliar,FechaNacimientoFamiliar,etiquetaFechaNacimientoFamiliar) );
        FechaNacimientoFamiliar.setEnabled(false);
        panelDatosFamiliares.add(FechaNacimientoFamiliar);
        FechaNacimientoFamiliar.setBounds(430, 200, 220, 24);

        etiquetaParentescoFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaParentescoFamiliar.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaParentescoFamiliar.setText("Relacion de parentesco con el paciente");
        panelDatosFamiliares.add(etiquetaParentescoFamiliar);
        etiquetaParentescoFamiliar.setBounds(0, 174, 200, 20);

        listParentescoFamiliar.setEditable(true);
        listParentescoFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listParentescoFamiliar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PARENTESCO", "MADRE", "PADRE", "HIJO(A)", "ABUELO(A)", "BISABUELO(A)", "TATARABUELO(A)", "HERMANO(A)", "TIO(A)", "SOBRINO(A)", "PRIMO(A)", "NIETO(A)", "BISNIETO(A)" }));
        listParentescoFamiliar.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listParentescoFamiliar.setUI(CustomUI.createUI(listParentescoFamiliar));
        listParentescoFamiliar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listParentescoFamiliarItemStateChanged(evt);
            }
        });
        panelDatosFamiliares.add(listParentescoFamiliar);
        listParentescoFamiliar.setBounds(0, 200, 220, 24);

        etiquetaGeneroFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaGeneroFamiliar.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaGeneroFamiliar.setText("Genero del familiar");
        panelDatosFamiliares.add(etiquetaGeneroFamiliar);
        etiquetaGeneroFamiliar.setBounds(250, 174, 100, 20);

        listGeneroFamiliar.setEditable(true);
        listGeneroFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listGeneroFamiliar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GENERO", "FEMENINO", "MASCULINO" }));
        listGeneroFamiliar.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listGeneroFamiliar.setUI(CustomUI.createUI(listGenero));
        panelDatosFamiliares.add(listGeneroFamiliar);
        listGeneroFamiliar.setBounds(250, 200, 150, 24);

        btnAgregarFamiliar.setBackground(new java.awt.Color(191, 247, 0));
        btnAgregarFamiliar.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        btnAgregarFamiliar.setText("Agregar nuevo Familiar al paciente");
        btnAgregarFamiliar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarFamiliarActionPerformed(evt);
            }
        });
        panelDatosFamiliares.add(btnAgregarFamiliar);
        btnAgregarFamiliar.setBounds(200, 272, 300, 28);

        jPanelSlider1.add(panelDatosFamiliares, "card3");

        panelDatos.setBackground(new java.awt.Color(255, 255, 255));
        panelDatos.setLayout(null);

        jLabel53.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(0, 0, 153));
        jLabel53.setText("Datos Medicos ");
        panelDatos.add(jLabel53);
        jLabel53.setBounds(250, 0, 150, 22);

        jLabel54.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/line.png"))); // NOI18N
        panelDatos.add(jLabel54);
        jLabel54.setBounds(220, 10, 180, 20);

        etiquetaAlergias.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaAlergias.setText("Alergias");
        etiquetaAlergias.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaAlergias.setFocusable(false);
        panelDatos.add(etiquetaAlergias);
        etiquetaAlergias.setBounds(420, 94, 57, 20);

        entradaAlergias.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaAlergias.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(180, 180, 180)));
        entradaAlergias.addFocusListener(new EscucharBotones().focus(etiquetaAlergias,0,0,153));
        entradaAlergias.addKeyListener(new EscucharBotones.AccionesTxt("especial"));
        entradaAlergias.addKeyListener(new EscucharBotones.AccionesTxt("texto"));

        
        panelDatos.add(entradaAlergias);
        entradaAlergias.setBounds(420, 100, 190, 24);

        etiquetaPeso.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        etiquetaPeso.setText("Peso");
        etiquetaPeso.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        etiquetaPeso.setFocusable(false);
        panelDatos.add(etiquetaPeso);
        etiquetaPeso.setBounds(0, 94, 32, 20);

        entradaPeso.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaPeso.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(180, 180, 180)));
        entradaPeso.addFocusListener(new EscucharBotones().focus(etiquetaPeso,0,0,153));
        entradaPeso.addKeyListener(new EscucharBotones.AccionesTxt("numerico"));
        
        panelDatos.add(entradaPeso);
        entradaPeso.setBounds(0, 100, 210, 24);

        listTipoDeSangre.setEditable(true);
        listTipoDeSangre.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listTipoDeSangre.setMaximumRowCount(6);
        listTipoDeSangre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TIPO DE SANGRE", "ARH+", "ARH-", "BRH+", "BRH-", "ORH+", "ORH-", "ABRH+", "ABRH-" }));
        listTipoDeSangre.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listTipoDeSangre.setUI(CustomUI.createUI(listTipoDeSangre));
        panelDatos.add(listTipoDeSangre);
        listTipoDeSangre.setBounds(240, 99, 150, 25);

        etiquetaTipoDeSangre.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaTipoDeSangre.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaTipoDeSangre.setText("Tipo de sangre del paciente");
        panelDatos.add(etiquetaTipoDeSangre);
        etiquetaTipoDeSangre.setBounds(240, 74, 140, 13);

        jButton21.setBackground(new java.awt.Color(191, 247, 0));
        jButton21.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        jButton21.setText("Registrar paciente");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        panelDatos.add(jButton21);
        jButton21.setBounds(240, 272, 240, 28);

        listEnfermedadesCronicas.setEditable(true);
        listEnfermedadesCronicas.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listEnfermedadesCronicas.setMaximumRowCount(6);
        listEnfermedadesCronicas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ENFERMEDADES CRONICAS", "ASMA", "HIPERTENSION", "DIABETES", "AZUCAR EN LA SANGRE" }));
        listEnfermedadesCronicas.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listEnfermedadesCronicas.setUI(CustomUI.createUI(listEnfermedadesCronicas));
        listEnfermedadesCronicas.getEditor().getEditorComponent().addKeyListener(new EscucharTeclas(listEnfermedadesCronicas,"ENFERMEDAD"));
        listEnfermedadesCronicas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listEnfermedadesCronicasActionPerformed(evt);
            }
        });
        panelDatos.add(listEnfermedadesCronicas);
        listEnfermedadesCronicas.setBounds(0, 200, 280, 25);

        listCirugias.setEditable(true);
        listCirugias.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listCirugias.setMaximumRowCount(6);
        listCirugias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CIRUGIAS", "LOT", "YUGULAR", "RIÑON", " PULMON" }));
        listCirugias.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listCirugias.setUI(CustomUI.createUI(listCirugias));
        listCirugias.getEditor().getEditorComponent().addKeyListener(new EscucharTeclas(listCirugias,"CIRUGIA"));
        panelDatos.add(listCirugias);
        listCirugias.setBounds(360, 200, 250, 25);

        btnAñadirAlergia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas.png"))); // NOI18N
        btnAñadirAlergia.setBorderPainted(false);
        btnAñadirAlergia.setContentAreaFilled(false);
        btnAñadirAlergia.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas pressed.png"))); // NOI18N
        btnAñadirAlergia.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas rollover.png"))); // NOI18N
        btnAñadirAlergia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirAlergiaActionPerformed(evt);
            }
        });
        panelDatos.add(btnAñadirAlergia);
        btnAñadirAlergia.setBounds(610, 100, 40, 30);

        btnAñadirCirugias.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas.png"))); // NOI18N
        btnAñadirCirugias.setBorderPainted(false);
        btnAñadirCirugias.setContentAreaFilled(false);
        btnAñadirCirugias.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas pressed.png"))); // NOI18N
        btnAñadirCirugias.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas rollover.png"))); // NOI18N
        btnAñadirCirugias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirCirugiasActionPerformed(evt);
            }
        });
        panelDatos.add(btnAñadirCirugias);
        btnAñadirCirugias.setBounds(610, 200, 40, 30);

        btnAñadirEnfermedadCronica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas.png"))); // NOI18N
        btnAñadirEnfermedadCronica.setBorderPainted(false);
        btnAñadirEnfermedadCronica.setContentAreaFilled(false);
        btnAñadirEnfermedadCronica.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas pressed.png"))); // NOI18N
        btnAñadirEnfermedadCronica.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono mas rollover.png"))); // NOI18N
        btnAñadirEnfermedadCronica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirEnfermedadCronicaActionPerformed(evt);
            }
        });
        panelDatos.add(btnAñadirEnfermedadCronica);
        btnAñadirEnfermedadCronica.setBounds(280, 200, 40, 30);

        etiquetaEnfermedadesCronicas.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaEnfermedadesCronicas.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaEnfermedadesCronicas.setText("Enfermedades cronicas que padece el paciente");
        panelDatos.add(etiquetaEnfermedadesCronicas);
        etiquetaEnfermedadesCronicas.setBounds(0, 170, 260, 13);

        etiquetaEnfermedadesCronicas1.setFont(new java.awt.Font("Bookman Old Style", 0, 10)); // NOI18N
        etiquetaEnfermedadesCronicas1.setForeground(new java.awt.Color(153, 153, 153));
        etiquetaEnfermedadesCronicas1.setText("Cirugias que se ha realizado el paciente");
        panelDatos.add(etiquetaEnfermedadesCronicas1);
        etiquetaEnfermedadesCronicas1.setBounds(360, 170, 260, 13);

        jPanelSlider1.add(panelDatos, "card4");

        panelRegistroPacientes.add(jPanelSlider1, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 40, 650, 300));

        panelPacientes.add(panelRegistroPacientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 800, 370));

        panelPacientesRegistrados.setOpaque(false);
        panelPacientesRegistrados.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderE = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderE .setShowRightShadow(true);
        dropShadowBorderE .setShowLeftShadow(true);
        dropShadowBorderE .setShowTopShadow(true);
        dropShadowBorderE .setShowBottomShadow(true);

        panelPacientesRegistrados.setBorder(dropShadowBorderE);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono buscar.png"))); // NOI18N
        btnBuscar.setBorderPainted(false);
        btnBuscar.setContentAreaFilled(false);
        btnBuscar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono buscar pressed.png"))); // NOI18N
        btnBuscar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono buscar rollover.png"))); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        panelPacientesRegistrados.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(828, 5, 20, 20));

        entradaBuscarPaciente.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        entradaBuscarPaciente.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        
        entradaBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entradaBuscarPacienteActionPerformed(evt);
            }
        });
        //PlaceHolder holder = new PlaceHolder(entradaBuscarPaciente,Color.BLACK,Color.BLUE, "Buscar",false,"bookman old style",14);
        panelPacientesRegistrados.add(entradaBuscarPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(648, 5, 200, 24));
 
        jScrollPane4.setBorder(null);

        ModeloTabla modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Apellido", "Cedula","Fecha de nacimiento","edad",
            }

        );
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(modelo);
        jTable1.addMouseListener(new EscucharBotones.mouse(this,0,"",-1));
        jTable1.setRowHeight(23);
        JTableHeader jtableHeader = jTable1.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado());
        jTable1.setTableHeader(jtableHeader);
        jTable1.setBackground(new Color(255,255,255));
        jScrollPane4.getViewport().setBackground(new Color(255,255,255));
        jScrollPane4.setViewportView(jTable1);

        panelPacientesRegistrados.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, 840, 329));

        jLabel56.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel56.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel56.setText("LISTA DE PACIENTES");
        panelPacientesRegistrados.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 860, -1));

        btnMostrarTodo.setBackground(new java.awt.Color(191, 247, 0));
        btnMostrarTodo.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        btnMostrarTodo.setText("Mostrar todo");
        btnMostrarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarTodoActionPerformed(evt);
            }
        });
        panelPacientesRegistrados.add(btnMostrarTodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 380, -1, 24));

        panelPacientes.add(panelPacientesRegistrados, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 160, 860, 420));

        jLabel55.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        jLabel55.setText("PACIENTES");
        panelPacientes.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        jSeparator5.setBackground(new java.awt.Color(0, 0, 153));
        jSeparator5.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator5.setOpaque(true);
        panelPacientes.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 860, -1));

        btnPacientesRegistrados.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        btnPacientesRegistrados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btn registrado.png"))); // NOI18N
        btnPacientesRegistrados.setBorder(null);
        btnPacientesRegistrados.setBorderPainted(false);
        btnPacientesRegistrados.setContentAreaFilled(false);
        btnPacientesRegistrados.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btn registrado rollover.png"))); // NOI18N
        btnPacientesRegistrados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPacientesRegistradosActionPerformed(evt);
            }
        });
        panelPacientes.add(btnPacientesRegistrados, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 107, -1, -1));

        btnNuevoPaciente.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        btnNuevoPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnNuevo.png"))); // NOI18N
        btnNuevoPaciente.setBorder(null);
        btnNuevoPaciente.setBorderPainted(false);
        btnNuevoPaciente.setContentAreaFilled(false);
        btnNuevoPaciente.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnNuevo rollover.png"))); // NOI18N
        btnNuevoPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoPacienteActionPerformed(evt);
            }
        });
        panelPacientes.add(btnNuevoPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 107, -1, -1));

        getContentPane().add(panelPacientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 2, 972, 596));

        panelEstadistica.setOpaque(false);
        panelEstadistica.setLayout(null);
        /*JLayeredPane paneCapas=getLayeredPane();
        paneCapas.add(panelEstadistica);
        paneCapas.setOpaque(true);*/

        jLabel64.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        jLabel64.setText("ESTADISTICAS");
        panelEstadistica.add(jLabel64);
        jLabel64.setBounds(30, 30, 180, 29);

        panelContenedorTablas.setOpaque(false);
        panelContenedorTablas.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderC = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderC.setShowRightShadow(true);
        dropShadowBorderC.setShowLeftShadow(true);
        dropShadowBorderC.setShowTopShadow(true);
        dropShadowBorderC.setShowBottomShadow(true);

        btnAdelante2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono next.png"))); // NOI18N
        btnAdelante2.setBorderPainted(false);
        btnAdelante2.setContentAreaFilled(false);
        btnAdelante2.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono next pressed.png"))); // NOI18N
        btnAdelante2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono next rollover.png"))); // NOI18N
        btnAdelante2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdelante2ActionPerformed(evt);
            }
        });
        panelContenedorTablas.add(btnAdelante2);
        btnAdelante2.setBounds(860, 196, 40, 30);

        btnAtras2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono back.png"))); // NOI18N
        btnAtras2.setBorderPainted(false);
        btnAtras2.setContentAreaFilled(false);
        btnAtras2.setEnabled(false);
        btnAtras2.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono back pressed.png"))); // NOI18N
        btnAtras2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono back rollover.png"))); // NOI18N
        btnAtras2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtras2ActionPerformed(evt);
            }
        });
        panelContenedorTablas.add(btnAtras2);
        btnAtras2.setBounds(4, 196, 40, 30);

        etiquetaProgreso2.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        etiquetaProgreso2.setForeground(new java.awt.Color(0, 204, 0));
        etiquetaProgreso2.setText("1/8");
        panelContenedorTablas.add(etiquetaProgreso2);
        etiquetaProgreso2.setBounds(820, 10, 40, 30);

        etiquetaRegion.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        etiquetaRegion.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaRegion.setText("Region: Falcón");
        panelContenedorTablas.add(etiquetaRegion);
        etiquetaRegion.setBounds(40, 20, 90, 15);

        etiquetaMesAño.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        etiquetaMesAño.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaMesAño.setText("Enero 2020");
        panelContenedorTablas.add(etiquetaMesAño);
        etiquetaMesAño.setBounds(200, 20, 110, 15);

        jButton5.setBackground(new java.awt.Color(191, 247, 0));
        jButton5.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        jButton5.setText("Exportar a excel ");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        panelContenedorTablas.add(jButton5);
        jButton5.setBounds(320, 460, 250, 24);

        jPanelSlider3.setBorder(null);
        jPanelSlider3.setOpaque(false);

        panelTabla1.setOpaque(false);
        panelTabla1.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderH1 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderH1.setShowRightShadow(true);
        dropShadowBorderH1.setShowLeftShadow(true);
        dropShadowBorderH1.setShowTopShadow(true);
        dropShadowBorderH1.setShowBottomShadow(true);

        panelTabla1.setBorder(dropShadowBorderH1);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "ACTIVIDADES MEDICAS","Semana 1","Semana 2","Semana 3","Semana 4","Total","%",
            }

        );
        jTable9.setModel(modelo);
        jtableHeader = jTable9.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(30,11));
        jTable9.setTableHeader(jtableHeader);
        jScrollPane13.setViewportView(jTable9);

        panelTabla1.add(jScrollPane13);
        jScrollPane13.setBounds(5, 5, 810, 30);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","",""
            }

        );
        jTable10.setModel(modelo
        );
        jTable10.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA CONSULTA",0));
        jTable10.setRowHeight(23);//tamaño de las celdas
        jTable10.setGridColor(new java.awt.Color(0, 0, 0));
        jTable10.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable10.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable10.setTableHeader(jtableHeader);
        jTable10.setBackground(new Color(255,255,255));
        jScrollPane14.getViewport().setBackground(new Color(255,255,255));
        jScrollPane14.setViewportView(jTable10);

        panelTabla1.add(jScrollPane14);
        jScrollPane14.setBounds(140, 32, 675, 351);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "","","","","","",""
            }

        );
        jTable13.setModel(modelo);
        jTable13.getTableHeader().setReorderingAllowed(false);
        jTable13.setRowHeight(22);//tamaño de las celdas
        jTable13.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable13.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,8));
        jTable13.setTableHeader(jtableHeader);
        jScrollPane17.setViewportView(jTable13);

        panelTabla1.add(jScrollPane17);
        jScrollPane17.setBounds(140, 380, 675, 30);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>CONSULTAS<br>   PREVENTIVAS</html>"
            }

        );
        jTable14.setModel(modelo);
        jtableHeader = jTable14.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(380,11));
        jTable14.setTableHeader(jtableHeader);
        jScrollPane18.setViewportView(jTable14);

        panelTabla1.add(jScrollPane18);
        jScrollPane18.setBounds(5, 32, 140, 376);

        jPanelSlider3.add(panelTabla1, "card2");

        panelTabla2.setOpaque(false);
        panelTabla2.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderH = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderH.setShowRightShadow(true);
        dropShadowBorderH.setShowLeftShadow(true);
        dropShadowBorderH.setShowTopShadow(true);
        dropShadowBorderH.setShowBottomShadow(true);

        panelTabla2.setBorder(dropShadowBorderH);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "ACTIVIDADES MEDICAS","Semana 1","Semana 2","Semana 3","Semana 4","Total",
            }

        );
        jTable3.setModel(modelo);
        jtableHeader = jTable3.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado());
        jTable3.setTableHeader(jtableHeader);
        jScrollPane7.setViewportView(jTable3);

        panelTabla2.add(jScrollPane7);
        jScrollPane7.setBounds(5, 5, 810, 30);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","",""
            }

        );
        jTable4.setModel(modelo
        );
        jTable4.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA CONSULTA",1));

        jTable4.getTableHeader().setReorderingAllowed(false);
        jTable4.setRowHeight(23);//tamaño de las celdas
        jTable4.setGridColor(new java.awt.Color(0, 0, 0));
        jTable4.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable4.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable4.setTableHeader(jtableHeader);
        jTable4.setBackground(new Color(255,255,255));
        jScrollPane8.getViewport().setBackground(new Color(255,255,255));
        jScrollPane8.setViewportView(jTable4);

        panelTabla2.add(jScrollPane8);
        jScrollPane8.setBounds(140, 32, 675, 121);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "","","","","",""
            }

        );
        jTable6.setModel(modelo);
        jTable6.getTableHeader().setReorderingAllowed(false);
        jTable6.setRowHeight(23);//tamaño de las celdas
        jTable6.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable6.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable6.setTableHeader(jtableHeader);
        jScrollPane10.setViewportView(jTable6);

        panelTabla2.add(jScrollPane10);
        jScrollPane10.setBounds(140, 150, 675, 29);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","",
            }

        );
        jTable7.setModel(modelo
        );
        jTable7.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA CONSULTA",2));
        jTable7.getTableHeader().setReorderingAllowed(false);
        jTable7.setRowHeight(22);//tamaño de las celdas
        jTable7.setGridColor(new java.awt.Color(0, 0, 0));
        jTable7.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable7.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(-1,11));
        jTable7.setTableHeader(jtableHeader);
        jTable7.setBackground(new Color(255,255,255));
        jScrollPane11.getViewport().setBackground(new Color(255,255,255));
        jScrollPane11.setViewportView(jTable7);

        panelTabla2.add(jScrollPane11);
        jScrollPane11.setBounds(140, 174, 675, 94);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "","","","","",""
            }

        );
        jTable8.setModel(modelo);
        jTable8.getTableHeader().setReorderingAllowed(false);
        jTable8.setRowHeight(22);//tamaño de las celdas
        jTable8.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable8.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,8));
        jTable8.setTableHeader(jtableHeader);
        jScrollPane12.setViewportView(jTable8);

        panelTabla2.add(jScrollPane12);
        jScrollPane12.setBounds(140, 265, 675, 72);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>CONSULTAS<br>   CURATIVAS</html>"
            }

        );
        jTable5.setModel(modelo);
        jtableHeader = jTable5.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(300,11));
        jTable5.setTableHeader(jtableHeader);
        jScrollPane9.setViewportView(jTable5);

        panelTabla2.add(jScrollPane9);
        jScrollPane9.setBounds(5, 32, 140, 303);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "","","","","","",
            }

        );
        jTable15.setModel(modelo);
        jTable15.getTableHeader().setReorderingAllowed(false);
        jTable15.setRowHeight(24);//tamaño de las celdas
        jTable15.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable15.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable15.setTableHeader(jtableHeader);
        jScrollPane19.setViewportView(jTable15);

        panelTabla2.add(jScrollPane19);
        jScrollPane19.setBounds(5, 332, 810, 30);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","",
            }

        );
        jTable12.setModel(modelo
        );
        jTable12.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA EVALUACION",3));
        jTable12.getTableHeader().setReorderingAllowed(false);
        jTable12.setRowHeight(22);//tamaño de las celdas
        jTable12.setGridColor(new java.awt.Color(0, 0, 0));
        jTable12.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable12.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(-1,11));
        jTable12.setTableHeader(jtableHeader);
        jTable12.setBackground(new Color(255,255,255));
        jScrollPane16.getViewport().setBackground(new Color(255,255,255));
        jScrollPane16.setViewportView(jTable12);

        panelTabla2.add(jScrollPane16);
        jScrollPane16.setBounds(140, 357, 675, 50);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>RESULTADO DE <br> <center>EVALUACION</html>"
            }

        );
        jTable11.setModel(modelo);
        jtableHeader = jTable11.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(44,11));
        jTable11.setTableHeader(jtableHeader);
        jScrollPane15.setViewportView(jTable11);

        panelTabla2.add(jScrollPane15);
        jScrollPane15.setBounds(5, 357, 140, 50);

        jPanelSlider3.add(panelTabla2, "card2");

        panelTabla3.setOpaque(false);
        panelTabla3.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderH2 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderH2.setShowRightShadow(true);
        dropShadowBorderH2.setShowLeftShadow(true);
        dropShadowBorderH2.setShowTopShadow(true);
        dropShadowBorderH2.setShowBottomShadow(true);

        panelTabla3.setBorder(dropShadowBorderH2);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "REPOSOS / ESTUDIOS / REFERENCIAS","Semana 1","Semana 2","Semana 3","Semana 4","Total",
            }

        );
        jTable16.setModel(modelo);
        jtableHeader = jTable16.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado());
        jTable16.setTableHeader(jtableHeader);
        jScrollPane20.setViewportView(jTable16);

        panelTabla3.add(jScrollPane20);
        jScrollPane20.setBounds(5, 5, 810, 30);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","",""
            }

        );
        jTable17.setModel(modelo
        );
        jTable17.getTableHeader().setReorderingAllowed(false);
        jTable17.setRowHeight(22);//tamaño de las celdas
        jTable17.setGridColor(new java.awt.Color(0, 0, 0));
        jTable17.addMouseListener(new EscucharBotones.mouse(this,0,"ESTE REPOSO",4));
        jTable17.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable17.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable17.setTableHeader(jtableHeader);
        jTable17.setBackground(new Color(255,255,255));
        jScrollPane21.getViewport().setBackground(new Color(255,255,255));
        jScrollPane21.setViewportView(jTable17);

        panelTabla3.add(jScrollPane21);
        jScrollPane21.setBounds(140, 32, 675, 72);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "","","","","",""
            }

        );
        jTable18.setModel(modelo);
        jTable18.getTableHeader().setReorderingAllowed(false);
        jTable18.setRowHeight(22);//tamaño de las celdas
        jTable18.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable18.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable18.setTableHeader(jtableHeader);
        jScrollPane22.setViewportView(jTable18);

        panelTabla3.add(jScrollPane22);
        jScrollPane22.setBounds(140, 334, 675, 28);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","",
            }

        );
        jTable19.setModel(modelo
        );
        jTable19.getTableHeader().setReorderingAllowed(false);
        jTable19.setRowHeight(23);//tamaño de las celdas
        jTable19.setGridColor(new java.awt.Color(0, 0, 0));
        jTable19.addMouseListener(new EscucharBotones.mouse(this,0,"ESTE ESTUDIO",5));
        jTable19.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable19.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(-1,11));
        jTable19.setTableHeader(jtableHeader);
        jTable19.setBackground(new Color(255,255,255));
        jScrollPane23.getViewport().setBackground(new Color(255,255,255));
        jScrollPane23.setViewportView(jTable19);

        panelTabla3.add(jScrollPane23);
        jScrollPane23.setBounds(140, 101, 675, 236);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html><center>CORPOELEC <br>REPOSOS INTERNOS </html>"
            }

        );
        jTable21.setModel(modelo);
        jtableHeader = jTable21.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(80,11));
        jTable21.setTableHeader(jtableHeader);
        jScrollPane25.setViewportView(jTable21);

        panelTabla3.add(jScrollPane25);
        jScrollPane25.setBounds(5, 32, 140, 72);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","",
            }

        );
        jTable23.setModel(modelo
        );
        jTable23.getTableHeader().setReorderingAllowed(false);
        jTable23.setRowHeight(22);//tamaño de las celdas
        jTable23.setGridColor(new java.awt.Color(0, 0, 0));
        jTable23.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA REFERENCIA",6));
        jTable23.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable23.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(-1,11));
        jTable23.setTableHeader(jtableHeader);
        jTable23.setBackground(new Color(255,255,255));
        jScrollPane27.getViewport().setBackground(new Color(255,255,255));
        jScrollPane27.setViewportView(jTable23);

        panelTabla3.add(jScrollPane27);
        jScrollPane27.setBounds(140, 357, 675, 50);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>REFERENCIAS</html>"
            }

        );
        jTable24.setModel(modelo);
        jtableHeader = jTable24.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(44,11));
        jTable24.setTableHeader(jtableHeader);
        jScrollPane28.setViewportView(jTable24);

        panelTabla3.add(jScrollPane28);
        jScrollPane28.setBounds(5, 357, 140, 50);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>ESTUDIOS<br>  ESPECIALES</html>"
            }

        );
        jTable22.setModel(modelo);
        jtableHeader = jTable22.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(255,11));
        jTable22.setTableHeader(jtableHeader);
        jScrollPane26.setViewportView(jTable22);

        panelTabla3.add(jScrollPane26);
        jScrollPane26.setBounds(5, 101, 140, 261);

        jPanelSlider3.add(panelTabla3, "card2");

        panelTabla4.setOpaque(false);
        panelTabla4.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderH3 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderH3.setShowRightShadow(true);
        dropShadowBorderH3.setShowLeftShadow(true);
        dropShadowBorderH3.setShowTopShadow(true);
        dropShadowBorderH3.setShowBottomShadow(true);

        panelTabla4.setBorder(dropShadowBorderH3);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "PROMOCIÓN DE LA SALUD Y OTRAS","Semana 1","Semana 2","Semana 3","Semana 4","Total",
            }

        );
        jTable20.setModel(modelo);
        jtableHeader = jTable20.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado());
        jTable20.setTableHeader(jtableHeader);
        jScrollPane24.setViewportView(jTable20);

        panelTabla4.add(jScrollPane24);
        jScrollPane24.setBounds(5, 5, 810, 30);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","",""
            }

        );
        jTable25.setModel(modelo
        );
        jTable25.getTableHeader().setReorderingAllowed(false);
        jTable25.setRowHeight(21);//tamaño de las celdas
        jTable25.setGridColor(new java.awt.Color(0, 0, 0));
        jTable25.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA ACTIVIDAD",7));
        jTable25.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable25.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable25.setTableHeader(jtableHeader);
        jTable25.setBackground(new Color(255,255,255));
        jScrollPane29.getViewport().setBackground(new Color(255,255,255));
        jScrollPane29.setViewportView(jTable25);

        panelTabla4.add(jScrollPane29);
        jScrollPane29.setBounds(140, 32, 675, 153);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","",
            }

        );
        jTable27.setModel(modelo
        );
        jTable27.getTableHeader().setReorderingAllowed(false);
        jTable27.setRowHeight(21);//tamaño de las celdas
        jTable27.setGridColor(new java.awt.Color(0, 0, 0));
        jTable27.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA ACTIVIDAD",7));
        jTable27.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable27.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(-1,11));
        jTable27.setTableHeader(jtableHeader);
        jTable27.setBackground(new Color(255,255,255));
        jScrollPane31.getViewport().setBackground(new Color(255,255,255));
        jScrollPane31.setViewportView(jTable27);

        panelTabla4.add(jScrollPane31);
        jScrollPane31.setBounds(140, 182, 675, 132);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html><center>ACTIVIDADES DE <br> PROMOCION DE LA SALUD  </html>"
            }

        );
        jTable28.setModel(modelo);
        jtableHeader = jTable28.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(148,11));
        jTable28.setTableHeader(jtableHeader);
        jScrollPane32.setViewportView(jTable28);

        panelTabla4.add(jScrollPane32);
        jScrollPane32.setBounds(5, 32, 140, 153);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","",
            }

        );
        jTable29.setModel(modelo
        );
        jTable29.getTableHeader().setReorderingAllowed(false);
        jTable29.setRowHeight(21);//tamaño de las celdas
        jTable29.setGridColor(new java.awt.Color(0, 0, 0));
        jTable29.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA ACTIVIDAD",8));
        jTable29.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable29.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(-1,11));
        jTable29.setTableHeader(jtableHeader);
        jTable29.setBackground(new Color(255,255,255));
        jScrollPane33.getViewport().setBackground(new Color(255,255,255));
        jScrollPane33.setViewportView(jTable29);

        panelTabla4.add(jScrollPane33);
        jScrollPane33.setBounds(140, 338, 675, 69);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>CORPOELEC</html>"
            }

        );
        jTable30.setModel(modelo);
        jtableHeader = jTable30.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(74,11));
        jTable30.setTableHeader(jtableHeader);
        jScrollPane34.setViewportView(jTable30);

        panelTabla4.add(jScrollPane34);
        jScrollPane34.setBounds(5, 338, 140, 69);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html><center>ACTIVIDADES <br>OCUPACIONALES</html>"
            }

        );
        jTable31.setModel(modelo);
        jtableHeader = jTable31.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(134,11));
        jTable31.setTableHeader(jtableHeader);
        jScrollPane35.setViewportView(jTable31);

        panelTabla4.add(jScrollPane35);
        jScrollPane35.setBounds(5, 182, 140, 132);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "PSICOLOGIA / PSICOTERAPIA","Semana 1","Semana 2","Semana 3","Semana 4","Total",
            }

        );
        jTable26.setModel(modelo);
        jtableHeader = jTable26.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado());
        jTable26.setTableHeader(jtableHeader);
        jScrollPane30.setViewportView(jTable26);

        panelTabla4.add(jScrollPane30);
        jScrollPane30.setBounds(5, 311, 810, 30);

        jPanelSlider3.add(panelTabla4, "card2");

        panelTabla5.setOpaque(false);
        panelTabla5.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderH4 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderH4.setShowRightShadow(true);
        dropShadowBorderH4.setShowLeftShadow(true);
        dropShadowBorderH4.setShowTopShadow(true);
        dropShadowBorderH4.setShowBottomShadow(true);

        panelTabla5.setBorder(dropShadowBorderH4);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "ENFERMERIA","Semana 1","Semana 2","Semana 3","Semana 4","Total",
            }

        );
        jTable32.setModel(modelo);
        jtableHeader = jTable32.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(28,11));
        jTable32.setTableHeader(jtableHeader);
        jScrollPane36.setViewportView(jTable32);

        panelTabla5.add(jScrollPane36);
        jScrollPane36.setBounds(5, 5, 810, 28);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","",""
            }

        );
        jTable33.setModel(modelo
        );
        jTable33.getTableHeader().setReorderingAllowed(false);
        jTable33.setRowHeight(20);//tamaño de las celdas
        jTable33.setGridColor(new java.awt.Color(0, 0, 0));
        jTable33.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA ACTIVIDAD",9));
        jTable33.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable33.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable33.setTableHeader(jtableHeader);
        jTable33.setBackground(new Color(255,255,255));
        jScrollPane37.getViewport().setBackground(new Color(255,255,255));
        jScrollPane37.setViewportView(jTable33);

        panelTabla5.add(jScrollPane37);
        jScrollPane37.setBounds(140, 30, 675, 286);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html><center>ACTIVIDADES <br> EN ENFERMERÍA <br>   PERSONAL CORPOELEC  </html>"
            }

        );
        jTable35.setModel(modelo);
        jtableHeader = jTable35.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(288,11));
        jTable35.setTableHeader(jtableHeader);
        jScrollPane39.setViewportView(jTable35);

        panelTabla5.add(jScrollPane39);
        jScrollPane39.setBounds(5, 30, 140, 286);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","",
            }

        );
        jTable36.setModel(modelo
        );
        jTable36.getTableHeader().setReorderingAllowed(false);
        jTable36.setRowHeight(21);//tamaño de las celdas
        jTable36.setGridColor(new java.awt.Color(0, 0, 0));
        jTable36.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA ACTIVIDAD",10));
        jTable36.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable36.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(-1,11));
        jTable36.setTableHeader(jtableHeader);
        jTable36.setBackground(new Color(255,255,255));
        jScrollPane40.getViewport().setBackground(new Color(255,255,255));
        jScrollPane40.setViewportView(jTable36);

        panelTabla5.add(jScrollPane40);
        jScrollPane40.setBounds(140, 338, 675, 69);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>FISIOTERAPIA</html>"
            }

        );
        jTable37.setModel(modelo);
        jtableHeader = jTable37.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(74,11));
        jTable37.setTableHeader(jtableHeader);
        jScrollPane41.setViewportView(jTable37);

        panelTabla5.add(jScrollPane41);
        jScrollPane41.setBounds(5, 338, 140, 69);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "FISIOTERAPIA","Semana 1","Semana 2","Semana 3","Semana 4","Total",
            }

        );
        jTable39.setModel(modelo);
        jtableHeader = jTable39.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(28,11));
        jTable39.setTableHeader(jtableHeader);
        jScrollPane43.setViewportView(jTable39);

        panelTabla5.add(jScrollPane43);
        jScrollPane43.setBounds(5, 313, 810, 28);

        jPanelSlider3.add(panelTabla5, "card2");

        panelTabla6.setOpaque(false);
        panelTabla6.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderH5 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderH5.setShowRightShadow(true);
        dropShadowBorderH5.setShowLeftShadow(true);
        dropShadowBorderH5.setShowTopShadow(true);
        dropShadowBorderH5.setShowBottomShadow(true);

        panelTabla6.setBorder(dropShadowBorderH5);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "ODONTOLOGIA","Semana 1","Semana 2","Semana 3","Semana 4","Total",
            }

        );
        jTable34.setModel(modelo);
        jtableHeader = jTable34.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado());
        jTable34.setTableHeader(jtableHeader);
        jScrollPane38.setViewportView(jTable34);

        panelTabla6.add(jScrollPane38);
        jScrollPane38.setBounds(5, 5, 810, 30);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","",""
            }

        );
        jTable38.setModel(modelo
        );
        jTable38.getTableHeader().setReorderingAllowed(false);
        jTable38.setRowHeight(21);//tamaño de las celdas
        jTable38.setGridColor(new java.awt.Color(0, 0, 0));
        jTable38.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA ACTIVIDAD",11));
        jTable38.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable38.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable38.setTableHeader(jtableHeader);
        jTable38.setBackground(new Color(255,255,255));
        jScrollPane42.getViewport().setBackground(new Color(255,255,255));
        jScrollPane42.setViewportView(jTable38);

        panelTabla6.add(jScrollPane42);
        jScrollPane42.setBounds(140, 32, 675, 153);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","",
            }

        );
        jTable40.setModel(modelo
        );
        jTable40.getTableHeader().setReorderingAllowed(false);
        jTable40.setRowHeight(21);//tamaño de las celdas
        jTable40.setGridColor(new java.awt.Color(0, 0, 0));
        jTable40.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA ACTIVIDAD",12));
        jTable40.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable40.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(-1,11));
        jTable40.setTableHeader(jtableHeader);
        jTable40.setBackground(new Color(255,255,255));
        jScrollPane44.getViewport().setBackground(new Color(255,255,255));
        jScrollPane44.setViewportView(jTable40);

        panelTabla6.add(jScrollPane44);
        jScrollPane44.setBounds(140, 182, 675, 132);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html><center>ATENCIÓN <br><center>ODONTOLÓGICA <br><center>CORPOELEC </html>"
            }

        );
        jTable41.setModel(modelo);
        jtableHeader = jTable41.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(148,11));
        jTable41.setTableHeader(jtableHeader);
        jScrollPane45.setViewportView(jTable41);

        panelTabla6.add(jScrollPane45);
        jScrollPane45.setBounds(5, 32, 140, 153);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","",
            }

        );
        jTable42.setModel(modelo
        );
        jTable42.getTableHeader().setReorderingAllowed(false);
        jTable42.setRowHeight(21);//tamaño de las celdas
        jTable42.setGridColor(new java.awt.Color(0, 0, 0));
        jTable42.addMouseListener(new EscucharBotones.mouse(this,0,"ESTA ACTIVIDAD",13));
        jTable42.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable42.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(-1,11));
        jTable42.setTableHeader(jtableHeader);
        jTable42.setBackground(new Color(255,255,255));
        jScrollPane46.getViewport().setBackground(new Color(255,255,255));
        jScrollPane46.setViewportView(jTable42);

        panelTabla6.add(jScrollPane46);
        jScrollPane46.setBounds(140, 338, 675, 69);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>CORPOELEC</html>"
            }

        );
        jTable43.setModel(modelo);
        jtableHeader = jTable43.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(74,11));
        jTable43.setTableHeader(jtableHeader);
        jScrollPane47.setViewportView(jTable43);

        panelTabla6.add(jScrollPane47);
        jScrollPane47.setBounds(5, 338, 140, 69);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html><center> ATENCIÓN <br>ODONTOLÓGICA  <br>  MINISTERIO DE<br> ENERGIA ELECTRICA </html>"
            }

        );
        jTable44.setModel(modelo);
        jtableHeader = jTable44.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(134,11));
        jTable44.setTableHeader(jtableHeader);
        jScrollPane48.setViewportView(jTable44);

        panelTabla6.add(jScrollPane48);
        jScrollPane48.setBounds(5, 182, 140, 132);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "NUTRICIÓN Y DIETÉTICA","Semana 1","Semana 2","Semana 3","Semana 4","Total",
            }

        );
        jTable45.setModel(modelo);
        jtableHeader = jTable45.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado());
        jTable45.setTableHeader(jtableHeader);
        jScrollPane49.setViewportView(jTable45);

        panelTabla6.add(jScrollPane49);
        jScrollPane49.setBounds(5, 311, 810, 30);

        jPanelSlider3.add(panelTabla6, "card2");

        panelTabla7.setOpaque(false);
        panelTabla7.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderH6 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderH6.setShowRightShadow(true);
        dropShadowBorderH6.setShowLeftShadow(true);
        dropShadowBorderH6.setShowTopShadow(true);
        dropShadowBorderH6.setShowBottomShadow(true);

        panelTabla7.setBorder(dropShadowBorderH6);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "Nº", "<html> ENFERMEDADES INFECCIOSAS<br> Y PARASITARIAS</html>",
            }

        );
        jTable46.setModel(modelo);
        jtableHeader = jTable46.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(52,10));
        jTable46.setTableHeader(jtableHeader);
        jScrollPane50.setViewportView(jTable46);

        panelTabla7.add(jScrollPane50);
        jScrollPane50.setBounds(5, 5, 190, 57);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "< A 25 AÑOS","25 a 44 AÑOS","45 a 59 AÑOS",
                "60 A 64 AÑOS","65 AÑOS Y MAS","TOTAL",
            }

        );
        jTable48.setModel(modelo);
        jtableHeader = jTable48.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(30,10));
        jTable48.setTableHeader(jtableHeader);
        jScrollPane52.setViewportView(jTable48);

        panelTabla7.add(jScrollPane52);
        jScrollPane52.setBounds(190, 5, 566, 30);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "H","M","H","M","H","M","H","M","H","M","HOMBRES","MUJERES"

            }

        );
        jTable50.setModel(modelo);
        jtableHeader = jTable50.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(30,10));
        jTable50.setTableHeader(jtableHeader);
        jScrollPane54.setViewportView(jTable50);

        panelTabla7.add(jScrollPane54);
        jScrollPane54.setBounds(190, 32, 566, 30);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","","","","","","","","","",""
            }

        );
        jTable47.setModel(modelo
        );
        jTable47.setRowHeight(22);//tamaño de las celdas
        jTable47.setGridColor(new java.awt.Color(0, 0, 0));
        jTable47.addMouseListener(new EscucharBotones.mouse(this,1,"ESTA ENFERMEDAD",14));
        jTable47.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable47.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable47.setTableHeader(jtableHeader);
        jTable47.setBackground(new Color(255,255,255));
        jScrollPane51.getViewport().setBackground(new Color(255,255,255));
        jScrollPane51.setViewportView(jTable47);

        panelTabla7.add(jScrollPane51);
        jScrollPane51.setBounds(5, 58, 810, 349);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>TOTAL <br> GENERAL  </html>",
            }

        );
        jTable49.setModel(modelo);
        jtableHeader = jTable49.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(52,10));
        jTable49.setTableHeader(jtableHeader);
        jScrollPane53.setViewportView(jTable49);

        panelTabla7.add(jScrollPane53);
        jScrollPane53.setBounds(751, 5, 64, 57);

        jPanelSlider3.add(panelTabla7, "card2");

        panelTabla8.setOpaque(false);
        panelTabla8.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderH7 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderH7.setShowRightShadow(true);
        dropShadowBorderH7.setShowLeftShadow(true);
        dropShadowBorderH7.setShowTopShadow(true);
        dropShadowBorderH7.setShowBottomShadow(true);

        panelTabla8.setBorder(dropShadowBorderH7);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "Nº", "<html> NEOPLASIAS</html>",
            }

        );
        jTable51.setModel(modelo);
        jtableHeader = jTable51.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(52,10));
        jTable51.setTableHeader(jtableHeader);
        jScrollPane55.setViewportView(jTable51);

        panelTabla8.add(jScrollPane55);
        jScrollPane55.setBounds(5, 5, 190, 57);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "< A 25 AÑOS","25 a 44 AÑOS","45 a 59 AÑOS",
                "60 A 64 AÑOS","65 AÑOS Y MAS","TOTAL",
            }

        );
        jTable52.setModel(modelo);
        jtableHeader = jTable52.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(30,10));
        jTable52.setTableHeader(jtableHeader);
        jScrollPane56.setViewportView(jTable52);

        panelTabla8.add(jScrollPane56);
        jScrollPane56.setBounds(190, 5, 566, 30);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "H","M","H","M","H","M","H","M","H","M","HOMBRES","MUJERES"

            }

        );
        jTable53.setModel(modelo);
        jtableHeader = jTable53.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(30,10));
        jTable53.setTableHeader(jtableHeader);
        jScrollPane57.setViewportView(jTable53);

        panelTabla8.add(jScrollPane57);
        jScrollPane57.setBounds(190, 32, 566, 30);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","","","","","","","","","",""
            }

        );
        jTable54.setModel(modelo
        );
        jTable54.setRowHeight(22);//tamaño de las celdas
        jTable54.setGridColor(new java.awt.Color(0, 0, 0));
        jTable54.addMouseListener(new EscucharBotones.mouse(this,1,"ESTA ENFERMEDAD",15));
        jTable54.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable54.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable54.setTableHeader(jtableHeader);
        jTable54.setBackground(new Color(255,255,255));
        jScrollPane58.getViewport().setBackground(new Color(255,255,255));
        jScrollPane58.setViewportView(jTable54);

        panelTabla8.add(jScrollPane58);
        jScrollPane58.setBounds(5, 58, 810, 349);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>TOTAL <br> GENERAL  </html>",
            }

        );
        jTable55.setModel(modelo);
        jtableHeader = jTable55.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(52,10));
        jTable55.setTableHeader(jtableHeader);
        jScrollPane59.setViewportView(jTable55);

        panelTabla8.add(jScrollPane59);
        jScrollPane59.setBounds(751, 5, 64, 57);

        jPanelSlider3.add(panelTabla8, "card2");

        panelTabla9.setOpaque(false);
        panelTabla9.setLayout(null);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorderH8 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorderH8.setShowRightShadow(true);
        dropShadowBorderH8.setShowLeftShadow(true);
        dropShadowBorderH8.setShowTopShadow(true);
        dropShadowBorderH8.setShowBottomShadow(true);

        panelTabla7.setBorder(dropShadowBorderH8);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "Nº", "<html> ENFERMEDADES DE <br> LA SANGRE Y <br> ORGANO HEMATOPOYETICO</html>",
            }

        );
        jTable56.setModel(modelo);
        jtableHeader = jTable56.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(52,10));
        jTable56.setTableHeader(jtableHeader);
        jScrollPane60.setViewportView(jTable56);

        panelTabla9.add(jScrollPane60);
        jScrollPane60.setBounds(5, 5, 190, 57);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "< A 25 AÑOS","25 a 44 AÑOS","45 a 59 AÑOS",
                "60 A 64 AÑOS","65 AÑOS Y MAS","TOTAL",
            }

        );
        jTable57.setModel(modelo);
        jtableHeader = jTable52.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(30,10));
        jTable52.setTableHeader(jtableHeader);
        jScrollPane61.setViewportView(jTable57);

        panelTabla9.add(jScrollPane61);
        jScrollPane61.setBounds(190, 5, 566, 30);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "H","M","H","M","H","M","H","M","H","M","HOMBRES","MUJERES"

            }

        );
        jTable58.setModel(modelo);
        jtableHeader = jTable53.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(30,10));
        jTable53.setTableHeader(jtableHeader);
        jScrollPane62.setViewportView(jTable58);

        panelTabla9.add(jScrollPane62);
        jScrollPane62.setBounds(190, 32, 566, 30);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "","","","","","","","","","","","","","",""
            }

        );
        jTable59.setModel(modelo
        );
        jTable59.setGridColor(new java.awt.Color(0, 0, 0));
        jTable59.addMouseListener(new EscucharBotones.mouse());
        jtableHeader = jTable54.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(0,11));
        jTable54.setTableHeader(jtableHeader);
        jTable59.setBackground(new Color(255,255,255));
        jScrollPane63.getViewport().setBackground(new Color(255,255,255));
        jScrollPane63.setViewportView(jTable59);

        panelTabla9.add(jScrollPane63);
        jScrollPane63.setBounds(5, 58, 810, 349);

        modelo=new ModeloTabla(
            new Object [][] {

            },
            new String [] {
                "<html>TOTAL <br> GENERAL  </html>",
            }

        );
        jTable60.setModel(modelo);
        jtableHeader = jTable55.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(52,10));
        jTable55.setTableHeader(jtableHeader);
        jScrollPane64.setViewportView(jTable60);

        panelTabla9.add(jScrollPane64);
        jScrollPane64.setBounds(751, 5, 64, 57);

        jPanelSlider3.add(panelTabla9, "card2");

        panelContenedorTablas.add(jPanelSlider3);
        jPanelSlider3.setBounds(44, 44, 820, 412);

        panelContenedorTablas.setBorder(dropShadowBorderC);

        panelEstadistica.add(panelContenedorTablas);
        panelContenedorTablas.setBounds(8, 80, 910, 500);

        getContentPane().add(panelEstadistica, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 2, 972, 596));

        panelConfig.setOpaque(false);
        panelConfig.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel52.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        jLabel52.setText("CONFIGURACIÓN");
        panelConfig.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        jPanel8.setBackground(new java.awt.Color(0, 0, 102));
        jPanel8.setLayout(null);

        jLabel46.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(255, 255, 255));
        jLabel46.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel46.setText("CREAR RESPALDO");
        jPanel8.add(jLabel46);
        jLabel46.setBounds(10, 160, 150, 18);

        jLabel47.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(255, 255, 255));
        jLabel47.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel47.setText("BASE DE DATOS (BD)");
        jPanel8.add(jLabel47);
        jLabel47.setBounds(0, 190, 170, 18);

        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono crear respaldo db.png"))); // NOI18N
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton17);
        jButton17.setBounds(26, 11, 120, 130);

        jPanel1.add(jPanel8);
        jPanel8.setBounds(120, 60, 170, 220);

        jPanel9.setBackground(new java.awt.Color(0, 0, 102));
        jPanel9.setLayout(null);

        jLabel48.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(255, 255, 255));
        jLabel48.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel48.setText("RESTAURAR");
        jPanel9.add(jLabel48);
        jLabel48.setBounds(10, 160, 150, 18);

        jLabel49.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(255, 255, 255));
        jLabel49.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel49.setText("BASE DE DATOS (BD)");
        jPanel9.add(jLabel49);
        jLabel49.setBounds(0, 190, 170, 18);

        jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono restauracion.png"))); // NOI18N
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton18);
        jButton18.setBounds(26, 11, 120, 130);

        jPanel1.add(jPanel9);
        jPanel9.setBounds(360, 60, 170, 220);

        jPanel10.setBackground(new java.awt.Color(0, 0, 102));
        jPanel10.setLayout(null);

        jLabel50.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(255, 255, 255));
        jLabel50.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel50.setText("CONECTARSE ");
        jPanel10.add(jLabel50);
        jLabel50.setBounds(0, 160, 170, 18);

        jLabel59.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(255, 255, 255));
        jLabel59.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel59.setText("A UN SERVIDOR");
        jPanel10.add(jLabel59);
        jLabel59.setBounds(0, 190, 170, 18);

        jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono conectar servidor.png"))); // NOI18N
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton19);
        jButton19.setBounds(26, 11, 120, 130);

        jPanel1.add(jPanel10);
        jPanel10.setBounds(600, 60, 170, 220);

        panelConfig.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 790, 390));

        getContentPane().add(panelConfig, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 2, 972, 596));

        panelHistorial.setOpaque(false);
        panelHistorial.setLayout(null);

        jLabel61.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        jLabel61.setText("HISTORIAL");
        panelHistorial.add(jLabel61);
        jLabel61.setBounds(30, 30, 140, 29);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 112, 192), 5));
        jPanel2.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 2, 0, new java.awt.Color(0, 112, 192)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel63.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel63.setForeground(new java.awt.Color(0, 112, 192));
        jLabel63.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel63.setText("PROGRAMACIÓN & DISEÑO EN GENERAL");
        jLabel63.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 112, 192)));
        jPanel3.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 340, -1));

        jLabel65.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel65.setForeground(new java.awt.Color(0, 112, 192));
        jLabel65.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel65.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/itsc-receta.png"))); // NOI18N
        jPanel3.add(jLabel65, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 0, 97, 100));

        jLabel72.setFont(new java.awt.Font("Roboto", 1, 30)); // NOI18N
        jLabel72.setForeground(new java.awt.Color(0, 208, 212));
        jLabel72.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel72.setText("LM");
        jPanel3.add(jLabel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 110, -1));

        jLabel79.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel79.setForeground(new java.awt.Color(0, 112, 192));
        jLabel79.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo-receta.png"))); // NOI18N
        jPanel3.add(jLabel79, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 90));

        jLabel86.setFont(new java.awt.Font("Roboto", 1, 30)); // NOI18N
        jLabel86.setForeground(new java.awt.Color(0, 112, 192));
        jLabel86.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel86.setText("C l i n y c");
        jPanel3.add(jLabel86, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 140, -1));

        etiquetaSelecionarPaciente.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        etiquetaSelecionarPaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaSelecionarPaciente.setText("SELECCIONE UN PACIENTE PARA VER SU HISTORIAL");
        jPanel3.add(etiquetaSelecionarPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 890, -1));

        jScrollPane3.setBackground(new java.awt.Color(102, 204, 0));
        jScrollPane3.setOpaque(false);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "Tipo de consulta", "Motivo de la consulta","Diagnostico","Accion tomada","Resultado de evaluacion","Fecha", "Hora"
            }
        );
        jTable2.setModel(modelo);
        jTable2.setGridColor(new java.awt.Color(0, 0, 0));
        jtableHeader = jTable2.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(25,11));
        jTable2.setTableHeader(jtableHeader);
        jTable2.setRowHeight(23);
        jTable2.setBackground(new Color(255,255,255));
        jScrollPane3.getViewport().setBackground(new Color(255,255,255));
        jScrollPane3.setViewportView(jTable2);

        jPanel3.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 116, 880, 261));

        jScrollPane6.setBackground(new java.awt.Color(102, 204, 0));
        jScrollPane6.setOpaque(false);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "Alergias"
            }
        );
        jTable62.setModel(modelo);
        jtableHeader = jTable62.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(25,11));
        jTable62.setTableHeader(jtableHeader);
        jTable62.setRowHeight(22);
        jTable62.setBackground(new Color(255,255,255));
        jScrollPane6.getViewport().setBackground(new Color(255,255,255));
        jTable62.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane6.setViewportView(jTable62);

        jPanel3.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 375, 295, 75));

        jScrollPane65.setBackground(new java.awt.Color(102, 204, 0));
        jScrollPane65.setOpaque(false);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "Cirugias"
            }
        );
        jTable63.setModel(modelo);
        jtableHeader = jTable63.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(25,11));
        jTable63.setTableHeader(jtableHeader);
        jTable63.setRowHeight(22);
        jTable63.setBackground(new Color(255,255,255));
        jScrollPane65.getViewport().setBackground(new Color(255,255,255));
        jTable63.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane65.setViewportView(jTable63);

        jPanel3.add(jScrollPane65, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 375, 295, 75));

        jScrollPane5.setBackground(new java.awt.Color(102, 204, 0));
        jScrollPane5.setOpaque(false);

        modelo=new ModeloTabla(
            new Object [][] {
            },
            new String [] {
                "Enfermedades Cronicas"
            }
        );
        jTable61.setModel(modelo);
        jtableHeader = jTable61.getTableHeader();
        jtableHeader.setDefaultRenderer(new GestionEncabezado(25,11));
        jTable61.setTableHeader(jtableHeader);
        jTable61.setRowHeight(22);
        jTable61.setBackground(new Color(255,255,255));
        jScrollPane5.getViewport().setBackground(new Color(255,255,255));
        jTable61.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane5.setViewportView(jTable61);

        jPanel3.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(297, 375, 296, 75));

        jScrollPane1.setBorder(null);
        jScrollPane1.setFocusable(false);

        datosPersonalesHistorial.setEditable(false);
        datosPersonalesHistorial.setBorder(null);
        datosPersonalesHistorial.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        jScrollPane1.setViewportView(datosPersonalesHistorial);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 888, 25));

        jPanel2.add(jPanel3);
        jPanel3.setBounds(5, 40, 890, 456);

        listPacientes1.setEditable(true);
        listPacientes1.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        listPacientes1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        listPacientes1.setUI(CustomUI.createUI(listPacientes1));
        listPacientes1.getEditor().getEditorComponent().addKeyListener(new EscucharTeclas(listPacientes1,"SELECCIONE EL NOMBRE DEL PACIENTE"));
        listPacientes1.getEditor().getEditorComponent().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent evt) {
                EscucharTeclas.setTipo("PACIENTES");
            }
        });
        listPacientes1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listPacientes1ItemStateChanged(evt);
            }
        });
        jPanel2.add(listPacientes1);
        listPacientes1.setBounds(10, 10, 880, 25);

        panelHistorial.add(jPanel2);
        jPanel2.setBounds(10, 70, 900, 500);

        getContentPane().add(panelHistorial, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 2, 972, 596));

        panelDocumentacion.setOpaque(false);
        panelDocumentacion.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel68.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel68.setText("MANUAL DE USUARIO");
        panelDocumentacion.add(jLabel68, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        jSeparator9.setBackground(new java.awt.Color(0, 0, 153));
        jSeparator9.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator9.setOpaque(true);
        panelDocumentacion.add(jSeparator9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 870, -1));

        jLabel70.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        jLabel70.setText("DOCUMENTACION");
        panelDocumentacion.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        jList1.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        DefaultListModel<String> modeloList = new DefaultListModel<String>();
        modeloList.addElement("Introduccion");
        modeloList.addElement("Home");
        modeloList.addElement("Consultas");
        modeloList.addElement("Pacientes");
        modeloList.addElement("Estadisticas");
        modeloList.addElement("Historial");
        modeloList.addElement("Documentacion");
        modeloList.addElement("Acerca de");
        jList1.setModel(modeloList);
        //jList1.setCellRenderer(new RendererList());
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setFixedCellHeight(40);
        jList1.setSelectedIndex(1);
        jList1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jList1.setVerifyInputWhenFocusTarget(false);
        //jList1.setSelectionBackground(Color.BLACK);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);
        //jScrollPane2.setHorizontalScrollBar(new JScrollBar(JScrollBar.HORIZONTAL));
        //jScrollPane2.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        panelDocumentacion.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 142, 230, 430));

        Document doc = textDocumentacion.getDocument();
        SimpleAttributeSet attrs = new SimpleAttributeSet(((StyledDocument)doc).getCharacterElement(0).getAttributes());
        StyleConstants.setAlignment(attrs,StyleConstants.ALIGN_JUSTIFIED);
        textDocumentacion.setEditable(false);
        textDocumentacion.setBorder(null);
        textDocumentacion.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        textDocumentacion.setFocusable(false);
        textDocumentacion.setMargin(new java.awt.Insets(3, 50, 3, 3));
        jScrollPane66.setViewportView(textDocumentacion);

        panelDocumentacion.add(jScrollPane66, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 142, 630, 430));

        getContentPane().add(panelDocumentacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 2, 972, 596));

        panelAcercaDe.setOpaque(false);
        panelAcercaDe.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel62.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        jLabel62.setText("ACERCA DE");
        panelAcercaDe.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        jPanel4.setOpaque(false);
        jPanel4.setLayout(null);

        jLabel74.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel74.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/about1.png"))); // NOI18N
        jPanel4.add(jLabel74);
        jLabel74.setBounds(0, 0, 840, 270);

        jLabel75.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N
        jLabel75.setForeground(new java.awt.Color(35, 114, 194));
        jLabel75.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel75.setText("Sistema desarrollado por");
        jPanel4.add(jLabel75);
        jLabel75.setBounds(300, 300, 260, 22);

        jLabel76.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel76.setForeground(new java.awt.Color(35, 114, 194));
        jLabel76.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel76.setText("Luis Alfredo Mora Chirino");
        jPanel4.add(jLabel76);
        jLabel76.setBounds(330, 330, 200, 18);

        lblFechaActual.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        lblFechaActual.setForeground(new java.awt.Color(35, 114, 194));
        lblFechaActual.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFechaActual.setText("© Derechos reservados ITSC 2017");
        jPanel4.add(lblFechaActual);
        lblFechaActual.setBounds(640, 310, 195, 16);

        jLabel66.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel66.setForeground(new java.awt.Color(35, 114, 194));
        jLabel66.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel66.setText("Versión 1.0");
        jPanel4.add(jLabel66);
        jLabel66.setBounds(640, 330, 190, 16);

        jLabel77.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N
        jLabel77.setForeground(new java.awt.Color(35, 114, 194));
        jLabel77.setText("Puntos de contacto");
        jPanel4.add(jLabel77);
        jLabel77.setBounds(50, 0, 210, 22);

        jLabel78.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel78.setForeground(new java.awt.Color(35, 114, 194));
        jLabel78.setText("Correos:");
        jPanel4.add(jLabel78);
        jLabel78.setBounds(10, 30, 70, 18);

        jLabel80.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel80.setForeground(new java.awt.Color(35, 114, 194));
        jLabel80.setText("moraluis9825@gmail.com");
        jPanel4.add(jLabel80);
        jLabel80.setBounds(90, 30, 200, 18);

        jLabel81.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel81.setForeground(new java.awt.Color(35, 114, 194));
        jLabel81.setText("luis25_mora@hotmail.com");
        jPanel4.add(jLabel81);
        jLabel81.setBounds(90, 60, 200, 18);

        jLabel82.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel82.setForeground(new java.awt.Color(35, 114, 194));
        jLabel82.setText("0268-252-08-07");
        jPanel4.add(jLabel82);
        jLabel82.setBounds(90, 90, 120, 18);

        jLabel83.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel83.setForeground(new java.awt.Color(35, 114, 194));
        jLabel83.setText("Teléfono:");
        jPanel4.add(jLabel83);
        jLabel83.setBounds(10, 90, 70, 18);

        panelAcercaDe.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 840, 440));

        jSeparator7.setBackground(new java.awt.Color(0, 0, 153));
        jSeparator7.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator7.setOpaque(true);
        panelAcercaDe.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 870, -1));

        jSeparator8.setBackground(new java.awt.Color(0, 0, 153));
        jSeparator8.setForeground(new java.awt.Color(0, 0, 153));
        jSeparator8.setOpaque(true);
        panelAcercaDe.add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 520, 870, -1));

        getContentPane().add(panelAcercaDe, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 2, 972, 596));

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo.png"))); // NOI18N
        background.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1024, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void fecha() {
        //Fehca del sistema
        Date sistemaFech = new Date();
        Calendar c2 = new GregorianCalendar();
        SimpleDateFormat formato = new SimpleDateFormat("dd - MM - yyyy");
        this.etiquetaFecha.setText(formato.format(sistemaFech));
        switch (c2.get(Calendar.MONTH)) {
            case 0:
                etiquetaMesAño.setText("Enero " + c2.get(Calendar.YEAR));
                break;
            case 1:
                etiquetaMesAño.setText("Febrero " + c2.get(Calendar.YEAR));
                break;
            case 2:
                etiquetaMesAño.setText("Marzo " + c2.get(Calendar.YEAR));
                break;
            case 3:
                etiquetaMesAño.setText("Abril " + c2.get(Calendar.YEAR));
                break;
            case 4:
                etiquetaMesAño.setText("Mayo " + c2.get(Calendar.YEAR));
                break;
            case 5:
                etiquetaMesAño.setText("Junio " + c2.get(Calendar.YEAR));
                break;
            case 6:
                etiquetaMesAño.setText("Julio " + c2.get(Calendar.YEAR));
                break;
            case 7:
                etiquetaMesAño.setText("Agosto " + c2.get(Calendar.YEAR));
                break;
            case 8:
                etiquetaMesAño.setText("Septiembre " + c2.get(Calendar.YEAR));
                break;
            case 9:
                etiquetaMesAño.setText("Octubre " + c2.get(Calendar.YEAR));
                break;
            case 10:
                etiquetaMesAño.setText("Noviembre " + c2.get(Calendar.YEAR));
                break;
            case 11:
                etiquetaMesAño.setText("Diciembre " + c2.get(Calendar.YEAR));
                break;
            default:
                etiquetaMesAño.setText("Error establleciendo la fecha " + c2.get(Calendar.YEAR));
                break;
        }

        //Hora del sistema
        tiempo.start();
    }

    private void setLimitesFechas(JDateChooser selector, String entrada, int year) {
        Calendar fechMaxima = new GregorianCalendar();
        Calendar fechMinima = new GregorianCalendar();
        String fechaMaxima = "";
        String fechaMinima = "";
        Calendar c2 = new GregorianCalendar();
        SimpleDateFormat formato = new SimpleDateFormat("dd - MM - yyyy");
        try {
            if (entrada == null) {
                fechaMaxima = "31 - 12 - " + (c2.get(Calendar.YEAR) - year);
                if (year == 70) {
                    fechaMinima = "01 - 01 - " + (c2.get(Calendar.YEAR) - 150);
                } else {
                    fechaMinima = "01 - 01 - " + (c2.get(Calendar.YEAR) - 70);
                }
                fechMaxima.setTime(formato.parse(fechaMaxima));
                fechMinima.setTime(formato.parse(fechaMinima));
                /* fechMaxima = formato.parse(fechaMaxima);
                fechMinima = formato.parse(fechaMinima); */
            } else {
                c2.set(fechMaxima.get(Calendar.YEAR) - year, 11, 31);
                //fechMaxima=c2.getTime();
                fechMaxima.setTime(formato.parse(entrada));
                fechMaxima.set(fechMaxima.get(Calendar.YEAR) - year, 11, 31);
                /* fechMaxima = formato.parse(entrada);
                fechMaxima.setYear(fechMaxima.getYear() - year);
                fechMaxima.setMonth(11);
                fechMaxima.setDate(31); */
                c2.setTime(fechMaxima.getTime());
                if (year == 0) {
                    fechaMinima = "01 - 01 - " + (c2.get(Calendar.YEAR) - (150 - c2.get(Calendar.YEAR)));
                } else {
                    fechaMinima = "01 - 01 - " + (c2.get(Calendar.YEAR) - (150));
                }
                fechMinima.setTime(formato.parse(fechaMinima));
            }

        } catch (ParseException ex) {

        }
        selector.setMaxSelectableDate(fechMaxima.getTime());
        selector.setMinSelectableDate(fechMinima.getTime());

    }

    public void buscarPacientes() {
        Collection<PacientesDTO> collPacientes;
        try {
            collPacientes = Facade.ConsultarPacientesEspecificos("cedula", Integer.parseInt(entradaBuscarPaciente.getText()));
            if (collPacientes.isEmpty()) {
                collPacientes = Facade.ConsultarPacientesEspecificos("ID_Paciente", Integer.parseInt(entradaBuscarPaciente.getText()));
            }
            llenarTablaPacientes(collPacientes);
        } catch (NumberFormatException ex) {
            collPacientes = Facade.ConsultarPacientesEspecificos("Nombre", entradaBuscarPaciente.getText().toUpperCase());
            llenarTablaPacientes(collPacientes);
        }
        entradaBuscarPaciente.setText("");
    }

    void iniciarTabla() {
        PersonalizarTabla personalizar = (PersonalizarTabla) Instancia.getInstancia("util.PersonalizarTabla");

        personalizar.personalizarTabla(jTable1, 10, 6, 0, "paciente");
        personalizar.personalizarTabla(jTable1, 5, 5);

        personalizar.personalizarTabla(jTable3, 514);
        personalizar.personalizarTabla(jTable4, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable4, 364, 6, 1, "numerico");
        personalizar.personalizarTabla(jTable6, 364, 1, 0, "especial");
        personalizar.personalizarTabla(jTable6, 364, 6, 1, "especial numerico");
        personalizar.personalizarTabla(jTable7, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable7, 364, 6, 1, "numerico");
        personalizar.personalizarTabla(jTable8, 364, 1, 0, "especial");
        personalizar.personalizarTabla(jTable8, 364, 6, 1, "especial numerico");
        personalizar.personalizarTabla(jTable15, 514, 1, 0, "especial");
        personalizar.personalizarTabla(jTable15, 514, 6, 1, "especial numerico");
        personalizar.personalizarTabla(jTable12, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable12, 364, 6, 1, "numerico");

        personalizar.personalizarTabla(jTable9, 536);
        personalizar.personalizarTabla(jTable10, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable10, 364, 7, 1, "numerico");
        personalizar.personalizarTabla(jTable13, 364, 1, 0, "especial");
        personalizar.personalizarTabla(jTable13, 364, 7, 1, "especial numerico");

        personalizar.personalizarTabla(jTable16, 514);
        personalizar.personalizarTabla(jTable17, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable17, 364, 6, 1, "numerico");
        personalizar.personalizarTabla(jTable18, 364, 1, 0, "especial");
        personalizar.personalizarTabla(jTable18, 364, 6, 1, "especial numerico");
        personalizar.personalizarTabla(jTable19, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable19, 364, 6, 1, "numerico");
        personalizar.personalizarTabla(jTable23, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable23, 364, 6, 1, "numerico");

        personalizar.personalizarTabla(jTable20, 514);
        personalizar.personalizarTabla(jTable25, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable25, 364, 6, 1, "numerico");
        personalizar.personalizarTabla(jTable26, 514);
        personalizar.personalizarTabla(jTable27, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable27, 364, 6, 1, "numerico");
        personalizar.personalizarTabla(jTable29, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable29, 364, 6, 1, "numerico");

        personalizar.personalizarTabla(jTable32, 514);
        personalizar.personalizarTabla(jTable33, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable33, 364, 6, 1, "numerico");
        personalizar.personalizarTabla(jTable39, 514);
        personalizar.personalizarTabla(jTable36, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable36, 364, 6, 1, "numerico");

        personalizar.personalizarTabla(jTable34, 514);
        personalizar.personalizarTabla(jTable38, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable38, 364, 6, 1, "numerico");
        personalizar.personalizarTabla(jTable40, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable40, 364, 6, 1, "numerico");
        personalizar.personalizarTabla(jTable45, 514);
        personalizar.personalizarTabla(jTable42, 364, 1, 0, "texto");
        personalizar.personalizarTabla(jTable42, 364, 6, 1, "numerico");

        personalizar.personalizarTabla(jTable2, 40, 3);
        personalizar.personalizarTabla(jTable2, 0, 5);
        personalizar.personalizarTabla(jTable2, 0, 6);
        personalizar.personalizarTabla(jTable2, 70, 7, 0, "historial");
        personalizar.personalizarTabla(jTable61, 364, 1, 0, "historial");
        personalizar.personalizarTabla(jTable62, 364, 1, 0, "historial");
        personalizar.personalizarTabla(jTable63, 364, 1, 0, "historial");
    }


    private void btnMinimizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimizarActionPerformed
        setExtendedState(ICONIFIED);
    }//GEN-LAST:event_btnMinimizarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        Fade.JFrameFadeOut(1f, 0f, 0.2f, 50, this, Fade.DISPOSE);
        new Login().setVisible(true);
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked

        if (panelMenu.getX() == -180) {
            Animacion.mover_derecha(-180, 0, 10, 5, panelMenu);
            //glass.setVisible(true);
            //glass.addMouseListener(new EscucharBotones.mouse());
        }

        if (panelMenu.getX() == 0) {
            Animacion.mover_izquierda(0, -180, 10, 5, panelMenu);

        }

    }//GEN-LAST:event_jButton3MouseClicked


    private void btnConfigCuentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConfigCuentaMouseClicked
        etiquetaHome.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaConsulta.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaPacientes.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaEstadisticas.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaHistorial.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaDocumentacion.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaAcercaDe.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N panelCuenta.setVisible(false);
        panelCuenta.setVisible(true);
        panelHome.setVisible(false);
        panelPacientes.setVisible(false);
        panelConsulta.setVisible(false);
        panelConfig.setVisible(false);
        panelEstadistica.setVisible(false);
        panelHistorial.setVisible(false);
        panelDocumentacion.setVisible(false);
        panelAcercaDe.setVisible(false);
        datosUser();
    }//GEN-LAST:event_btnConfigCuentaMouseClicked

    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked
        etiquetaHome.setFont(new Font("Bookman Old Style", 3, 18)); // NOI18N
        etiquetaConsulta.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaPacientes.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaEstadisticas.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaHistorial.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaDocumentacion.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaAcercaDe.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N panelCuenta.setVisible(false);
        panelHome.setVisible(true);
        panelPacientes.setVisible(false);
        panelConsulta.setVisible(false);
        panelConfig.setVisible(false);
        panelEstadistica.setVisible(false);
        panelCuenta.setVisible(false);
        panelHistorial.setVisible(false);
        panelDocumentacion.setVisible(false);
        panelAcercaDe.setVisible(false);
        publicidad();
    }//GEN-LAST:event_jButton8MouseClicked

    private void jButton13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton13MouseClicked
        etiquetaHome.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaConsulta.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaPacientes.setFont(new Font("Bookman Old Style", 3, 18)); // NOI18N
        etiquetaEstadisticas.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaHistorial.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaDocumentacion.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaAcercaDe.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18NpanelCuenta.setVisible(false);
        panelHome.setVisible(false);
        panelPacientes.setVisible(true);
        panelConsulta.setVisible(false);
        panelConfig.setVisible(false);
        panelRegistroPacientes.setVisible(true);
        btnNuevoPaciente.setIcon(new ImageIcon(getClass().getResource("/img/btnNuevo rollover.png"))); // NOI18N;
        btnPacientesRegistrados.setIcon(new ImageIcon(getClass().getResource("/img/btn registrado.png")));
        panelPacientesRegistrados.setVisible(false);
        panelEstadistica.setVisible(false);
        panelHistorial.setVisible(false);
        panelDocumentacion.setVisible(false);
        panelAcercaDe.setVisible(false);
        panelCuenta.setVisible(false);
    }//GEN-LAST:event_jButton13MouseClicked

    
    private void entradaCedulaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_entradaCedulaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_entradaCedulaMouseClicked

    private void btnAdelanteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAdelanteMouseClicked

    }//GEN-LAST:event_btnAdelanteMouseClicked

    private void panelDatosPersonalesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelDatosPersonalesFocusGained
    }//GEN-LAST:event_panelDatosPersonalesFocusGained

    private void panelDatosFamiliaresFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelDatosFamiliaresFocusGained
    }//GEN-LAST:event_panelDatosFamiliaresFocusGained
    public void publicidad() {
        Calendar calendario = new GregorianCalendar();
        int dia;
        ArrayList<ActividadesMedicasDTO> actv = Facade.consultarActividadesMedicas();
        ArrayList<EnfermedadesDTO> enferm = Facade.consultarEnfermedades();
        dia = calendario.get(Calendar.DATE);
        if (dia == 1) {
            actv.forEach((dto) -> {
                Facade.ActualizarActividadMedica(dto);
            });
            enferm.forEach((dto) -> {
                Facade.ActualizarEnfermedades(dto);
            });

        }
        int result = 0;
        Collection<PacientesDTO> coll = Facade.ConsultarPacientesEspecificos("Tipo", "ACTIVO");
        for (PacientesDTO dto : coll) {
            result = dto.getFilasAfectadas();
        }
        publicidad1.setText(publicidad1.getText() + " <font color=\"#12F419\"> <br><br><b>"
                + Integer.toString(result) + "</html>");
        result = 0;
        coll = Facade.ConsultarPacientesEspecificos("Tipo", "JUBILADO");
        for (PacientesDTO dto : coll) {
            result = dto.getFilasAfectadas();
        }
        publicidad2.setText(publicidad2.getText() + " <font color=\"#12F419\"> <br><br><b>"
                + Integer.toString(result) + "</html>");
        result = 0;
        coll = Facade.ConsultarPacientesEspecificos("Tipo", "MINISTERIO DE ENERGIA ELECTRICA");
        for (PacientesDTO dto : coll) {
            result = dto.getFilasAfectadas();
        }
        publicidad3.setText(publicidad3.getText() + " <font color=\"#12F419\"> <br><b><br>"
                + Integer.toString(result) + "</html>");

        Collection<ActividadesMedicasDTO> coll1 = Facade.consultarConsultaPreventiva("Consulta Preventiva Especial");
        for (ActividadesMedicasDTO dto : coll1) {
            publicidad4.setText(publicidad4.getText() + " <font color=\"#12F419\"> <br><b><br>"
                    + dto.getTotal() + "</html>");
        }
        coll1 = Facade.consultarConsultaCurativaEspecifica("TOTAL CONSULTAS CURATIVAS (CORPOELEC, COMUNIDAD Y OTROS)", "Consulta Curativa Especial Ministerio");
        for (ActividadesMedicasDTO dto : coll1) {
            publicidad5.setText(publicidad5.getText() + " <font color=\"#12F419\"> <br><b><br>"
                    + dto.getTotal() + "</html>");
        }
    }

    public int validarPaciente(String condicion, int valor) {
        int result = 0;
        Collection<PacientesDTO> collPacientes = Facade.ConsultarPacientesEspecificos(condicion, valor);
        for (PacientesDTO dto : collPacientes) {
            result = dto.getFilasAfectadas();
        }
        return result;
    }
    private void btnAdelanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdelanteActionPerformed
        DefaultComboBoxModel<String> modelo = (DefaultComboBoxModel<String>) listGenero.getModel();
        DefaultComboBoxModel<String> modelo1 = (DefaultComboBoxModel<String>) listEstadoCivil.getModel();
        DefaultComboBoxModel <String>modelo2 = (DefaultComboBoxModel<String>) listTipo.getModel();
        if (estados == 0) {
            if (entradaNombre.getText().equals("")
                    || entradaApellido.getText().equals("")
                    || entradaCedula.getText().equals("")
                    || entradaID.getText().equals("")
                    || entradaFechaNacimiento.getText().equals("")
                    || modelo.getSelectedItem().equals("GENERO")
                    || modelo1.getSelectedItem().equals("ESTADO CIVIL")
                    || modelo2.getSelectedItem().equals("TIPO")) {
                new sistema.alertas.Error(this, true, "\nTODOS LOS CAMPOS SON REQUERIDOS").setVisible(true);
            } else {
                int result = validarPaciente("Cedula", Integer.parseInt(entradaCedula.getText()));
                if (result != 0) {
                    new sistema.alertas.Error(this, true, " YA EXISTE UN PACIENTE CON ESE NUMERO DE CEDULA").setVisible(true);
                } else {
                    result = validarPaciente("ID_Paciente", Integer.parseInt(entradaID.getText()));
                    if (result != 0) {
                        new sistema.alertas.Error(this, true, "\n YA EXISTE UN PACIENTE CON ESE ID").setVisible(true);
                    } else {
                        key.iniciar(key);
                        jPanelSlider1.nextPanel(5, panelDatosFamiliares, JPanelSlider.left);
                        estados++;
                        etiquetaProgreso.setIcon(new ImageIcon(getClass().getResource("/img/icono progreso1.png")));
                        btnAtras.setEnabled(true);
                    }
                }
            }
        } else if (estados == 1) {
            modelo = (DefaultComboBoxModel<String>) listParentescoFamiliar.getModel();
            modelo1 = (DefaultComboBoxModel<String>) listGeneroFamiliar.getModel();

            int aux = agregarFamiliar();
            /*if (aux == 0 && FamiliaresDTO.getListFamiliares().isEmpty()) {
                new sistema.alertas.Error(this, true, "\nTODOS LOS CAMPOS SON REQUERIDOS").setVisible(true);
            } else*/ if (aux == 1 || (/*!FamiliaresDTO.getListFamiliares().isEmpty()
                    &&*/entradaNombreFamiliar.getText().equals("")
                    && entradaApellidoFamiliar.getText().equals("")
                    && entradaCedulaFamiliar.getText().equals("")
                    && entradaFechaNacimientoFamiliar.getText().equals("")
                    && modelo.getSelectedItem().equals("PARENTESCO")
                    && modelo1.getSelectedItem().equals("GENERO"))) {

                key.detener(key);
                jPanelSlider1.nextPanel(5, panelDatos, JPanelSlider.left);
                estados++;
                etiquetaProgreso.setIcon(new ImageIcon(getClass().getResource("/img/icono progreso2.png")));
                btnAdelante.setEnabled(false);
            } else if (aux != 2) {
                new sistema.alertas.Error(this, true, " EXISTEN CAMPOS COMPLETADOS, FINALICE EL REGISTRO ACTUAL ").setVisible(true);
            }
        }
    }//GEN-LAST:event_btnAdelanteActionPerformed

    private void btnConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConsultaMouseClicked
        etiquetaHome.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaConsulta.setFont(new Font("Bookman Old Style", 3, 18)); // NOI18N
        etiquetaPacientes.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaEstadisticas.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaHistorial.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaDocumentacion.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaAcercaDe.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18NpanelCuenta.setVisible(false);
        panelHome.setVisible(false);
        panelPacientes.setVisible(false);
        panelConsulta.setVisible(true);
        panelConfig.setVisible(false);
        panelEstadistica.setVisible(false);
        panelDocumentacion.setVisible(false);
        panelHistorial.setVisible(false);
        panelAcercaDe.setVisible(false);
        panelCuenta.setVisible(false);
        fecha();
        llenarListTipoConsulta();
        llenarListaMotivoConsulta();
        llenarListaCausaConsulta(0);
        llenarListaAccionConsulta();
        comboPacientes(listPacientes);
    }//GEN-LAST:event_btnConsultaMouseClicked

    private void btnConfigMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConfigMouseClicked
        etiquetaHome.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaConsulta.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaPacientes.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaEstadisticas.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaHistorial.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaDocumentacion.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaAcercaDe.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N panelCuenta.setVisible(false);
        panelCuenta.setVisible(false);
        panelHome.setVisible(false);
        panelPacientes.setVisible(false);
        panelConsulta.setVisible(false);
        panelConfig.setVisible(true);
        panelCuenta.setVisible(false);
        panelEstadistica.setVisible(false);
        panelHistorial.setVisible(false);
        panelDocumentacion.setVisible(false);
        panelAcercaDe.setVisible(false);
    }//GEN-LAST:event_btnConfigMouseClicked

    public void datosUser() {
        Collection<UsuariosDTO> coll = Facade.ConsultarUsuario("ID", Integer.parseInt(cedula.getText()));
        if (coll.isEmpty()) {
            coll = Facade.ConsultarUsuario("Cedula", Integer.parseInt(cedula.getText()));
        }
        for (UsuariosDTO dto : coll) {
            etiquetaUser.setText(dto.getNombre().substring(0, 1) + dto.getNombre().substring(1, dto.getNombre().length()).toLowerCase()
                    + " " + dto.getApellido().substring(0, 1) + dto.getApellido().substring(1, dto.getApellido().length()).toLowerCase()
            );
            Correo.setText(dto.getEmail());
            ID.setText("" + dto.getID());
            cedula.setText("" + dto.getCedula());
        }

        Collection<HistorialDTO> collHistorial = Facade.ConsultarHistorial();
        ArrayList<PacientesDTO> collPacientes;
        listAtendidosRecientemente.setContentType("text/html");
        listAtendidosRecientemente.setText("");
        for (HistorialDTO dto : collHistorial) {
            collPacientes = Facade.ConsultarPacientesEspecificos("ID_Paciente", dto.getID_Paciente());
            for (PacientesDTO paciente : collPacientes) {
                listAtendidosRecientemente.setText(
                        " <font> " + paciente.getNombre() + "&nbsp;"
                        + paciente.getApellido() + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
                        + dto.getFecha() + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
                        + dto.getHora() + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>  </font> "
                        + listAtendidosRecientemente.getText() + "\n"
                );
            }
        }
        collPacientes = Facade.ConsultarPacientes();
        etiquetaTotalPacientes.setText(etiquetaTotalPacientes.getText()
                + "<br>" + collPacientes.size() + "</html>");
        ArrayList<UsuariosDTO> user = Facade.ConsultarUsuario();
        etiquetaTotalUsuarios.setText(etiquetaTotalUsuarios.getText()
                + "<br>" + user.size() + "</html>");
    }
    
    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        if (estados == 2) {
            key.iniciar(key);
            jPanelSlider1.nextPanel(5, panelDatosFamiliares, JPanelSlider.right);
            estados--;
            etiquetaProgreso.setIcon(new ImageIcon(getClass().getResource("/img/icono progreso1.png")));
            btnAdelante.setEnabled(true);
        } else if (estados == 1) {
            key.detener(key);
            jPanelSlider1.nextPanel(5, panelDatosPersonales, JPanelSlider.right);
            estados--;
            etiquetaProgreso.setIcon(new ImageIcon(getClass().getResource("/img/icono progreso.png")));
            btnAtras.setEnabled(false);
        }
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btnNuevoPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoPacienteActionPerformed
        panelRegistroPacientes.setVisible(true);
        btnNuevoPaciente.setIcon(new ImageIcon(getClass().getResource("/img/btnNuevo rollover.png"))); // NOI18N;
        btnPacientesRegistrados.setIcon(new ImageIcon(getClass().getResource("/img/btn registrado.png")));
        panelPacientesRegistrados.setVisible(false);
    }//GEN-LAST:event_btnNuevoPacienteActionPerformed

    private void btnPacientesRegistradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPacientesRegistradosActionPerformed
        Collection<PacientesDTO> collPacientes = Facade.ConsultarPacientes();
        llenarTablaPacientes(collPacientes);
        panelRegistroPacientes.setVisible(false);
        btnNuevoPaciente.setIcon(new ImageIcon(getClass().getResource("/img/btnNuevo.png"))); // NOI18N;
        btnPacientesRegistrados.setIcon(new ImageIcon(getClass().getResource("/img/btn registrado rollover.png")));
        panelPacientesRegistrados.setVisible(true);
    }//GEN-LAST:event_btnPacientesRegistradosActionPerformed
    public void llenarTablaPacientes(Collection<PacientesDTO> collPacientes) {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setNumRows(0);
        collPacientes.forEach((dto) -> {
            modelo.addRow(new Object[]{
                Integer.toString(dto.getID_Paciente()), dto.getNombre(), dto.getApellido(),
                Integer.toString(dto.getCedula()), dto.getFechaDeNacimiento(), Integer.toString(dto.getEdad())
            });
        });
    }

    public void comboPacientes(JComboBox<PacientesDTO> combo) {
        combo.removeAllItems();
        PacientesDTO defecto = new PacientesDTO();
        defecto.setID_Paciente(-1);
        defecto.setNombre("SELECCIONE EL NOMBRE");
        defecto.setApellido("DEL PACIENTE");
        combo.addItem(defecto);
        Collection<PacientesDTO> collPacientes = Facade.ConsultarPacientes();
        collPacientes.forEach((dto) -> {
            combo.addItem(dto);
        });
    }

    void llenarTablaConsultasCurativas() {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable4.getModel();
        modelo.setNumRows(0);
        int alinear = 0;

        Collection<ActividadesMedicasDTO> collConsultasMedicas = Facade.consultarConsultaCurativa("Consulta Curativa Activos");
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
            alinear = dto.getTotalfilasAfectadas();
        }
        organizarTablasConsultas(jTable4, alinear, 5, 5);
        collConsultasMedicas = Facade.consultarConsultaCurativa("Consulta Curativa Especial Activos");
        modelo = (DefaultTableModel) jTable6.getModel();
        modelo.setNumRows(0);
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
        }
        collConsultasMedicas = Facade.consultarConsultaCurativa("Consulta Curativa Ministerio");
        modelo = (DefaultTableModel) jTable7.getModel();
        modelo.setNumRows(0);
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
            alinear = dto.getTotalfilasAfectadas();
        }
        organizarTablasConsultas(jTable7, alinear, 4, 5);
        collConsultasMedicas = Facade.consultarConsultaCurativa("Consulta Curativa Especial Ministerio");
        modelo = (DefaultTableModel) jTable8.getModel();
        modelo.setNumRows(0);
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
        }
        collConsultasMedicas = Facade.consultarConsultaCurativa("Resultado de Evaluacion");
        modelo = (DefaultTableModel) jTable12.getModel();
        modelo.setNumRows(0);
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
            alinear = dto.getTotalfilasAfectadas();
        }
        organizarTablasConsultas(jTable12, alinear, 2, 5);
        collConsultasMedicas = Facade.consultarConsultaCurativa("Consulta Curativa Especial");
        modelo = (DefaultTableModel) jTable15.getModel();
        modelo.setNumRows(0);
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {

            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
        }
    }

    void llenarTablaConsultasPreventivas() {
        DefaultTableModel modelo;
        int alinear = 0;
        modelo = (DefaultTableModel) jTable10.getModel();
        modelo.setNumRows(0);
        Collection<ActividadesMedicasDTO> collConsultasMedicas = Facade.consultarConsultaPreventiva("Consulta Preventiva");
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(),
                dto.getSemana4(), dto.getTotal(), dto.getPorcentaje()
            });
            alinear = dto.getTotalfilasAfectadas();

        }
        organizarTablasConsultas(jTable10, alinear, 15, 6);
        modelo = (DefaultTableModel) jTable13.getModel();
        modelo.setNumRows(0);
        collConsultasMedicas = Facade.consultarConsultaPreventiva("Consulta Preventiva Especial");
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(),
                dto.getSemana3(), dto.getSemana4(), dto.getTotal(), dto.getPorcentaje()

            });
        }

    }

    void llenarTablaRepososEstudiosReferencias() {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable17.getModel();
        modelo.setNumRows(0);
        int alinear = 0;

        Collection<ActividadesMedicasDTO> collConsultasMedicas = Facade.consultarRepososEstudiosReferencias("Reposos");
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
            alinear = dto.getTotalfilasAfectadas();
        }
        organizarTablasConsultas(jTable17, alinear, 3, 5);
        collConsultasMedicas = Facade.consultarRepososEstudiosReferencias("Estudios");
        modelo = (DefaultTableModel) jTable19.getModel();
        modelo.setNumRows(0);
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
            alinear = dto.getTotalfilasAfectadas();
        }
        organizarTablasConsultas(jTable19, alinear, 10, 5);
        collConsultasMedicas = Facade.consultarRepososEstudiosReferencias("Estudios Especiales");
        modelo = (DefaultTableModel) jTable18.getModel();
        modelo.setNumRows(0);
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
        }
        collConsultasMedicas = Facade.consultarRepososEstudiosReferencias("Referencias");
        modelo = (DefaultTableModel) jTable23.getModel();
        modelo.setNumRows(0);
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
            alinear = dto.getTotalfilasAfectadas();
        }
        organizarTablasConsultas(jTable23, alinear, 2, 5);
    }

    void llenarTablaPromocionDeLaSalud() {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable25.getModel();
        modelo.setNumRows(0);

        Collection<ActividadesMedicasDTO> collConsultasMedicas = Facade.consultarPromocionDeLaSalud("Actividades de Promocion de la salud");
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
        }
        collConsultasMedicas = Facade.consultarPromocionDeLaSalud("Actividades Ocupacionales");
        modelo = (DefaultTableModel) jTable27.getModel();
        modelo.setNumRows(0);
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
        }
    }

    void llenarTablaPsicologiaPsicoterapia() {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable29.getModel();
        modelo.setNumRows(0);
        Collection<ActividadesMedicasDTO> collConsultasMedicas = Facade.consultarPsicologiaPsicoterapia();
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            if (dto.getID() > 61 && dto.getID() <= 64) {
                modelo = (DefaultTableModel) jTable29.getModel();
                modelo.addRow(new Object[]{
                    dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
                });
            }
        }
    }

    void llenarTablaEnfermeria() {
        DefaultTableModel modelo;
        int alinear = 0;
        modelo = (DefaultTableModel) jTable33.getModel();
        modelo.setNumRows(0);
        Collection<ActividadesMedicasDTO> collConsultasMedicas = Facade.consultarEnfermeria();
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            modelo.addRow(new Object[]{
                dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
            });
            alinear = dto.getTotalfilasAfectadas();
        }
        organizarTablasConsultas(jTable33, alinear, 14, 5);
    }

    void llenarTablaFisioterapia() {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable36.getModel();
        modelo.setNumRows(0);
        Collection<ActividadesMedicasDTO> collConsultasMedicas = Facade.consultarFisioterapia();
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            if (dto.getID() > 78 && dto.getID() <= 81) {
                modelo = (DefaultTableModel) jTable36.getModel();
                modelo.addRow(new Object[]{
                    dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
                });
            }
        }
    }

    void llenarTablaOdontologia() {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable38.getModel();
        modelo.setNumRows(0);
        modelo = (DefaultTableModel) jTable40.getModel();
        modelo.setNumRows(0);
        Collection<ActividadesMedicasDTO> collConsultasMedicas = Facade.consultarOdontologia();
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            if (dto.getID() > 81 && dto.getID() <= 88) {
                modelo = (DefaultTableModel) jTable38.getModel();
                modelo.addRow(new Object[]{
                    dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
                });
            } else if (dto.getID() <= 94) {
                modelo = (DefaultTableModel) jTable40.getModel();
                modelo.addRow(new Object[]{
                    dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
                });
            }
        }
    }

    void llenarTablaNutricionYDietetica() {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable42.getModel();
        modelo.setNumRows(0);
        Collection<ActividadesMedicasDTO> collConsultasMedicas = Facade.consultarNutricion();
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            if (dto.getID() > 94 && dto.getID() <= 97) {
                modelo = (DefaultTableModel) jTable42.getModel();
                modelo.addRow(new Object[]{
                    dto.getActividad(), dto.getSemana1(), dto.getSemana2(), dto.getSemana3(), dto.getSemana4(), dto.getTotal()
                });
            }
        }
    }

    void organizarTablasConsultas(JTable table, int alinear, int capac, int column) {
        PersonalizarTabla personalizar = (PersonalizarTabla) Instancia.getInstancia("util.PersonalizarTabla");
        if (alinear > capac) {
            if (column == 5) {
                alinear = 58;
            } else {
                alinear = 55;
            }
        } else {
            alinear = 75;
        }
        personalizar.personalizarTabla(table, alinear, column);
    }

    void organizarTablasDeEnfermedades(JTable encabezadoEnfermedad, JTable edades, JTable generos, JTable datos, int alinear) {
        PersonalizarTabla personalizar = (PersonalizarTabla) Instancia.getInstancia("util.PersonalizarTabla");
        personalizar.personalizarTabla(encabezadoEnfermedad, 180, 1);
        personalizar.personalizarTabla(encabezadoEnfermedad, 30, 0);
        personalizar.personalizarTabla(edades, 74, 0);
        personalizar.personalizarTabla(edades, 75, 1);
        personalizar.personalizarTabla(edades, 75, 2);
        personalizar.personalizarTabla(edades, 75, 3);
        personalizar.personalizarTabla(edades, 75, 4);
        personalizar.personalizarTabla(edades, 103, 5);
        personalizar.personalizarTabla(generos, 102, 10);
        personalizar.personalizarTabla(generos, 102, 11);
        personalizar.personalizarTabla(datos, 40, 1, 0, "texto");
        personalizar.personalizarTabla(datos, 40, 2, 1, "texto");
        personalizar.personalizarTabla(datos, 304, 1);
        personalizar.personalizarTabla(datos, 40, 15, 2, "numerico");
        personalizar.personalizarTabla(datos, 102, 12);
        personalizar.personalizarTabla(datos, 102, 13);
        if (alinear > 15) {
            alinear = 75;
        } else {
            alinear = 105;
        }
        personalizar.personalizarTabla(datos, alinear, 14);

    }

    void llenarTablaEnfermedadesInfecciosasYParasitarias() {
        DefaultTableModel modelo;
        int x = 0;
        modelo = (DefaultTableModel) jTable47.getModel();
        modelo.setNumRows(0);
        Collection<EnfermedadesDTO> collConsultasEnfermedades = Facade.consultarEnfermedadesInfecciosasYParasitarias();
        for (EnfermedadesDTO dto : collConsultasEnfermedades) {
            x++;
            modelo = (DefaultTableModel) jTable47.getModel();
            modelo.addRow(new Object[]{
                Integer.toString(x), dto.getNombre(), dto.getHombresMenoresDe25Años(),
                dto.getMujeresMenoresDe25Años(),
                dto.getHombres25a44Años(), dto.getMujeres25a44Años(), dto.getHombres45a59Años(),
                dto.getMujeres45a59Años(), dto.getHombres60a64Años(), dto.getMujeres60a64Años(),
                dto.getHombres65AñosYMas(), dto.getMujeres65AñosYMas(),
                dto.getTotalHombres(), dto.getTotalMujeres(), dto.getTotalGeneral()
            });
        }
        //JOptionPane.showMessageDialog(null, alinear);

        organizarTablasDeEnfermedades(jTable46, jTable48, jTable50, jTable47, x);
    }

    void llenarTablaNeoplasias() {
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) jTable54.getModel();
        modelo.setNumRows(0);
        int alinear = 0;
        int x = 0;
        Collection<EnfermedadesDTO> collConsultasEnfermedades = Facade.consultarNeoplasias();
        for (EnfermedadesDTO dto : collConsultasEnfermedades) {
            x++;
            modelo = (DefaultTableModel) jTable54.getModel();
            modelo.addRow(new Object[]{
                Integer.toString(x), dto.getNombre(), dto.getHombresMenoresDe25Años(),
                dto.getMujeresMenoresDe25Años(),
                dto.getHombres25a44Años(), dto.getMujeres25a44Años(), dto.getHombres45a59Años(),
                dto.getMujeres45a59Años(), dto.getHombres60a64Años(), dto.getMujeres60a64Años(),
                dto.getHombres65AñosYMas(), dto.getMujeres65AñosYMas(),
                dto.getTotalHombres(), dto.getTotalMujeres(), dto.getTotalGeneral()
            });
            alinear = dto.getTotalFilasAfectadas();
        }
        organizarTablasDeEnfermedades(jTable51, jTable52, jTable53, jTable54, alinear);
    }

    public void mostrarTablas() {
        switch (nivelesTablas) {
            case 0:
                llenarTablaConsultasPreventivas();
                break;
            case 1:
                llenarTablaConsultasCurativas();
                break;
            case 2:
                llenarTablaRepososEstudiosReferencias();
                break;
            case 3:
                llenarTablaPromocionDeLaSalud();
                llenarTablaPsicologiaPsicoterapia();
                break;
            case 4:
                llenarTablaEnfermeria();
                llenarTablaFisioterapia();
                break;
            case 5:
                llenarTablaOdontologia();
                llenarTablaNutricionYDietetica();
                break;
            case 6:
                llenarTablaEnfermedadesInfecciosasYParasitarias();
                break;
            case 7:
                llenarTablaNeoplasias();
                break;
            default:
                break;
        }
    }

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        etiquetaHome.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaConsulta.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaPacientes.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaEstadisticas.setFont(new Font("Bookman Old Style", 3, 18)); // NOI18N
        etiquetaHistorial.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaDocumentacion.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaAcercaDe.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N panelCuenta.setVisible(false);
        panelHome.setVisible(false);
        panelPacientes.setVisible(false);
        panelConsulta.setVisible(false);
        panelConfig.setVisible(false);
        panelEstadistica.setVisible(true);
        panelCuenta.setVisible(false);
        panelHistorial.setVisible(false);
        panelAcercaDe.setVisible(false);
        panelDocumentacion.setVisible(false);
        mostrarTablas();
        fecha();
    }//GEN-LAST:event_jButton10ActionPerformed

    public ArrayList<ActividadesMedicasDTO> lista() {
        ArrayList<ActividadesMedicasDTO> list = new ArrayList<>();
        ArrayList<String> repet = new ArrayList<>();
        Collection<ActividadesMedicasDTO> aux;
        if (listPacientes.getItemAt(listPacientes.getSelectedIndex()).getTipo().equals("ACTIVO")
                || listPacientes.getItemAt(listPacientes.getSelectedIndex()).getTipo().equals("JUBILADO")) {
            aux = Facade.consultarConsultaCurativa("Consulta Curativa Activos");
        } else {
            aux = Facade.consultarConsultaCurativa("Consulta Curativa Ministerio");
        }
        for (ActividadesMedicasDTO dto : aux) {
            if (dto.getActividad().contains("ACTIVOS:")) {
                dto.setActividad(dto.getActividad().replace("ACTIVOS: ", ""));
            }
            if (dto.getActividad().contains("MINISTERIO DE ENERGIA ELECTRICA:")) {
                dto.setActividad(dto.getActividad().replace("MINISTERIO DE ENERGIA ELECTRICA: ", ""));
            }
            if (dto.getActividad().contains("JUBILADOS")) {
                dto.setActividad(dto.getActividad().replace("JUBILADOS: ", ""));
            }
            if (repet.contains(dto.getActividad())) {
                continue;
            }
            repet.add(dto.getActividad());
            list.add(dto);
        }
        return list;
    }

    public void llenarReposo() {
        DefaultComboBoxModel<String> modelo;
        modelo = (DefaultComboBoxModel<String>) listAccionConsulta.getModel();
        Collection<ActividadesMedicasDTO> collConsultasMedicas = Facade.consultarRepososEstudiosReferencias("Reposos");
        for (ActividadesMedicasDTO dto : collConsultasMedicas) {
            if (dto.getActividad().equals("Nº REPOSOS")
                    || dto.getActividad().equals("DIAS DE REPOSO")) {
                modelo.addElement("REPOSO");
                break;
            }
        }
    }

    public void llenarListTipoConsulta() {
        DefaultComboBoxModel<String> modelo;
        modelo = (DefaultComboBoxModel<String>) listTipoConsulta.getModel();
        modelo.removeAllElements();
        if (listPacientes.getSelectedIndex() < 1) {
            modelo.addElement("SELECCIONE PRIMERO EL NOMBRE DEL PACIENTE");
        } else {
            modelo.addElement("SELECCIONE EL TIPO DE CONSULTA");
            modelo.addElement("CONSULTA PREVENTIVA");
            modelo.addElement("CONSULTA CURATIVA");
        }
    }

    public void llenarListaMotivoConsulta() {
        //JOptionPane.showMessageDialog(null,EscucharTeclas.getTipo());
        DefaultComboBoxModel<String> modelo;
        modelo = (DefaultComboBoxModel<String>) listTipoConsulta.getModel();
        etiquetaAccion.setVisible(false);
        listAccionConsulta.setVisible(false);
        btnAñadirAccion.setVisible(false);
        etiquetaResultadoConsulta.setVisible(false);
        listResultadoConsulta.setVisible(false);
        etiquetaEnfermedades.setLocation(40, 190);
        listEnfermedades.setLocation(40, 210);
        btnAñadirEnfermedad.setLocation(810, 208);
        btnAñadirResultado.setVisible(false);
        etiquetaDiasReposo.setVisible(false);
        entradaDiasReposo.setVisible(false);
        if (listTipoConsulta.getSelectedIndex() > 0) {
            modelo = (DefaultComboBoxModel<String>) listMotivoConsulta.getModel();
            modelo.removeAllElements();
            modelo.addElement("SELECCIONE EL MOTIVO DE LA CONSULTA");
            Collection<ActividadesMedicasDTO> collConsultasMedicas = null;
            if (listTipoConsulta.getSelectedItem().equals("CONSULTA PREVENTIVA")) {
                collConsultasMedicas = Facade.consultarConsultaPreventiva("Consulta Preventiva");
            } else {
                modelo.addElement("ACTIVIDADES DE ENFERMERIA");
                collConsultasMedicas = lista();
                etiquetaEnfermedades.setLocation(40, 165);
                listEnfermedades.setLocation(40, 185);
                btnAñadirEnfermedad.setLocation(810, 182);
                etiquetaAccion.setVisible(true);
                listAccionConsulta.setVisible(true);
                btnAñadirAccion.setVisible(true);
                etiquetaResultadoConsulta.setVisible(true);
                listResultadoConsulta.setVisible(true);
                btnAñadirResultado.setVisible(true);
            }
            for (ActividadesMedicasDTO dto : collConsultasMedicas) {
                modelo.addElement(dto.getActividad());
            }
        } else {
            modelo = (DefaultComboBoxModel<String>) listMotivoConsulta.getModel();
            modelo.removeAllElements();
            modelo.addElement("SELECCIONE PRIMERO EL TIPO DE CONSULTA");
        }
    }

    public void llenarListaCausaConsulta(int nuevo) {
        final DefaultComboBoxModel <String> modelo;
        modelo = (DefaultComboBoxModel<String>) listEnfermedades.getModel();
        int aux = modelo.getSize();
        if (aux < 2 || listTipoConsulta.getSelectedIndex() == 0
                || listMotivoConsulta.getSelectedIndex() == 0
                || listTipoConsulta.getSelectedIndex() == 2
                || nuevo == 1) {
            if (listMotivoConsulta.getSelectedIndex() > 0) {
                modelo.removeAllElements();
                Collection<ActividadesMedicasDTO> collConsultasMedicas = null;
                if (listTipoConsulta.getSelectedItem().equals("CONSULTA PREVENTIVA")) {
                    collConsultasMedicas = Facade.consultarRepososEstudiosReferencias("Estudios");
                    etiquetaEnfermedades.setText("Seleccione la accion a tomar en la consulta");
                    modelo.addElement("SELECCIONE LA ACCION A TOMAR EN LA CONSULTA");
                } else if (listTipoConsulta.getSelectedItem().equals("CONSULTA CURATIVA")) {
                    etiquetaEnfermedades.setText("Seleccione la causa de la consulta");
                    modelo.addElement("SELECCIONE LA CAUSA DE LA CONSULTA");
                    if (listMotivoConsulta.getSelectedItem().equals("ACTIVIDADES DE ENFERMERIA")) {
                        collConsultasMedicas = Facade.consultarEnfermeria();
                    } else {
                        ArrayList<EnfermedadesDTO> coll = new ArrayList<>();
                        coll = Facade.consultarEnfermedadesInfecciosasYParasitarias();
                        for (int i = 0; i < 2; i++) {
                            for (EnfermedadesDTO dto : coll) {
                                modelo.addElement(dto.getNombre());
                            }
                            coll = Facade.consultarNeoplasias();
                        }
                    }
                }
                if (collConsultasMedicas != null) {
                    collConsultasMedicas.forEach((dto) -> {
                        modelo.addElement(dto.getActividad());
                    });
                }
            } else {
                modelo.removeAllElements();
                modelo.addElement("SELECCIONE PRIMERO EL MOTIVO DE LA CONSULTA");
                if (listTipoConsulta.getSelectedIndex() == 1) {
                    etiquetaEnfermedades.setText("Seleccione la accion a tomar en la consulta");
                } else if (listTipoConsulta.getSelectedIndex() == 2) {
                    etiquetaEnfermedades.setText("Seleccione la causa de la consulta");
                }
            }
        }
    }

    public void llenarListaAccionConsulta() {
        //JOptionPane.showMessageDialog(null,"wepa");
        final DefaultComboBoxModel<String> modelo;
        DefaultComboBoxModel<String> modelo1;
        modelo = (DefaultComboBoxModel<String>) listAccionConsulta.getModel();
        modelo1 = (DefaultComboBoxModel<String>) listResultadoConsulta.getModel();
        int aux = modelo.getSize();
        if (aux < 2 || listEnfermedades.getSelectedIndex() == 0) {
            if (listEnfermedades.getSelectedIndex() > 0 && !listEnfermedades.getSelectedItem().equals("SELECCIONE EL RESULTADO DE LA CONSULTA")
                    && !listEnfermedades.getSelectedItem().equals("SELECCIONE PRIMERO EL MOTIVO DE CONSULTA")) {
                modelo.removeAllElements();
                modelo.addElement("SELECCIONE LA ACCION A TOMAR EN LA CONSULTA");
                Collection<ActividadesMedicasDTO> collConsultasMedicas;
                llenarReposo();
                collConsultasMedicas = Facade.consultarRepososEstudiosReferencias("Referencias");
                for (ActividadesMedicasDTO dto : collConsultasMedicas) {
                    modelo.addElement(dto.getActividad());
                }
                modelo1.removeAllElements();
                modelo1.addElement("SELECCIONE EL RESULTADO DE LA CONSULTA");
                collConsultasMedicas = Facade.consultarConsultaCurativa("Resultado de Evaluacion");
                for (ActividadesMedicasDTO dto : collConsultasMedicas) {
                    modelo1.addElement(dto.getActividad());
                }
            } else {
                modelo.removeAllElements();
                modelo.addElement("SELECCIONE PRIMERO LA CAUSA DE LA CONSULTA");
                modelo1.removeAllElements();
                modelo1.addElement("SELECCIONE PRIMERO LA CAUSA DE LA CONSULTA");
            }
        }
    }

    private void btnAdelante2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdelante2ActionPerformed
        switch (nivelesTablas) {
            case 0:
                jPanelSlider3.nextPanel(2, panelTabla2, JPanelSlider.left);
                nivelesTablas++;
                mostrarTablas();
                etiquetaProgreso2.setText("2/8");
                btnAtras2.setEnabled(true);
                break;
            case 1:
                jPanelSlider3.nextPanel(2, panelTabla3, JPanelSlider.left);
                nivelesTablas++;
                mostrarTablas();
                etiquetaProgreso2.setText("3/8");
                break;
            case 2:
                jPanelSlider3.nextPanel(2, panelTabla4, JPanelSlider.left);
                nivelesTablas++;
                mostrarTablas();
                etiquetaProgreso2.setText("4/8");
                break;
            case 3:
                jPanelSlider3.nextPanel(2, panelTabla5, JPanelSlider.left);
                nivelesTablas++;
                mostrarTablas();
                etiquetaProgreso2.setText("5/8");
                break;
            case 4:
                jPanelSlider3.nextPanel(2, panelTabla6, JPanelSlider.left);
                nivelesTablas++;
                mostrarTablas();
                etiquetaProgreso2.setText("6/8");
                break;
            case 5:
                jPanelSlider3.nextPanel(2, panelTabla7, JPanelSlider.left);
                nivelesTablas++;
                mostrarTablas();
                etiquetaProgreso2.setText("7/8");
                break;
            case 6:
                jPanelSlider3.nextPanel(2, panelTabla8, JPanelSlider.left);
                nivelesTablas++;
                mostrarTablas();
                etiquetaProgreso2.setText("8/8");
                btnAdelante2.setEnabled(false);
                break;
            /*case 7:
                jPanelSlider3.nextPanel(1, panelTabla9, JPanelSlider.left);
                nivelesTablas++;
                btnAdelante2.setEnabled(false);
                mostrarTablas();
                break;*/
            default:
                break;
        }

    }//GEN-LAST:event_btnAdelante2ActionPerformed

    private void btnAtras2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtras2ActionPerformed
        switch (nivelesTablas) {
            case 8:
                jPanelSlider3.nextPanel(2, panelTabla8, JPanelSlider.right);
                nivelesTablas--;
                mostrarTablas();
                btnAdelante2.setEnabled(true);
                break;
            case 7:
                jPanelSlider3.nextPanel(2, panelTabla7, JPanelSlider.right);
                nivelesTablas--;
                mostrarTablas();
                etiquetaProgreso2.setText("7/8");
                btnAdelante2.setEnabled(true);
                break;
            case 6:
                jPanelSlider3.nextPanel(2, panelTabla6, JPanelSlider.right);
                nivelesTablas--;
                mostrarTablas();
                etiquetaProgreso2.setText("6/8");
                break;
            case 5:
                jPanelSlider3.nextPanel(2, panelTabla5, JPanelSlider.right);
                nivelesTablas--;
                mostrarTablas();
                etiquetaProgreso2.setText("5/8");
                break;
            case 4:
                jPanelSlider3.nextPanel(2, panelTabla4, JPanelSlider.right);
                nivelesTablas--;
                mostrarTablas();
                etiquetaProgreso2.setText("4/8");
                break;
            case 3:
                jPanelSlider3.nextPanel(2, panelTabla3, JPanelSlider.right);
                nivelesTablas--;
                mostrarTablas();
                etiquetaProgreso2.setText("3/8");
                break;
            case 2:
                jPanelSlider3.nextPanel(2, panelTabla2, JPanelSlider.right);
                nivelesTablas--;
                mostrarTablas();
                etiquetaProgreso2.setText("2/8");
                break;
            case 1:
                jPanelSlider3.nextPanel(2, panelTabla1, JPanelSlider.right);
                nivelesTablas--;
                mostrarTablas();
                etiquetaProgreso2.setText("1/8");
                btnAtras2.setEnabled(false);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_btnAtras2ActionPerformed

    private void listTipoConsultaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listTipoConsultaItemStateChanged
        llenarListaMotivoConsulta();
    }//GEN-LAST:event_listTipoConsultaItemStateChanged

    private void btnAñadirConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirConsultaActionPerformed
        DefaultComboBoxModel<String> modelo;
        Añadir v;
        modelo = (DefaultComboBoxModel<String>) listTipoConsulta.getModel();
        if (modelo.getSelectedItem().equals("CONSULTA PREVENTIVA")) {
            v = new Añadir(this, true, "Añadir Consulta Preventiva", "Nombre de la consulta preventiva");
            v.setVisible(true);
            if (Añadir.continuar) {
                llenarListaMotivoConsulta();
            }
        } else if (modelo.getSelectedItem().equals("CONSULTA CURATIVA")) {
            v = new Añadir(this, true, "Añadir Consulta Curativa", "Nombre de la consulta curativa");
            v.setVisible(true);
            if (Añadir.continuar) {
                llenarListaMotivoConsulta();
            }
        } else {
            new sistema.alertas.Error(this, true, "DEBE SELECCIONAR PRIMERO\n EL TIPO DE CONSULTA").setVisible(true);
        }
    }//GEN-LAST:event_btnAñadirConsultaActionPerformed
    private String obtenerFecha() {
        Calendar calendario = new GregorianCalendar();
        String dia;
        String año;
        String mes;

        if (calendario.get(Calendar.DATE) < 10) {
            dia = "0" + Integer.toString(calendario.get(Calendar.DATE));
        } else {
            dia = Integer.toString(calendario.get(Calendar.DATE));
        }
        if (calendario.get(Calendar.MONTH) < 10) {
            mes = "0" + Integer.toString(calendario.get(Calendar.MONTH) + 1);
        } else {
            mes = Integer.toString(calendario.get(Calendar.MONTH) + 1);
        }

        if (calendario.get(Calendar.YEAR) < 10) {
            año = "0" + Integer.toString(calendario.get(Calendar.YEAR));
        } else {
            año = Integer.toString(calendario.get(Calendar.YEAR));
        }

        String Fecha = dia + "-" + mes + "-" + año;
        return Fecha;
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JFileChooser chooser = abrirChooser("Archivos de excel", "xls", "GUARDAR Archivo");
        String ruta;
        InputStream inp;
        HSSFWorkbook wb;
        FileOutputStream fileOut;
        llenarTablaConsultasPreventivas();
        llenarTablaConsultasCurativas();
        llenarTablaRepososEstudiosReferencias();
        llenarTablaPromocionDeLaSalud();
        llenarTablaPsicologiaPsicoterapia();
        llenarTablaEnfermeria();
        llenarTablaFisioterapia();
        llenarTablaOdontologia();
        llenarTablaNutricionYDietetica();
        llenarTablaEnfermedadesInfecciosasYParasitarias();
        llenarTablaNeoplasias();

        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            ruta = chooser.getSelectedFile().toString();
            if (!ruta.endsWith(".xls")) {
                ruta = chooser.getSelectedFile().toString().concat(".xls");
            }
            try {
                File archivoXLS = new File(ruta);
                if (archivoXLS.exists()) {
                    archivoXLS.delete();
                }
                int numRow = jTable10.getRowCount() + jTable13.getRowCount();

                clsExportarExcel.exportarExcel(jTable9, 1, ruta, "Actividades Medicas", archivoXLS);
                ExportarExcelCostado.exportarExcel(jTable14, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable10, 1, ruta, jTable10.getRowCount(), "normal", 1, true, 0, 0);
                ExportarExcelContenido.exportarExcel(jTable13, 1, ruta, jTable13.getRowCount() - 1, "especial", 0, true, 0, 0);

                numRow = jTable4.getRowCount() + jTable6.getRowCount()
                        + jTable7.getRowCount() + jTable8.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable5, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable4, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);
                numRow = jTable6.getRowCount() + jTable7.getRowCount() + jTable8.getRowCount();
                ExportarExcelContenido.exportarExcel(jTable6, 1, ruta, numRow - 1, "especial", 0, false, 0, 0);
                numRow = jTable7.getRowCount() + jTable8.getRowCount();
                ExportarExcelContenido.exportarExcel(jTable7, 1, ruta, numRow - 1, "normal", 0, false, 0, 0);
                ExportarExcelContenido.exportarExcel(jTable8, 1, ruta, jTable8.getRowCount() - 1, "especial", 0, false, 0, 0);
                ExportarExcelContenido.exportarExcel(jTable15, 0, ruta, jTable15.getRowCount() - 1, "especial", 0, false, 0, 0);

                numRow = jTable12.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable11, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable12, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                ExportarExcelEncabezado.exportarExcel(jTable16, 1, ruta, 0, 0, 0);
                numRow = jTable17.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable21, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable17, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                numRow = jTable18.getRowCount() + jTable19.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable22, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable19, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);
                ExportarExcelContenido.exportarExcel(jTable18, 1, ruta, jTable18.getRowCount() - 1, "especial", 0, false, 0, 0);

                numRow = jTable23.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable24, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable23, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                ExportarExcelEncabezado.exportarExcel(jTable20, 1, ruta, 0, 0, 0);
                numRow = jTable25.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable28, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable25, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                numRow = jTable27.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable31, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable27, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                ExportarExcelEncabezado.exportarExcel(jTable26, 1, ruta, 0, 0, 0);
                numRow = jTable29.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable30, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable29, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                ExportarExcelEncabezado.exportarExcel(jTable32, 1, ruta, 0, 0, 0);
                numRow = jTable33.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable35, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable33, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                ExportarExcelEncabezado.exportarExcel(jTable39, 1, ruta, 0, 0, 0);
                numRow = jTable36.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable37, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable36, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                ExportarExcelEncabezado.exportarExcel(jTable34, 1, ruta, 0, 0, 0);
                numRow = jTable38.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable41, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable38, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                numRow = jTable40.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable44, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable40, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                ExportarExcelEncabezado.exportarExcel(jTable45, 1, ruta, 0, 0, 0);
                numRow = jTable42.getRowCount();
                ExportarExcelCostado.exportarExcel(jTable43, numRow, ruta, 0, 0, "normal");
                ExportarExcelContenido.exportarExcel(jTable42, 1, ruta, numRow - 1, "normal", 1, false, 0, 0);

                inp = new FileInputStream(ruta);
                wb = new HSSFWorkbook(inp);
                clsExportarExcel.insertarImagen(wb, wb.getSheetAt(0));
                fileOut = new FileOutputStream(archivoXLS);
                wb.write(fileOut);
                fileOut.close();

                clsExportarExcel.exportarExcel(ruta, "Enfermedades", archivoXLS);

                ExportarExcelCostado.exportarExcel(jTable46, 2, ruta, 1, 0, "especial");
                ExportarExcelEncabezado.exportarExcel(jTable48, 0, ruta, 1, 1, 1);
                ExportarExcelEncabezado.exportarExcel(jTable50, 0, ruta, 0, 1, 2);
                ExportarExcelCostado.exportarExcel(jTable49, 2, ruta, 1, 1, "especial");
                ExportarExcelContenido.exportarExcel(jTable47, 0, ruta, jTable47.getRowCount(), "normal", 0, false, 1, 1);

                ExportarExcelEncabezado.exportarExcel(jTable51, 0, ruta, 0, 1, 3);
                ExportarExcelContenido.exportarExcel(jTable54, 0, ruta, jTable54.getRowCount(), "normal", 0, false, 1, 1);
                setLookAndFeel();
                inp = new FileInputStream(ruta);
                wb = new HSSFWorkbook(inp);
                clsExportarExcel.insertarImagen(wb, wb.getSheetAt(1));
                fileOut = new FileOutputStream(archivoXLS);
                wb.write(fileOut);
                fileOut.close();
                Desktop.getDesktop().open(archivoXLS);

            } catch (IOException ex) {
            }
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        JFileChooser fileChooser = abrirChooser("Archivos DAT (*.dat)", "dat", "GUARDAR RESPALDO");
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            setLookAndFeel();
            String path = fileChooser.getSelectedFile().toString();
            int c = path.indexOf('(');
            int d = path.indexOf(')');
            if (path.endsWith(".dat")) {
                if (c < 0 && d < 0) {
                    path = path.substring(0, path.length() - 4);
                    path = path.concat(" (" + obtenerFecha() + ")" + ".dat");
                }
            } else {
                if (c < 0 && d < 0) {
                    path = fileChooser.getSelectedFile().toString().concat(" (" + obtenerFecha() + ")" + ".dat");
                } else {
                    path = fileChooser.getSelectedFile().toString().concat(".dat");
                }
            }

            File existe = new File(path);
            if (existe.exists()) {
                Advertencia a = new Advertencia(this, true, "YA EXISTE UN RESPALDO CON ESE NOMBRE ¿DESEA REEMPLAZARLO?");
                a.setVisible(true);
                if (Advertencia.continuar) {
                    new cargarRestore(this, "crear");
                    RespaldarYRestaurarBD.crearRespaldo(path, true);
                }
            } else {
                new cargarRestore(this, "crear");
                RespaldarYRestaurarBD.crearRespaldo(path, true);
                //new Respaldo(this, true, "crear").setVisible(true);
            }
        }
        setLookAndFeel();
    }//GEN-LAST:event_jButton17ActionPerformed
    public void setLookAndFeel() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (!"Nimbus".equals(info.getName())) {
                } else {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public JFileChooser abrirChooser(String filtro, String extension, String tittle) {
        try {
            UIManager.setLookAndFeel("de.javasoft.plaf.synthetica.SyntheticaBlackEyeLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(filtro, extension);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(filter);
        fileChooser.setDialogTitle(tittle);
        fileChooser.setLocation(500, 250);
        return fileChooser;
    }

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        JFileChooser fileChooser = abrirChooser("Archivos DAT (*.dat)", "dat", "SELECCIONAR RESPALDO");
        File existe;
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            setLookAndFeel();
            existe = fileChooser.getSelectedFile();
            if (existe.exists()) {
                // String toFile = "C:\\Users\\Administrador\\Documents\\NetBeansProjects\\sistema medico\\bdMedica.db";
                Advertencia a = new Advertencia(this, true, "HAS SELECCIONADO UN RESPALDO Y LA APLICACION "
                        + "SE REINICIARA AL TERMINAR DE RESTAURAR LA BASE DE DATOS. "
                        + "SE RECOMIENDA QUE HAGA UN RESPALDO ANTES DE CONTINUAR ");
                a.setVisible(true);
                if (Advertencia.continuar) {
                    
                    RespaldarYRestaurarBD.restaurar(existe.toString());
                    new cargarRestore(this, "cargar");
                }
            } else {
                new sistema.alertas.Error(this, true, "ARCHIVO NO ENCONTRADO").setVisible(true);
            }
        }
        setLookAndFeel();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        new ConectarBD(this, true).setVisible(true);
        //if(ConectarBD.continuar)
        //Fade.JFrameFadeOut(1f, 0f, 0.2f, 50, this, Fade.DISPOSE);
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        etiquetaHome.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaConsulta.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaPacientes.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaEstadisticas.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaHistorial.setFont(new Font("Bookman Old Style", 3, 18)); // NOI18N
        etiquetaDocumentacion.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaAcercaDe.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        panelHistorial.setVisible(true);
        panelCuenta.setVisible(false);
        panelHome.setVisible(false);
        panelPacientes.setVisible(false);
        panelConsulta.setVisible(false);
        panelConfig.setVisible(false);
        panelEstadistica.setVisible(false);
        panelDocumentacion.setVisible(false);
        panelAcercaDe.setVisible(false);
        comboPacientes(listPacientes1);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

    }//GEN-LAST:event_btnEliminarActionPerformed

   

    private int agregarFamiliar() {

        DefaultComboBoxModel <String> modelo = (DefaultComboBoxModel<String>) listParentescoFamiliar.getModel();
        DefaultComboBoxModel <String>modelo1 = (DefaultComboBoxModel<String>) listGeneroFamiliar.getModel();
        int retorno = 0;
        if (entradaNombreFamiliar.getText().equals("")
                || entradaApellidoFamiliar.getText().equals("")
                || entradaCedulaFamiliar.getText().equals("")
                || entradaFechaNacimientoFamiliar.getText().equals("")
                || modelo.getSelectedItem().equals("PARENTESCO")
                || modelo1.getSelectedItem().equals("GENERO")) {
            retorno = 0;
        } else {
            FamiliaresDTO Familiar;// = (FamiliaresDTO) Instancia.getInstancia("medico.FamiliaresDTO");
            Familiar = new FamiliaresDTO();
            Familiar.setNombre(entradaNombreFamiliar.getText().toUpperCase());
            Familiar.setApellido(entradaApellidoFamiliar.getText().toUpperCase());
            Familiar.setCedula(Integer.parseInt(entradaCedulaFamiliar.getText()));
            Familiar.setFechaDeNacimiento(entradaFechaNacimientoFamiliar.getText().toUpperCase());
            Familiar.setEdad(CalcularEdad.convertir(entradaFechaNacimientoFamiliar.getText()));
            Familiar.setParentesco(modelo.getSelectedItem().toString());
            Familiar.setGenero(modelo1.getSelectedItem().toString());
            Familiar.setID_Paciente(Integer.parseInt(entradaID.getText()));
            int id = FamiliaresDTO.getListFamiliares().size() - cantFamiliares;
            if (cantFamiliares != 0) {
                JOptionPane.showMessageDialog(null, "si hay familiar");
                for (FamiliaresDTO dto : FamiliaresDTO.getListFamiliares()) {
                    FamiliaresDTO aux = FamiliaresDTO.getListFamiliares().get(id);
                    if (entradaCedulaFamiliar.getText().equals(Integer.toString(dto.getCedula()))
                            && !entradaCedulaFamiliar.getText().equals(Integer.toString(aux.getCedula()))) {
                        new sistema.alertas.Error(this, true, "YA EXISTE UN FAMILIAR CON ESE NUMERO DE CEDULA").setVisible(true);
                        retorno = 2;
                    } else if ((dto.getParentesco().equals("MADRE") && modelo.getSelectedItem().equals("MADRE")
                            && !modelo.getSelectedItem().equals(aux.getParentesco()))
                            || (dto.getParentesco().equals("PADRE") && modelo.getSelectedItem().equals("PADRE")
                            && !modelo.getSelectedItem().equals(aux.getParentesco()))) {
                        new sistema.alertas.Error(this, true, " YA EXISTE UN FAMILIAR CON ESA RELACION DE PARENTESCO").setVisible(true);
                        retorno = 2;
                    }
                }
                if (retorno != 2) {
                    FamiliaresDTO.getListFamiliares().set(id, Familiar);
                    retorno = 1;
                }
            } else {
                for (FamiliaresDTO dto : FamiliaresDTO.getListFamiliares()) {
                    JOptionPane.showMessageDialog(null, entradaCedulaFamiliar.getText() + " " + dto.getCedula());
                    if (entradaCedulaFamiliar.getText().equals(Integer.toString(dto.getCedula()))) {
                        new sistema.alertas.Error(this, true, "YA EXISTE UN FAMILIAR CON ESE NUMERO DE CEDULA").setVisible(true);
                        retorno = 2;
                    } else if ((dto.getParentesco().equals("MADRE") && modelo.getSelectedItem().equals("MADRE"))
                            || (dto.getParentesco().equals("PADRE") && modelo.getSelectedItem().equals("PADRE"))) {
                        new sistema.alertas.Error(this, true, "YA EXISTE UN FAMILIAR CON ESA RELACION DE PARENTESCO").setVisible(true);
                        retorno = 2;
                    }
                }
                if (retorno != 2) {
                    FamiliaresDTO.AñadirFamiliares(Familiar);
                    cantFamiliares = cantFamiliares + 1;
                    retorno = 1;
                }
            }
        }
        for (FamiliaresDTO dto : FamiliaresDTO.getListFamiliares()) {
            System.out.println(dto.getCedula());
        }
        return retorno;
    }

    class KeyUniversal implements NativeKeyListener {

        /* Key Pressed */
        @Override
        public void nativeKeyPressed(NativeKeyEvent e) {
            DefaultComboBoxModel<String> modelo = (DefaultComboBoxModel<String>) listParentescoFamiliar.getModel();
            DefaultComboBoxModel <String>modelo1 = (DefaultComboBoxModel<String>) listGeneroFamiliar.getModel();
            FamiliaresDTO Familiar = (FamiliaresDTO) Instancia.getInstancia("database.FamiliaresDTO");
            if (e.getKeyCode() == NativeKeyEvent.VK_F5) {
                if (FamiliaresDTO.getListFamiliares().size() - (cantFamiliares + 1) >= 0) {
                    cantFamiliares++;
                    //JOptionPane.showMessageDialog(null, cantFamiliares);
                    FamiliaresDTO dto = FamiliaresDTO.getListFamiliares()
                            .get(FamiliaresDTO.getListFamiliares().size() - cantFamiliares);
                    Familiar.setID(FamiliaresDTO.getListFamiliares().size() - cantFamiliares);
                    entradaNombreFamiliar.requestFocus();
                    entradaNombreFamiliar.setText(dto.getNombre());
                    entradaApellidoFamiliar.requestFocus();
                    entradaApellidoFamiliar.setText(dto.getApellido());
                    entradaCedulaFamiliar.requestFocus();
                    entradaCedulaFamiliar.setText(Integer.toString(dto.getCedula()));
                    new EscucharBotones.focus().subir(etiquetaFechaNacimientoFamiliar,
                            entradaFechaNacimientoFamiliar, 0, 0, 153);
                    entradaFechaNacimientoFamiliar.setText(dto.getFechaDeNacimiento());
                    modelo.setSelectedItem(dto.getParentesco());
                    modelo1.setSelectedItem(dto.getGenero());
                    entradaNombreFamiliar.requestFocus();
                }
            }
            if (e.getKeyCode() == NativeKeyEvent.VK_F6) {
                if (FamiliaresDTO.getListFamiliares().size() - (cantFamiliares - 1) < FamiliaresDTO.getListFamiliares().size()) {
                    cantFamiliares--;
                    //JOptionPane.showMessageDialog(null, cantFamiliares);
                    FamiliaresDTO dto = FamiliaresDTO.getListFamiliares()
                            .get(FamiliaresDTO.getListFamiliares().size() - cantFamiliares);
                    Familiar.setID(FamiliaresDTO.getListFamiliares().size() - cantFamiliares);
                    entradaApellidoFamiliar.requestFocus();
                    entradaApellidoFamiliar.setText(dto.getApellido());
                    entradaCedulaFamiliar.requestFocus();
                    entradaCedulaFamiliar.setText(Integer.toString(dto.getCedula()));
                    entradaNombreFamiliar.requestFocus();
                    entradaNombreFamiliar.setText(dto.getNombre());
                    new EscucharBotones.focus().subir(etiquetaFechaNacimientoFamiliar,
                            entradaFechaNacimientoFamiliar, 0, 0, 153);
                    entradaFechaNacimientoFamiliar.setText(dto.getFechaDeNacimiento());
                    modelo.setSelectedItem(dto.getParentesco());
                    modelo1.setSelectedItem(dto.getGenero());
                }
            }
        }

        /* Key Released */
        @Override
        public void nativeKeyReleased(NativeKeyEvent e) {
        }


        /* I can't find any output from this call */
        @Override
        public void nativeKeyTyped(NativeKeyEvent e) {
        }

        public void detener(KeyUniversal key) {
            GlobalScreen.getInstance().removeNativeKeyListener(key);
            GlobalScreen.unregisterNativeHook();
        }

        public void iniciar(KeyUniversal key) {
            try {
                /* Register jNativeHook */
                if (!GlobalScreen.isNativeHookRegistered()) {
                    GlobalScreen.registerNativeHook();
                }
            } catch (NativeHookException ex) {
                /* Its error */
                System.err.println("There was a problem registering the native hook.");
                System.err.println(ex.getMessage());
                System.exit(1);
            }
            GlobalScreen.getInstance().addNativeKeyListener(key);
        }

    }

    private void ajustaScrollBar(JComboBox<?> box) {
        // pega o componente
        Object comp = box.getUI().getAccessibleChild(box, 0);

        // verifica se é a instância correta
        if (comp instanceof JPopupMenu) {
            // Converte para o tipo certo e atribui a scroll bar horizontal
            JPopupMenu popup = (JPopupMenu) comp;
            JScrollPane scrollPane = (JScrollPane) popup.getComponent(0);
            scrollPane.setHorizontalScrollBar(new JScrollBar(JScrollBar.HORIZONTAL));
            scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        }
    }


    private void btnAgregarFamiliarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarFamiliarActionPerformed
        DefaultComboBoxModel<String> modelo = (DefaultComboBoxModel <String>) listParentescoFamiliar.getModel();
        DefaultComboBoxModel<String> modelo1 = (DefaultComboBoxModel<String>) listGeneroFamiliar.getModel();
        int aux = agregarFamiliar();
        if (aux == 1) {
            entradaNombreFamiliar.setText("");
            entradaApellidoFamiliar.setText("");
            entradaCedulaFamiliar.setText("");
            entradaFechaNacimientoFamiliar.setText("");
            new EscucharBotones.focus().bajar(etiquetaApellidoFamiliar, entradaApellidoFamiliar);
            new EscucharBotones.focus().bajar(etiquetaCedulaFamiliar, entradaCedulaFamiliar);
            new EscucharBotones.focus().bajar(etiquetaFechaNacimientoFamiliar, entradaFechaNacimientoFamiliar);
            entradaNombreFamiliar.requestFocus();
            modelo.setSelectedItem("PARENTESCO");
            modelo1.setSelectedItem("GENERO");
            cantFamiliares = 0;
        } else if (aux == 0) {
            new sistema.alertas.Error(this, true, "\n EXISTEN CAMPOS VACIOS").setVisible(true);
        }
    }//GEN-LAST:event_btnAgregarFamiliarActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        DefaultComboBoxModel<String> modelo = (DefaultComboBoxModel <String>) listGenero.getModel();
        DefaultComboBoxModel<String> modelo1 = (DefaultComboBoxModel<String>) listTipo.getModel();
        DefaultComboBoxModel<String> modelo2 = (DefaultComboBoxModel<String>) listEstadoCivil.getModel();
        DefaultComboBoxModel<String> modelo3 = (DefaultComboBoxModel<String>) listTipoDeSangre.getModel();

        if (entradaPeso.getText().equals("")) {
            new sistema.alertas.Error(this, true, "\n EL CAMPO PESO ES REQUERIDO").setVisible(true);
        } else if (modelo3.getSelectedItem().equals("TIPO DE SANGRE")) {
            new sistema.alertas.Error(this, true, "\n EL CAMPO TIPO DE SANGRE ES REQUERIDO").setVisible(true);
        } else {
            PacientesDTO paciente = new PacientesDTO();
            paciente.setID_Paciente(Integer.parseInt(entradaID.getText()));
            paciente.setNombre(entradaNombre.getText().toUpperCase());
            paciente.setApellido(entradaApellido.getText().toUpperCase());
            paciente.setCedula(Integer.parseInt(entradaCedula.getText()));
            paciente.setFechaDeNacimiento(entradaFechaNacimiento.getText().toUpperCase());
            paciente.setEdad(CalcularEdad.convertir(entradaFechaNacimiento.getText()));
            paciente.setGenero(modelo.getSelectedItem().toString().toUpperCase());
            paciente.setTipo(modelo1.getSelectedItem().toString().toUpperCase());
            paciente.setEstadoCivil(modelo2.getSelectedItem().toString().toUpperCase());
            paciente.setPeso(Integer.parseInt(entradaPeso.getText()));
            paciente.setTipoDeSangre(modelo3.getSelectedItem().toString().toUpperCase());
            Facade.AñadirPacientes(paciente);
            if (!FamiliaresDTO.getListFamiliares().isEmpty()) {
                Facade.AñadirFamiliares(FamiliaresDTO.getListFamiliares());
                FamiliaresDTO.removerListFamiliares();
            }
            if (!entradaAlergias.getText().equals("")) {
                if (validarAlergias() > 0) {
                    return;
                }
            }
            if (listEnfermedadesCronicas.getSelectedIndex() != 0) {
                if (validarCombox("ENFERMEDAD", listEnfermedadesCronicas) > 0) {
                    return;
                }
            }
            if (listCirugias.getSelectedIndex() != 0) {
                if (validarCombox("CIRUGIA", listCirugias) > 0) {
                    return;
                }
            }

            DatosMedicosPacienteDTO datos = new DatosMedicosPacienteDTO();
            if (!PacientesDTO.getAlergias().isEmpty()) {
                datos.setID_Paciente(Integer.parseInt(entradaID.getText()));
                datos.setTipo("Alergias");
                for (String alergia : PacientesDTO.getAlergias()) {
                    datos.setNombre(alergia);
                    Facade.AñadirDatosMedicosPaciente(datos);
                }
                PacientesDTO.getAlergias().removeAll(PacientesDTO.getAlergias());
            }
            if (!PacientesDTO.getEnfermedadesCronicas().isEmpty()) {
                datos.setID_Paciente(Integer.parseInt(entradaID.getText()));
                datos.setTipo("Enfermedades Cronicas");
                for (String enfermedadCronica : PacientesDTO.getEnfermedadesCronicas()) {
                    datos.setNombre(enfermedadCronica);
                    Facade.AñadirDatosMedicosPaciente(datos);
                }
                PacientesDTO.getEnfermedadesCronicas().removeAll(PacientesDTO.getEnfermedadesCronicas());
            }
            if (!PacientesDTO.getCirugias().isEmpty()) {
                datos.setID_Paciente(Integer.parseInt(entradaID.getText()));
                datos.setTipo("Cirugias");
                for (String Cirugia : PacientesDTO.getCirugias()) {
                    datos.setNombre(Cirugia);
                    Facade.AñadirDatosMedicosPaciente(datos);
                }
                PacientesDTO.getCirugias().removeAll(PacientesDTO.getCirugias());
            }
            entradaNombre.setText("");
            entradaApellido.setText("");
            entradaCedula.setText("");
            entradaFechaNacimiento.setText("");
            entradaID.setText("");
            modelo.setSelectedItem("GENERO");
            modelo1.setSelectedItem("TIPO");
            modelo2.setSelectedItem("ESTADO CIVIL");
            entradaNombreFamiliar.setText("");
            entradaApellidoFamiliar.setText("");
            entradaCedulaFamiliar.setText("");
            entradaPeso.setText("");
            entradaAlergias.setText("");
            listTipoDeSangre.setSelectedIndex(0);
            listEnfermedadesCronicas.setSelectedIndex(0);
            listCirugias.setSelectedIndex(0);
            entradaFechaNacimientoFamiliar.setText("");
            new EscucharBotones.focus().bajar(etiquetaApellido, entradaApellido);
            new EscucharBotones.focus().bajar(etiquetaCedula, entradaCedula);
            new EscucharBotones.focus().bajar(etiquetaID, entradaID);
            new EscucharBotones.focus().bajar(etiquetaFechaNacimiento, entradaFechaNacimiento);
            new EscucharBotones.focus().bajar(etiquetaNombreFamiliar, entradaNombreFamiliar);
            new EscucharBotones.focus().bajar(etiquetaApellidoFamiliar, entradaApellidoFamiliar);
            new EscucharBotones.focus().bajar(etiquetaCedulaFamiliar, entradaCedulaFamiliar);
            new EscucharBotones.focus().bajar(etiquetaFechaNacimientoFamiliar, entradaFechaNacimientoFamiliar);
            new EscucharBotones.focus().bajar(etiquetaPeso, entradaPeso);

            modelo = (DefaultComboBoxModel<String>) listParentescoFamiliar.getModel();
            modelo1 = (DefaultComboBoxModel<String>) listGeneroFamiliar.getModel();
            modelo.setSelectedItem("PARENTESCO");
            modelo1.setSelectedItem("GENERO");
            new Hecho(this, true).setVisible(true);
            entradaNombre.requestFocus();
            jPanelSlider1.nextPanel(5, panelDatosFamiliares, JPanelSlider.right);
            jPanelSlider1.nextPanel(5, panelDatosPersonales, JPanelSlider.right);
            estados = 0;
            cantFamiliares = 0;
            btnAtras.setEnabled(false);
            btnAdelante.setEnabled(true);
        }
    }//GEN-LAST:event_jButton21ActionPerformed

    

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        etiquetaHome.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaConsulta.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaPacientes.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaEstadisticas.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaHistorial.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaDocumentacion.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaAcercaDe.setFont(new Font("Bookman Old Style", 3, 18)); // NOI18N
        panelHistorial.setVisible(false);
        panelCuenta.setVisible(false);
        panelHome.setVisible(false);
        panelPacientes.setVisible(false);
        panelConsulta.setVisible(false);
        panelConfig.setVisible(false);
        panelEstadistica.setVisible(false);
        panelDocumentacion.setVisible(false);
        panelAcercaDe.setVisible(true);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void btnAñadirAlergiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirAlergiaActionPerformed
        validarAlergias();
    }//GEN-LAST:event_btnAñadirAlergiaActionPerformed

    private void listEnfermedadesCronicasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listEnfermedadesCronicasActionPerformed
    }//GEN-LAST:event_listEnfermedadesCronicasActionPerformed

    private void btnAñadirEnfermedadCronicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirEnfermedadCronicaActionPerformed
        validarCombox("ENFERMEDAD", listEnfermedadesCronicas);

    }//GEN-LAST:event_btnAñadirEnfermedadCronicaActionPerformed

    private void btnAñadirCirugiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirCirugiasActionPerformed
        validarCombox("CIRUGIA", listCirugias);
    }//GEN-LAST:event_btnAñadirCirugiasActionPerformed

    private void listPacientes1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listPacientes1ItemStateChanged
        if (listPacientes1.getSelectedIndex() > 0) {
            etiquetaSelecionarPaciente.setVisible(false);
            jScrollPane1.setVisible(true);
            jScrollPane3.setVisible(true);
            jScrollPane5.setVisible(true);
            jScrollPane6.setVisible(true);
            jScrollPane65.setVisible(true);
            int cedulaPaciente = listPacientes1.getItemAt(listPacientes1.getSelectedIndex()).getCedula();
            crearHistorial(cedulaPaciente);
        } else {
            etiquetaSelecionarPaciente.setVisible(true);
            jScrollPane1.setVisible(false);
            jScrollPane3.setVisible(false);
            jScrollPane5.setVisible(false);
            jScrollPane6.setVisible(false);
            jScrollPane65.setVisible(false);
        }
    }//GEN-LAST:event_listPacientes1ItemStateChanged

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        etiquetaHome.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaConsulta.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaPacientes.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaEstadisticas.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaHistorial.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaDocumentacion.setFont(new Font("Bookman Old Style", 3, 18)); // NOI18N
        etiquetaAcercaDe.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        panelHistorial.setVisible(false);
        panelCuenta.setVisible(false);
        panelHome.setVisible(false);
        panelPacientes.setVisible(false);
        panelConsulta.setVisible(false);
        panelConfig.setVisible(false);
        panelEstadistica.setVisible(false);
        panelDocumentacion.setVisible(true);
        panelAcercaDe.setVisible(false);
        //jList1.setSelectedValue("Introducción", true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        new NuevaCita(this, true).setVisible(true);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        new MisCitas(this, true).setVisible(true);
    }//GEN-LAST:event_jButton20ActionPerformed

    private void listMotivoConsultaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listMotivoConsultaItemStateChanged
        llenarListaCausaConsulta(0);
    }//GEN-LAST:event_listMotivoConsultaItemStateChanged

    private void listEnfermedadesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listEnfermedadesItemStateChanged
        if (listTipoConsulta.getSelectedIndex() == 2) {
            llenarListaAccionConsulta();
        }
    }//GEN-LAST:event_listEnfermedadesItemStateChanged

    private void btnAñadirEnfermedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirEnfermedadActionPerformed
        DefaultComboBoxModel <String>modelo;
        modelo = (DefaultComboBoxModel<String>) listTipoConsulta.getModel();
        System.out.println(this.listPacientes.getSelectedIndex());
        if (!listTipoConsulta.getSelectedItem().equals("SELECCIONE EL TIPO DE CONSULTA")) {
            if (!listMotivoConsulta.getSelectedItem().equals("SELECCIONE EL MOTIVO DE LA CONSULTA")
                    && !listMotivoConsulta.getSelectedItem().equals("SELECCIONE PRIMERO EL TIPO DE CONSULTA")) {
                Añadir v;
                if (modelo.getSelectedItem().equals("CONSULTA PREVENTIVA")) {
                    v = new Añadir(this, true, "Añadir Estudios", "Nombre de el estudio");
                } else {
                    if (listMotivoConsulta.getSelectedItem().equals("ACTIVIDADES DE ENFERMERIA")) {
                        v = new Añadir(this, true, "Añadir Actividad de Enfermeria", "Nombre de la Actividad");
                    } else {
                        v = new Añadir(this, true, "Añadir Enfermedades", "Nombre de la enfermedad");
                        v.entrada.setSize(220, 25);
                        modelo = (DefaultComboBoxModel<String>) v.list.getModel();
                        v.list.setVisible(true);
                    }
                }
                v.setVisible(true);
                if (Añadir.continuar) {
                    llenarListaCausaConsulta(1);
                }

            } else {
                new sistema.alertas.Error(this, true, "DEBE SELECCIONAR PRIMERO\n EL MOTIVO DE CONSULTA").setVisible(true);
            }
        } else {
            new sistema.alertas.Error(this, true, "DEBE SELECCIONAR PRIMERO\n EL TIPO DE CONSULTA").setVisible(true);
        }
    }//GEN-LAST:event_btnAñadirEnfermedadActionPerformed

    private void btnAñadirAccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirAccionActionPerformed
        Añadir v;
        if (!listMotivoConsulta.getSelectedItem().equals("SELECCIONE EL MOTIVO DE LA CONSULTA")
                && !listMotivoConsulta.getSelectedItem().equals("SELECCIONE PRIMERO EL TIPO DE CONSULTA")) {
            if (!listEnfermedades.getSelectedItem().equals("SELECCIONE LA CAUSA DE LA CONSULTA")
                    && !listEnfermedades.getSelectedItem().equals("SELECCIONE PRIMERO EL MOTIVO DE LA CONSULTA")) {
                v = new Añadir(this, true, "Añadir Referencias", "Nombre de la Referencia");
                /* v.entrada.setSize(220, 25);
                modelo = (DefaultComboBoxModel) v.list.getModel();
                modelo.removeAllElements();
                modelo.addElement("TIPO DE ACTIVIDAD");
                modelo.addElement("REPOSO");
                modelo.addElement("REFERENCIA");
                v.list.setVisible(true);*/
                v.setVisible(true);
                llenarListaAccionConsulta();
            } else {
                new sistema.alertas.Error(this, true, "DEBE SELECCIONAR PRIMERO\n LA CAUSA DE LA CONSULTA").setVisible(true);
            }
        } else {
            new sistema.alertas.Error(this, true, "DEBE SELECCIONAR PRIMERO\n EL MOTIVO DE CONSULTA").setVisible(true);
        }
    }//GEN-LAST:event_btnAñadirAccionActionPerformed

    private void btnAñadirResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirResultadoActionPerformed
        Añadir v;
        if (!listMotivoConsulta.getSelectedItem().equals("SELECCIONE EL MOTIVO DE LA CONSULTA")
                && !listMotivoConsulta.getSelectedItem().equals("SELECCIONE PRIMERO EL TIPO DE CONSULTA")) {
            if (!listEnfermedades.getSelectedItem().equals("SELECCIONE LA CAUSA DE LA CONSULTA")
                    && !listEnfermedades.getSelectedItem().equals("SELECCIONE PRIMERO EL MOTIVO DE LA CONSULTA")) {
                v = new Añadir(this, true, "Añadir Resultado de Evaluacion", "Nombre del Resultado");
                v.setVisible(true);
                llenarListaAccionConsulta();
            } else {
                new sistema.alertas.Error(this, true, "DEBE SELECCIONAR PRIMERO\n LA CAUSA DE LA CONSULTA").setVisible(true);
            }
        } else {
            new sistema.alertas.Error(this, true, "DEBE SELECCIONAR PRIMERO\n EL MOTIVO DE CONSULTA").setVisible(true);
        }

    }//GEN-LAST:event_btnAñadirResultadoActionPerformed

    private void btnAñadirPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirPacienteActionPerformed
        etiquetaHome.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaConsulta.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaPacientes.setFont(new Font("Bookman Old Style", 3, 18)); // NOI18N
        etiquetaEstadisticas.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaHistorial.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaDocumentacion.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18N
        etiquetaAcercaDe.setFont(new Font("Bookman Old Style", 2, 18)); // NOI18NpanelCuenta.setVisible(false);
        panelHome.setVisible(false);
        panelPacientes.setVisible(true);
        panelConsulta.setVisible(false);
        panelConfig.setVisible(false);
        panelRegistroPacientes.setVisible(true);
        btnNuevoPaciente.setIcon(new ImageIcon(getClass().getResource("/img/btnNuevo rollover.png"))); // NOI18N;
        btnPacientesRegistrados.setIcon(new ImageIcon(getClass().getResource("/img/btn registrado.png")));
        panelPacientesRegistrados.setVisible(false);
        panelCuenta.setVisible(false);
        panelEstadistica.setVisible(false);
        panelHistorial.setVisible(false);
        panelDocumentacion.setVisible(false);
        panelAcercaDe.setVisible(false);
    }//GEN-LAST:event_btnAñadirPacienteActionPerformed

    private void listAccionConsultaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listAccionConsultaItemStateChanged
        if (listAccionConsulta.getSelectedIndex() > 0
                && listAccionConsulta.getSelectedItem().equals("REPOSO")) {
            listAccionConsulta.setSize(220, 25);
            btnAñadirAccion.setLocation(270, 246);
            etiquetaDiasReposo.setVisible(true);
            entradaDiasReposo.setVisible(true);
        } else {
            listAccionConsulta.setSize(360, 25);
            btnAñadirAccion.setLocation(410, 246);
            etiquetaDiasReposo.setVisible(false);
            entradaDiasReposo.setVisible(false);
        }
    }//GEN-LAST:event_listAccionConsultaItemStateChanged

    private void listPacientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listPacientesItemStateChanged
        llenarListTipoConsulta();
    }//GEN-LAST:event_listPacientesItemStateChanged

    private void btnRegistarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistarConsultaActionPerformed
        if (listPacientes.getSelectedIndex() == 0) {
            new sistema.alertas.Error(this, true, "EL NOMBRE DEL PACIENTE ES REQUERIDO").setVisible(true);
        } else {
            if (listTipoConsulta.getSelectedIndex() == 0) {
                new sistema.alertas.Error(this, true, "EL TIPO DE CONSULTA ES REQUERIDO").setVisible(true);
            } else {
                if (listMotivoConsulta.getSelectedIndex() == 0) {
                    new sistema.alertas.Error(this, true, "EL MOTIVO DE LA CONSULTA ES REQUERIDO").setVisible(true);
                } else {
                    if (listEnfermedades.getSelectedIndex() == 0 && listTipoConsulta.getSelectedIndex() == 1) {
                        new sistema.alertas.Error(this, true, "LA ACCION A TOMAR EN LA CONSULTA ES REQUERIDO").setVisible(true);
                    } else if (listEnfermedades.getSelectedIndex() == 0 && listTipoConsulta.getSelectedIndex() == 2) {
                        new sistema.alertas.Error(this, true, "LA CAUSA DE LA CONSULTA ES REQUERIDO").setVisible(true);
                    } else {
                        if (listAccionConsulta.getSelectedItem().equals("REPOSO")
                                && entradaDiasReposo.getText().equals("")) {
                            new sistema.alertas.Error(this, true, "LOS DIAS DE REPOSO SON REQUERIDOS").setVisible(true);
                        } else {
                            HistorialDTO historial = new HistorialDTO();
                            historial.setTipoConsulta(listTipoConsulta.getSelectedItem().toString());
                            historial.setMotivoConsulta(listMotivoConsulta.getSelectedItem().toString());
                            historial.setDiagnostico(listEnfermedades.getSelectedItem().toString());
                            historial.setAccion("n/a");
                            historial.setResultado("n/a");
                            historial.setFecha(etiquetaFecha.getText());
                            historial.setHora(etiquetaHora.getText());
                            historial.setID_Paciente(listPacientes.getItemAt(listPacientes.getSelectedIndex()).getID_Paciente());

                            ArrayList<ActividadesMedicasDTO> coll;
                            ArrayList<ActividadesMedicasDTO> especial;
                            if (listTipoConsulta.getSelectedIndex() == 1) {
                                coll = Facade.consultarConsultaPreventivaEspecifica(listMotivoConsulta.getSelectedItem().toString());
                                Facade.ActualizarActividadMedica(listMotivoConsulta.getSelectedItem().toString(), "Consulta Preventiva", estadisticas(coll, 1));
                                especial = Facade.consultarConsultaPreventiva("Consulta Preventiva Especial");
                                coll = Facade.consultarConsultaPreventiva("Consulta Preventiva");
                                Facade.ActualizarActividadMedica("TOTAL CONSULTAS PREVENTIVAS(CORPOELEC)", "Consulta Preventiva Especial", estadisticas(coll, especial));
                                porcentaje(coll, especial, "Consulta Preventiva");
                                coll = Facade.consultarRepososEstudiosReferenciasEspecificos(listEnfermedades.getSelectedItem().toString(), "Estudios");
                                Facade.ActualizarActividadMedica(listEnfermedades.getSelectedItem().toString(), "Estudios", estadisticas(coll, 1));
                                coll = Facade.consultarRepososEstudiosReferencias("Estudios");
                                especial = Facade.consultarRepososEstudiosReferencias("Estudios Especiales");
                                Facade.ActualizarActividadMedica("TOTAL ESTUDIOS SOLICITADOS", "Estudios Especiales", estadisticas(coll, especial));

                            } else if (listTipoConsulta.getSelectedIndex() == 2) {
                                if (listMotivoConsulta.getSelectedItem().equals("ACTIVIDADES DE ENFERMERIA")) {
                                    coll = Facade.consultarEnfermeriaEspecifica(listEnfermedades.getSelectedItem().toString());
                                    Facade.ActualizarActividadMedica(listEnfermedades.getSelectedItem().toString(), "Enfermeria", estadisticas(coll, 1));
                                } else {
                                    String actividad;
                                    if (listPacientes.getItemAt(listPacientes.getSelectedIndex()).getTipo().equals("ACTIVO")) {
                                        actividad = "ACTIVOS: " + listMotivoConsulta.getSelectedItem().toString();
                                        coll = Facade.consultarConsultaCurativaEspecifica(actividad, "Consulta Curativa Activos");
                                        Facade.ActualizarActividadMedica(actividad, "Consulta Curativa Activos", estadisticas(coll, 1));
                                        coll = Facade.consultarConsultaCurativa("Consulta Curativa Activos");
                                        especial = Facade.consultarConsultaCurativa("Consulta Curativa Especial Activos");
                                        Facade.ActualizarActividadMedica("TOTAL CONSULTAS A CORPOELEC", "Consulta Curativa Especial Activos", estadisticas(coll, especial));
                                    } else if (listPacientes.getItemAt(listPacientes.getSelectedIndex()).getTipo().equals("JUBILADO")) {
                                        coll = Facade.consultarConsultaCurativaEspecifica("JUBILADOS CORPOELEC", "Consulta Curativa Activos");
                                        Facade.ActualizarActividadMedica("JUBILADOS CORPOELEC", "Consulta Curativa Activos", estadisticas(coll, 1));
                                        actividad = "JUBILADOS: " + listMotivoConsulta.getSelectedItem().toString();
                                        coll = Facade.consultarConsultaCurativaEspecifica(actividad, "Consulta Curativa Activos");
                                        if (!coll.isEmpty()) {
                                            Facade.ActualizarActividadMedica(actividad, "Consulta Curativa Activos", estadisticas(coll, 1));
                                        }
                                        coll = Facade.consultarConsultaCurativa("Consulta Curativa Activos");
                                        especial = Facade.consultarConsultaCurativa("Consulta Curativa Especial Activos");
                                        Facade.ActualizarActividadMedica("TOTAL CONSULTAS A CORPOELEC", "Consulta Curativa Especial Activos", estadisticas(coll, especial));
                                    } else {
                                        actividad = "MINISTERIO DE ENERGIA ELECTRICA: " + listMotivoConsulta.getSelectedItem().toString();
                                        coll = Facade.consultarConsultaCurativaEspecifica(actividad, "Consulta Curativa Ministerio");
                                        Facade.ActualizarActividadMedica(actividad, "Consulta Curativa Ministerio", estadisticas(coll, 1));
                                        coll = Facade.consultarConsultaCurativa("Consulta Curativa Ministerio");
                                        especial = Facade.consultarConsultaCurativaEspecifica("TOTAL CONSULTAS A MINISTERIO DE ENERGIA ELECTRICA", "Consulta Curativa Especial Ministerio");
                                        Facade.ActualizarActividadMedica("TOTAL CONSULTAS A MINISTERIO DE ENERGIA ELECTRICA", "Consulta Curativa Especial Ministerio", estadisticas(coll, especial));
                                    }
                                    Facade.ActualizarEnfermedades(listEnfermedades.getSelectedItem().toString(), estadisticas());
                                }

                                if (listAccionConsulta.getSelectedIndex() > 0) {
                                    historial.setAccion(listAccionConsulta.getSelectedItem().toString());
                                    if (listAccionConsulta.getSelectedItem().equals("REPOSO")) {
                                        coll = Facade.consultarRepososEstudiosReferenciasEspecificos("Nº REPOSOS", "Reposos");
                                        Facade.ActualizarActividadMedica("Nº REPOSOS", "Reposos", estadisticas(coll, 1));
                                        coll = Facade.consultarRepososEstudiosReferenciasEspecificos("DIAS DE REPOSO", "Reposos");
                                        Facade.ActualizarActividadMedica("DIAS DE REPOSO", "Reposos", estadisticas(coll, Integer.parseInt(entradaDiasReposo.getText())));
                                    } else {
                                        coll = Facade.consultarRepososEstudiosReferenciasEspecificos(listAccionConsulta.getSelectedItem().toString(), "Referencias");
                                        Facade.ActualizarActividadMedica(listAccionConsulta.getSelectedItem().toString(), "Referencias", estadisticas(coll, 1));
                                    }
                                }
                                if (listResultadoConsulta.getSelectedIndex() > 0) {
                                    historial.setResultado(listResultadoConsulta.getSelectedItem().toString());
                                    coll = Facade.consultarConsultaCurativaEspecifica(listResultadoConsulta.getSelectedItem().toString(), "Resultado de Evaluacion");
                                    Facade.ActualizarActividadMedica(listResultadoConsulta.getSelectedItem().toString(), "Resultado de Evaluacion", estadisticas(coll, 1));
                                }
                            }
                            ArrayList<ActividadesMedicasDTO> aux;
                            coll = Facade.consultarConsultaCurativaEspecifica("TOTAL CONSULTAS A MINISTERIO DE ENERGIA ELECTRICA", "Consulta Curativa Especial Ministerio");
                            aux = Facade.consultarConsultaCurativaEspecifica("TOTAL CONSULTAS A CORPOELEC", "Consulta Curativa Especial Activos");
                            especial = Facade.consultarConsultaCurativaEspecifica("TOTAL CONSULTAS CURATIVAS (CORPOELEC, COMUNIDAD Y OTROS)", "Consulta Curativa Especial Ministerio");
                            Facade.ActualizarActividadMedica("TOTAL CONSULTAS CURATIVAS (CORPOELEC, COMUNIDAD Y OTROS)", "Consulta Curativa Especial Ministerio", estadisticas(totalesGenerales(coll, aux), especial));
                            coll = Facade.consultarConsultaCurativaEspecifica("TOTAL CONSULTAS CURATIVAS (CORPOELEC, COMUNIDAD Y OTROS)", "Consulta Curativa Especial Ministerio");
                            aux = Facade.consultarConsultaPreventiva("Consulta Preventiva Especial");
                            especial = Facade.consultarConsultaCurativaEspecifica("TOTAL DE CONSULTAS EN GENERAL (CONSULTAS CURATIVAS + CONSULTAS PREVENTIVAS CORPOELEC)", "Consulta Curativa Especial");
                            Facade.ActualizarActividadMedica("TOTAL DE CONSULTAS EN GENERAL (CONSULTAS CURATIVAS + CONSULTAS PREVENTIVAS CORPOELEC)", "Consulta Curativa Especial", estadisticas(totalesGenerales(coll, aux), especial));

                            Facade.AñadirHistorial(historial);
                            new Hecho(this, true).setVisible(true);
                            listPacientes.setSelectedIndex(0);
                            //JOptionPane.showMessageDialog(null, "registro");

                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnRegistarConsultaActionPerformed


    private void entradaBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entradaBuscarPacienteActionPerformed
        buscarPacientes();
    }//GEN-LAST:event_entradaBuscarPacienteActionPerformed

    private void listTipoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listTipoItemStateChanged
        if (listTipo.getSelectedIndex() == 0) {
            entradaFechaNacimiento.setText("");
            FechaNacimiento.setEnabled(false);
        } else {
            FechaNacimiento.setEnabled(true);
            int año;
            if (listTipo.getSelectedIndex() == 2) {
                año = 70;
            } else {
                año = 20;
            }
            setLimitesFechas(FechaNacimiento, null, año);
        }
    }//GEN-LAST:event_listTipoItemStateChanged

    private void listParentescoFamiliarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listParentescoFamiliarItemStateChanged
        int año = 0;
        if (listParentescoFamiliar.getSelectedIndex() == 0) {
            entradaFechaNacimientoFamiliar.setText("");
            FechaNacimientoFamiliar.setEnabled(false);
        } else {
            FechaNacimientoFamiliar.setEnabled(true);
            switch (listParentescoFamiliar.getSelectedIndex()) {
                case 1:
                case 2:
                    año = 8;
                    break;
                case 4:
                    año = 16;
                    break;
                case 5:
                    año = 24;
                    break;
                case 6:
                    año = 32;
                    break;
                default:
                año=0;
                    break;
            }
            setLimitesFechas(FechaNacimientoFamiliar, entradaFechaNacimiento.getText(), año);
        }
    }//GEN-LAST:event_listParentescoFamiliarItemStateChanged

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        DefaultListModel<String> modelo = (DefaultListModel<String>) jList1.getModel();
        textDocumentacion.setContentType("text/html");

        if (!jList1.isSelectionEmpty() && jList1.getSelectedValue().equals("Home")) {
            textDocumentacion.setText(
                    "<html><font color=\"#000099\" size=6><center>Home</center></font><br>"
                    + documentacion(2, 3)
                    + "</html>"
            );
        } else if (!jList1.isSelectionEmpty() && jList1.getSelectedValue().equals("Consultas")) {
            modelo.removeAllElements();
            modelo.addElement("Introduccion");
            modelo.addElement("Home");
            modelo.addElement("Consultas");
            modelo.addElement("     Consultas Preventivas");
            modelo.addElement("     Consultas Curativas");

            modelo.addElement("Pacientes");
            modelo.addElement("Estadisticas");
            modelo.addElement("Historial");
            modelo.addElement("Documentacion");
            modelo.addElement("Acerca de");
        } else if (!jList1.isSelectionEmpty() && jList1.getSelectedValue().equals("Pacientes")) {
            modelo.removeAllElements();
            modelo.addElement("Introduccion");
            modelo.addElement("Home");
            modelo.addElement("Consultas");
            modelo.addElement("Pacientes");
            modelo.addElement("     Nuevos Pacientes");
            modelo.addElement("     Pacientes Registrados");
            modelo.addElement("Estadisticas");
            modelo.addElement("Historial");
            modelo.addElement("Documentacion");
            modelo.addElement("Acerca de");
        } else if (!jList1.isSelectionEmpty() && jList1.getSelectedValue().equals("Introduccion")) {
            textDocumentacion.setText(
                    "<html><font color=\"#000099\" size=6><center>Introducción</center></font><br>"
                    + documentacion(0, 1)
                    + "</html>"
            );
        } else if (jList1.isSelectionEmpty()) {
            jList1.setSelectedIndex(0);
        }

    }//GEN-LAST:event_jList1ValueChanged

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        new EditarUsuario(this, true, Integer.parseInt(cedula.getText())).setVisible(true);
    }//GEN-LAST:event_jButton14ActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscarPacientes();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnMostrarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarTodoActionPerformed
        Collection<PacientesDTO> collPacientes = Facade.ConsultarPacientes();
        llenarTablaPacientes(collPacientes);
    }//GEN-LAST:event_btnMostrarTodoActionPerformed
    public String documentacion(int start, int end) {
        
        String texto = "";
        File archivo=new File("medical-system/src/main/resources/documentacion del sistema-convertido.pdf");
        try{
         PDDocument document = Loader.loadPDF(archivo);
            
             if (!document.isEncrypted()) {
                PDFTextStripper stripper = new PDFTextStripper();
                System.out.println(start+" "+end);
                stripper.setStartPage(start);
                stripper.setEndPage(end); 
                texto = stripper.getText(document);
            }  
        }catch(IOException ex){
            System.out.println("error"+ex);
        }
        return texto;
    }

    public ArrayList<ActividadesMedicasDTO> totalesGenerales(ArrayList<ActividadesMedicasDTO> coll, ArrayList<ActividadesMedicasDTO> coll1) {
        ArrayList<ActividadesMedicasDTO> aux = new ArrayList<>();
        for (int i = 0; i < coll.size(); i++) {
            aux.add(coll.get(i));
        }
        for (int i = 0; i < coll1.size(); i++) {
            aux.add(coll1.get(i));
        }
        return aux;
    }

    public void porcentaje(ArrayList<ActividadesMedicasDTO> coll, ArrayList<ActividadesMedicasDTO> especial, String tipo) {
        ActividadesMedicasDTO totales = new ActividadesMedicasDTO();
        DecimalFormatSymbols separadoresPersonalizados = new DecimalFormatSymbols();
        separadoresPersonalizados.setDecimalSeparator('.');
        DecimalFormat formato1 = new DecimalFormat("#.##", separadoresPersonalizados);
        float porcentaje = 0;
        for (int i = 0; i < especial.size(); i++) {
            totales = especial.get(i);
        }
        for (ActividadesMedicasDTO dto : coll) {
            porcentaje = Float.parseFloat(dto.getTotal()) * 100 / Float.parseFloat(totales.getTotal());
            dto.setPorcentaje(formato1.format(porcentaje) + "%");
            Facade.ActualizarActividadMedica(dto.getActividad(), tipo, dto);
        }
    }

    public ActividadesMedicasDTO estadisticas(ArrayList<ActividadesMedicasDTO> coll, int cant) {
        Calendar calendario = new GregorianCalendar();
        int dia;
        ActividadesMedicasDTO actv = new ActividadesMedicasDTO();
        dia = calendario.get(Calendar.DATE);
        for (int i = 0; i < coll.size(); i++) {
            actv = coll.get(i);
        }
        if (dia > 0 && dia <= 7) {
            int aux = Integer.parseInt(actv.getSemana1()) + cant;
            actv.setSemana1(Integer.toString(aux));
        } else if (dia > 7 && dia <= 14) {
            int aux = Integer.parseInt(actv.getSemana2()) + cant;
            actv.setSemana2(Integer.toString(aux));
        } else if (dia > 14 && dia <= 21) {
            int aux = Integer.parseInt(actv.getSemana3()) + cant;
            actv.setSemana3(Integer.toString(aux));
        } else if (dia > 21) {
            int aux = Integer.parseInt(actv.getSemana4()) + cant;
            actv.setSemana4(Integer.toString(aux));
        }
        int total = Integer.parseInt(actv.getSemana1()) + Integer.parseInt(actv.getSemana2())
                + Integer.parseInt(actv.getSemana3()) + Integer.parseInt(actv.getSemana4());
        actv.setTotal(Integer.toString(total));
        return actv;
    }

    public ActividadesMedicasDTO estadisticas(ArrayList<ActividadesMedicasDTO> coll, ArrayList<ActividadesMedicasDTO> especial) {
        ActividadesMedicasDTO totales = new ActividadesMedicasDTO();
        for (int i = 0; i < especial.size(); i++) {
            totales = especial.get(i);
        }
        int semana1 = 0;
        int semana2 = 0;
        int semana3 = 0;
        int semana4 = 0;
        float porcentaje = 0;
        for (ActividadesMedicasDTO dto : coll) {
            semana1 += Integer.parseInt(dto.getSemana1());
            semana2 += Integer.parseInt(dto.getSemana2());
            semana3 += Integer.parseInt(dto.getSemana3());
            semana4 += Integer.parseInt(dto.getSemana4());
        }
        totales.setSemana1(Integer.toString(semana1));
        totales.setSemana2(Integer.toString(semana2));
        totales.setSemana3(Integer.toString(semana3));
        totales.setSemana4(Integer.toString(semana4));

        int total = Integer.parseInt(totales.getSemana1()) + Integer.parseInt(totales.getSemana2())
                + Integer.parseInt(totales.getSemana3()) + Integer.parseInt(totales.getSemana4());
        totales.setTotal(Integer.toString(total));
        if (total > 0) {
            porcentaje = (total * 100) / total;
            totales.setPorcentaje(Float.toString(porcentaje) + "%");
        }
        return totales;
    }

    public EnfermedadesDTO estadisticas() {
        ArrayList<EnfermedadesDTO> coll;
        int aux;
        int totalHombres;
        int totalMujeres;
        int totalGeneral;
        PacientesDTO paciente = listPacientes.getItemAt(listPacientes.getSelectedIndex());
        coll = Facade.consultarEnfermedadesInfecciosasYParasitariasEspecificas("\'" + listEnfermedades.getSelectedItem().toString() + "\'");
        if (coll.isEmpty()) {
            coll = Facade.consultarNeoplasiasEspecificas("\'" + listEnfermedades.getSelectedItem().toString() + "\'");
        }
        EnfermedadesDTO enferm = new EnfermedadesDTO();
        for (int i = 0; i < coll.size(); i++) {
            enferm = coll.get(i);
        }
        if (paciente.getEdad() < 25) {
            if (paciente.getGenero().equals("MASCULINO")) {
                aux = Integer.parseInt(enferm.getHombresMenoresDe25Años()) + 1;
                enferm.setHombresMenoresDe25Años(Integer.toString(aux));
            } else {
                aux = Integer.parseInt(enferm.getMujeresMenoresDe25Años()) + 1;
                enferm.setMujeresMenoresDe25Años(Integer.toString(aux));
            }
        } else if (paciente.getEdad() > 24 && paciente.getEdad() < 45) {
            if (paciente.getGenero().equals("MASCULINO")) {
                aux = Integer.parseInt(enferm.getHombres25a44Años()) + 1;
                enferm.setHombres25a44Años(Integer.toString(aux));
            } else {
                aux = Integer.parseInt(enferm.getMujeres25a44Años()) + 1;
                enferm.setMujeres25a44Años(Integer.toString(aux));
            }
        } else if (paciente.getEdad() > 44 && paciente.getEdad() < 60) {
            if (paciente.getGenero().equals("MASCULINO")) {
                aux = Integer.parseInt(enferm.getHombres45a59Años()) + 1;
                enferm.setHombres45a59Años(Integer.toString(aux));
            } else {
                aux = Integer.parseInt(enferm.getMujeres45a59Años()) + 1;
                enferm.setMujeres45a59Años(Integer.toString(aux));
            }
        } else if (paciente.getEdad() > 59 && paciente.getEdad() < 65) {
            if (paciente.getGenero().equals("MASCULINO")) {
                aux = Integer.parseInt(enferm.getHombres60a64Años()) + 1;
                enferm.setHombres60a64Años(Integer.toString(aux));
            } else {
                aux = Integer.parseInt(enferm.getMujeres60a64Años()) + 1;
                enferm.setMujeres60a64Años(Integer.toString(aux));
            }
        } else if (paciente.getEdad() > 64) {
            if (paciente.getGenero().equals("MASCULINO")) {
                aux = Integer.parseInt(enferm.getHombres65AñosYMas()) + 1;
                enferm.setHombres65AñosYMas(Integer.toString(aux));
            } else {
                aux = Integer.parseInt(enferm.getMujeres65AñosYMas()) + 1;
                enferm.setMujeres65AñosYMas(Integer.toString(aux));
            }
        }
        totalHombres = Integer.parseInt(enferm.getHombresMenoresDe25Años())
                + Integer.parseInt(enferm.getHombres25a44Años())
                + Integer.parseInt(enferm.getHombres45a59Años())
                + Integer.parseInt(enferm.getHombres60a64Años())
                + Integer.parseInt(enferm.getHombres65AñosYMas());

        totalMujeres = Integer.parseInt(enferm.getMujeresMenoresDe25Años())
                + Integer.parseInt(enferm.getMujeres25a44Años())
                + Integer.parseInt(enferm.getMujeres45a59Años())
                + Integer.parseInt(enferm.getMujeres60a64Años())
                + Integer.parseInt(enferm.getMujeres65AñosYMas());

        totalGeneral = totalMujeres + totalHombres;
        enferm.setTotalHombres(Integer.toString(totalHombres));
        enferm.setTotalMujeres(Integer.toString(totalMujeres));
        enferm.setTotalGeneral(Integer.toString(totalGeneral));
        return enferm;
    }

    public int validarAlergias() {
        int control = 0;
        if (entradaAlergias.getText().equals("")) {
            new sistema.alertas.Error(this, true, "SE DEBE LLENAR EL CAMPO ACTUAL ANTES DE PODER AGREGAR UNO NUEVO").setVisible(true);
            control = 1;
        } else {
            if (EscucharBotones.AccionesTxt.getCant() == 0) {
                for (String aux : PacientesDTO.getAlergias()) {
                    if (aux.equals(entradaAlergias.getText().toUpperCase())) {
                        control = 1;
                    }
                }
                if (control == 0) {
                    PacientesDTO.añadirAlergias(entradaAlergias.getText().toUpperCase());
                } else {
                    new sistema.alertas.Error(this, true, "ESTA ALERGIA YA ESTA REGISTRADA").setVisible(true);
                }
            } else {
                for (String aux : PacientesDTO.getAlergias()) {
                    if (aux.equals(entradaAlergias.getText().toUpperCase()) && !PacientesDTO.getAlergias().get(PacientesDTO.getAlergias().size() - EscucharBotones.AccionesTxt.getCant()).equals(entradaAlergias.getText().toUpperCase())) {
                        control = 1;
                    }
                }
                if (control == 0) {
                    PacientesDTO.getAlergias().set(PacientesDTO.getAlergias().size() - EscucharBotones.AccionesTxt.getCant(), entradaAlergias.getText().toUpperCase());
                } else {
                    new sistema.alertas.Error(this, true, "ESTA ALERGIA YA ESTA REGISTRADA").setVisible(true);
                }
            }
            entradaAlergias.setText("");
            entradaAlergias.requestFocus();
            EscucharBotones.AccionesTxt.setCant(0);
        }
        return control;
    }

    public int validarCombox(String tipo, JComboBox<?> entrada) {
        ArrayList<String> list;
        int control = 0;
        DefaultComboBoxModel<?> modelo = (DefaultComboBoxModel<?>) entrada.getModel();
        String msj;
        if (tipo.equals("ENFERMEDAD")) {
            list = PacientesDTO.getEnfermedadesCronicas();
            msj = "ENFERMEDADES CRONICAS";
        } else {
            list = PacientesDTO.getCirugias();
            msj = "CIRUGIAS";
        }

        if (modelo.getSelectedItem().toString().equals(msj)) {
            new sistema.alertas.Error(this, true, "\n DEBE SELECCIONAR UNA " + tipo).setVisible(true);
            control = 1;
        } else {
            for (String aux : list) {
                if (aux.equals(modelo.getSelectedItem().toString())) {
                    control = 1;
                }
            }
            if (control == 0) {
                list.add(modelo.getSelectedItem().toString().toUpperCase());
            } else if (EscucharTeclas.getcant() == 0) {
                new sistema.alertas.Error(this, true, "ESTA " + tipo + " YA ESTA REGISTRADA").setVisible(true);
            }
            modelo.setSelectedItem(msj);
            EscucharTeclas.setcant(0);

            entrada.requestFocus();
        }
        return control;
    }

    public void crearHistorial(int cedula) {
        Collection<PacientesDTO> collPaciente;
        DefaultTableModel modelo = (DefaultTableModel) jTable2.getModel();
        PacientesDTO paciente;
        paciente = new PacientesDTO();
        Collection<HistorialDTO> historial;
        collPaciente = Facade.ConsultarPacientesEspecificos("Cedula", cedula);

        for (PacientesDTO dto : collPaciente) {
            paciente = dto;
        }
        historial = Facade.ConsultarHistorial(paciente.getID_Paciente());
        modelo.setNumRows(0);
        for (HistorialDTO dto : historial) {
            modelo.addRow(new Object[]{
                dto.getTipoConsulta(), dto.getMotivoConsulta(), dto.getDiagnostico(),
                dto.getAccion(), dto.getResultado(), dto.getFecha(), dto.getHora()
            });
        }
        VerDatosPaciente.llenarTablaDatosMedicos("Alergias", paciente.getID_Paciente(), jTable62);
        VerDatosPaciente.llenarTablaDatosMedicos("Enfermedades Cronicas", paciente.getID_Paciente(), jTable61);
        VerDatosPaciente.llenarTablaDatosMedicos("Cirugias", paciente.getID_Paciente(), jTable63);

        datosPersonalesHistorial.setContentType("text/html");
        datosPersonalesHistorial.setText(
                " <font   color=\"#0070c4\"> <center><b><i>Paciente:&nbsp; </i></b>  </font> "
                + "<font  color=\"#0070c4\"> <b><u>" + paciente.getNombre().toLowerCase() + "&nbsp;" + paciente.getApellido().toLowerCase() + "&nbsp;&nbsp;&nbsp;</u></b>  </font> "
                + "<font  color=\"#0070c4\"> <b> <i>&nbsp;&nbsp;&nbsp;Edad:&nbsp;</i>  </b> </font> "
                + "<font  color=\"#0070c4\"> <b> <u>" + paciente.getEdad() + "&nbsp;&nbsp;&nbsp;&nbsp;</u></b>  </font> "
                + "<font  color=\"#0070c4\"> <b> <i>&nbsp;&nbsp;&nbsp;Peso(Kg):&nbsp;</i>  </b> </font> "
                + "<font  color=\"#0070c4\"> <b> <u> " + paciente.getPeso() + " &nbsp;&nbsp;</u></b>  </font> "
                + "<font  color=\"#0070c4\"> <b> <i>&nbsp;&nbsp;&nbsp;Tipo de sangre:&nbsp;</i>  </b> </font> "
                + "<font  color=\"#0070c4\"> <b> <u> " + paciente.getTipoDeSangre() + "&nbsp;&nbsp;</u></b>  </font> "
        /*font color=\"#0070c4\"> <b> <i>&nbsp;&nbsp;&nbsp;Cedula:&nbsp;</i>  </b> </font> "
                + "<font color=\"#0070c4\"> <b> <u> 26.496.153 &nbsp;&nbsp;&nbsp;&nbsp;</u></b>  </font> "
                + "<font  color=\"#0070c4\"> <b><i>&nbsp;&nbsp;&nbsp;Id:&nbsp; </i></b>  </font> "
                + "<font color=\"#0070c4\"> <b><u> 4121 &nbsp;&nbsp;&nbsp;&nbsp;</u></b>  </font> "
                + "<   
                + "<font  color=\"#0070c4\"><br><br> <b> <i>&nbsp;&nbsp;&nbsp;Fecha de nacimiento:&nbsp;</i>  </b> </font> "
                + "<font  color=\"#0070c4\"> <b> <u>25-11-1998 &nbsp;&nbsp;&nbsp;&nbsp;</u></b>  </font> "
                + "<font  color=\"#0070c4\"> <b> <i>&nbsp;&nbsp;&nbsp;Genero:&nbsp;</i>  </b> </font> "
                + "<font  color=\"#0070c4\"> <b> <u> M &nbsp;&nbsp;&nbsp;&nbsp;</u></b>  </font> "
                + "<font  color=\"#0070c4\"> <b> <i>&nbsp;&nbsp;&nbsp;Estado civil:&nbsp;</i>  </b> </font> "
                + "<font  color=\"#0070c4\"> <b> <u> Soltero &nbsp;&nbsp;&nbsp;&nbsp;</u></b>  </font> "
         */
        );

    }

    static class date implements PropertyChangeListener {

        JTextField entrada;
        com.toedter.calendar.JDateChooser selector;
        JLabel etiqueta;

        public date(JTextField entrada, JDateChooser selector, JLabel etiqueta) {
            super();
            this.entrada = entrada;
            this.selector = selector;
            this.etiqueta = etiqueta;
        }

        @Override

        public void propertyChange(PropertyChangeEvent pce) {
            try {
                SimpleDateFormat adf = new SimpleDateFormat("dd - MM - yyyy");
                entrada.setText(adf.format(selector.getDate()));
                ((JTextField) selector.getDateEditor()).setText("");
                new EscucharBotones.focus().subir(etiqueta,
                        entrada, 0, 0, 153);
            } catch (Exception e) {

            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static synchronized void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (!"Nimbus".equals(info.getName())) {
                } else {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            principal obj = (principal) Instancia.getInstancia("medico.test");
            obj.cedula.setText("26496153");
            obj.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Correo;
    private com.toedter.calendar.JDateChooser FechaNacimiento;
    private com.toedter.calendar.JDateChooser FechaNacimientoFamiliar;
    private javax.swing.JLabel ID;
    private javax.swing.JPanel background;
    private javax.swing.JButton btnAdelante;
    private javax.swing.JButton btnAdelante2;
    private javax.swing.JButton btnAgregarFamiliar;
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnAtras2;
    private javax.swing.JButton btnAñadirAccion;
    private javax.swing.JButton btnAñadirAlergia;
    private javax.swing.JButton btnAñadirCirugias;
    private javax.swing.JButton btnAñadirConsulta;
    private javax.swing.JButton btnAñadirEnfermedad;
    private javax.swing.JButton btnAñadirEnfermedadCronica;
    private javax.swing.JButton btnAñadirPaciente;
    private javax.swing.JButton btnAñadirResultado;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnConfig;
    private javax.swing.JButton btnConfigCuenta;
    private javax.swing.JButton btnConsulta;
    static javax.swing.JButton btnEditar;
    static javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnMinimizar;
    private javax.swing.JButton btnMostrarTodo;
    private javax.swing.JButton btnNuevoPaciente;
    private javax.swing.JButton btnPacientesRegistrados;
    private javax.swing.JButton btnRegistarConsulta;
    static javax.swing.JButton btnVer;
    public javax.swing.JLabel cedula;
    private javax.swing.JEditorPane datosPersonalesHistorial;
    public javax.swing.JTextField entradaAlergias;
    private javax.swing.JTextField entradaApellido;
    private javax.swing.JTextField entradaApellidoFamiliar;
    private javax.swing.JTextField entradaBuscarPaciente;
    private javax.swing.JTextField entradaCedula;
    private javax.swing.JTextField entradaCedulaFamiliar;
    private javax.swing.JTextField entradaDiasReposo;
    private javax.swing.JTextField entradaFechaNacimiento;
    private javax.swing.JTextField entradaFechaNacimientoFamiliar;
    private javax.swing.JTextField entradaID;
    private javax.swing.JTextField entradaNombre;
    private javax.swing.JTextField entradaNombreFamiliar;
    private javax.swing.JTextField entradaPeso;
    private javax.swing.JLabel etiquetaAccion;
    private javax.swing.JLabel etiquetaAcercaDe;
    private javax.swing.JLabel etiquetaAlergias;
    private javax.swing.JLabel etiquetaApellido;
    private javax.swing.JLabel etiquetaApellidoFamiliar;
    private javax.swing.JLabel etiquetaCedula;
    private javax.swing.JLabel etiquetaCedulaFamiliar;
    public javax.swing.JLabel etiquetaCedulaUser;
    private javax.swing.JLabel etiquetaConsulta;
    private javax.swing.JLabel etiquetaCorreo;
    private javax.swing.JLabel etiquetaDiasReposo;
    private javax.swing.JLabel etiquetaDocumentacion;
    private javax.swing.JLabel etiquetaEnfermedades;
    private javax.swing.JLabel etiquetaEnfermedadesCronicas;
    private javax.swing.JLabel etiquetaEnfermedadesCronicas1;
    private javax.swing.JLabel etiquetaEstadisticas;
    private javax.swing.JLabel etiquetaEstadoCivil;
    private javax.swing.JLabel etiquetaFecha;
    private javax.swing.JLabel etiquetaFecha1;
    private javax.swing.JLabel etiquetaFechaNacimiento;
    private javax.swing.JLabel etiquetaFechaNacimientoFamiliar;
    private javax.swing.JLabel etiquetaGenero;
    private javax.swing.JLabel etiquetaGeneroFamiliar;
    private javax.swing.JLabel etiquetaHistorial;
    private javax.swing.JLabel etiquetaHome;
    public static javax.swing.JLabel etiquetaHora;
    public static javax.swing.JLabel etiquetaHora1;
    private javax.swing.JLabel etiquetaID;
    private javax.swing.JLabel etiquetaIDUser;
    public static javax.swing.JLabel etiquetaMesAño;
    private javax.swing.JLabel etiquetaNombre;
    private javax.swing.JLabel etiquetaNombreFamiliar;
    private javax.swing.JLabel etiquetaPacientes;
    private javax.swing.JLabel etiquetaParentescoFamiliar;
    private javax.swing.JLabel etiquetaPeso;
    private javax.swing.JLabel etiquetaProgreso;
    private javax.swing.JLabel etiquetaProgreso2;
    public static javax.swing.JLabel etiquetaRegion;
    private javax.swing.JLabel etiquetaResultadoConsulta;
    private javax.swing.JLabel etiquetaSelecionarPaciente;
    private javax.swing.JLabel etiquetaTipoDeSangre;
    private javax.swing.JLabel etiquetaTipoPaciente;
    private javax.swing.JLabel etiquetaTotalPacientes;
    private javax.swing.JLabel etiquetaTotalUsuarios;
    private javax.swing.JLabel etiquetaUser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private diu.swe.habib.JPanelSlider.JPanelSlider jPanelSlider1;
    private diu.swe.habib.JPanelSlider.JPanelSlider jPanelSlider3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane32;
    private javax.swing.JScrollPane jScrollPane33;
    private javax.swing.JScrollPane jScrollPane34;
    private javax.swing.JScrollPane jScrollPane35;
    private javax.swing.JScrollPane jScrollPane36;
    private javax.swing.JScrollPane jScrollPane37;
    private javax.swing.JScrollPane jScrollPane38;
    private javax.swing.JScrollPane jScrollPane39;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane40;
    private javax.swing.JScrollPane jScrollPane41;
    private javax.swing.JScrollPane jScrollPane42;
    private javax.swing.JScrollPane jScrollPane43;
    private javax.swing.JScrollPane jScrollPane44;
    private javax.swing.JScrollPane jScrollPane45;
    private javax.swing.JScrollPane jScrollPane46;
    private javax.swing.JScrollPane jScrollPane47;
    private javax.swing.JScrollPane jScrollPane48;
    private javax.swing.JScrollPane jScrollPane49;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane50;
    private javax.swing.JScrollPane jScrollPane51;
    private javax.swing.JScrollPane jScrollPane52;
    private javax.swing.JScrollPane jScrollPane53;
    private javax.swing.JScrollPane jScrollPane54;
    private javax.swing.JScrollPane jScrollPane55;
    private javax.swing.JScrollPane jScrollPane56;
    private javax.swing.JScrollPane jScrollPane57;
    private javax.swing.JScrollPane jScrollPane58;
    private javax.swing.JScrollPane jScrollPane59;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane60;
    private javax.swing.JScrollPane jScrollPane61;
    private javax.swing.JScrollPane jScrollPane62;
    private javax.swing.JScrollPane jScrollPane63;
    private javax.swing.JScrollPane jScrollPane64;
    private javax.swing.JScrollPane jScrollPane65;
    private javax.swing.JScrollPane jScrollPane66;
    private javax.swing.JScrollPane jScrollPane68;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    javax.swing.JTable jTable1;
    private javax.swing.JTable jTable10;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable12;
    private javax.swing.JTable jTable13;
    private javax.swing.JTable jTable14;
    private javax.swing.JTable jTable15;
    private javax.swing.JTable jTable16;
    private javax.swing.JTable jTable17;
    private javax.swing.JTable jTable18;
    private javax.swing.JTable jTable19;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable20;
    private javax.swing.JTable jTable21;
    private javax.swing.JTable jTable22;
    private javax.swing.JTable jTable23;
    private javax.swing.JTable jTable24;
    private javax.swing.JTable jTable25;
    private javax.swing.JTable jTable26;
    private javax.swing.JTable jTable27;
    private javax.swing.JTable jTable28;
    private javax.swing.JTable jTable29;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable30;
    private javax.swing.JTable jTable31;
    private javax.swing.JTable jTable32;
    private javax.swing.JTable jTable33;
    private javax.swing.JTable jTable34;
    private javax.swing.JTable jTable35;
    private javax.swing.JTable jTable36;
    private javax.swing.JTable jTable37;
    private javax.swing.JTable jTable38;
    private javax.swing.JTable jTable39;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable40;
    private javax.swing.JTable jTable41;
    private javax.swing.JTable jTable42;
    private javax.swing.JTable jTable43;
    private javax.swing.JTable jTable44;
    private javax.swing.JTable jTable45;
    private javax.swing.JTable jTable46;
    private javax.swing.JTable jTable47;
    private javax.swing.JTable jTable48;
    private javax.swing.JTable jTable49;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable50;
    private javax.swing.JTable jTable51;
    private javax.swing.JTable jTable52;
    private javax.swing.JTable jTable53;
    private javax.swing.JTable jTable54;
    private javax.swing.JTable jTable55;
    private javax.swing.JTable jTable56;
    private javax.swing.JTable jTable57;
    private javax.swing.JTable jTable58;
    private javax.swing.JTable jTable59;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable60;
    private javax.swing.JTable jTable61;
    private javax.swing.JTable jTable62;
    private javax.swing.JTable jTable63;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTable jTable9;
    private javax.swing.JLabel lblFechaActual;
    private javax.swing.JComboBox<String> listAccionConsulta;
    private javax.swing.JEditorPane listAtendidosRecientemente;
    public javax.swing.JComboBox<String> listCirugias;
    public javax.swing.JComboBox<String> listEnfermedades;
    public javax.swing.JComboBox<String> listEnfermedadesCronicas;
    private javax.swing.JComboBox<String> listEstadoCivil;
    private javax.swing.JComboBox<String> listGenero;
    private javax.swing.JComboBox<String> listGeneroFamiliar;
    public javax.swing.JComboBox<String> listMotivoConsulta;
    public javax.swing.JComboBox<PacientesDTO> listPacientes;
    public javax.swing.JComboBox<PacientesDTO> listPacientes1;
    private javax.swing.JComboBox<String> listParentescoFamiliar;
    private javax.swing.JComboBox<String> listResultadoConsulta;
    private javax.swing.JComboBox<String> listTipo;
    public javax.swing.JComboBox<String> listTipoConsulta;
    private javax.swing.JComboBox<String> listTipoDeSangre;
    public static javax.swing.JPopupMenu menuOpciones;
    private javax.swing.JLabel motivoConsulta;
    private javax.swing.JPanel panelAcercaDe;
    private javax.swing.JPanel panelConfig;
    private javax.swing.JPanel panelConsulta;
    private javax.swing.JPanel panelContenedorTablas;
    private javax.swing.JPanel panelCuenta;
    private javax.swing.JPanel panelDatos;
    private javax.swing.JPanel panelDatosConsulta;
    private javax.swing.JPanel panelDatosFamiliares;
    private javax.swing.JPanel panelDatosPaciente;
    private javax.swing.JPanel panelDatosPersonales;
    private javax.swing.JPanel panelDocumentacion;
    private javax.swing.JPanel panelEstadistica;
    private javax.swing.JPanel panelHistorial;
    private javax.swing.JPanel panelHome;
    private javax.swing.JPanel panelMenu;
    private javax.swing.JPanel panelPacientes;
    private javax.swing.JPanel panelPacientesRegistrados;
    private javax.swing.JPanel panelRegistroPacientes;
    private javax.swing.JPanel panelTabla1;
    private javax.swing.JPanel panelTabla2;
    private javax.swing.JPanel panelTabla3;
    private javax.swing.JPanel panelTabla4;
    private javax.swing.JPanel panelTabla5;
    private javax.swing.JPanel panelTabla6;
    private javax.swing.JPanel panelTabla7;
    private javax.swing.JPanel panelTabla8;
    private javax.swing.JPanel panelTabla9;
    public static javax.swing.JPanel pnlOpciones;
    public static javax.swing.JPanel pnlVerPacientes;
    private javax.swing.JLabel publicidad1;
    private javax.swing.JLabel publicidad2;
    private javax.swing.JLabel publicidad3;
    private javax.swing.JLabel publicidad4;
    private javax.swing.JLabel publicidad5;
    private javax.swing.JTextPane textDocumentacion;
    // End of variables declaration//GEN-END:variables
}
